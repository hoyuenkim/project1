{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  products: [],\n  originProducts: [],\n  testProducts: [],\n  testOriginProducts: [],\n  naviSize: null,\n  TableId: null,\n  isAddingProduct: false,\n  isLoadingCart: false,\n  categories: []\n};\nexport const LOAD_PRODUCTS_REQUEST = \"LOAD_PRODUCTS_REQUEST\";\nexport const LOAD_PRODUCTS_SUCCESS = \"LOAD_PRODUCTS_SUCCESS\";\nexport const LOAD_PRODUCTS_FAILURE = \"LOAD_PRODUCTS_FAILURE\";\nexport const ADD_QUANTITY_REQUEST = \"ADD_QUANTITY_REQUEST\";\nexport const ADD_QUANTITY_SUCCESS = \"ADD_QUANTITY_SUCCESS\";\nexport const ADD_QUANTITY_FAILURE = \"ADD_QUANTITY_FAILURE\";\nexport const SUBSTRACT_QUANTITY_REQUEST = \"SUBSTRACT_QUANTITY_REQUEST\";\nexport const SUBSTRACT_QUANTITY_SUCCESS = \"SUBSTRACT_QUANTITY_SUCCESS\";\nexport const SUBSTRACT_QUANTITY_FAILURE = \"SUBSTRACT_QUANTITY_FAILURE\";\nexport const ADD_QUANTITY_REQUEST_TEST = \"ADD_QUANTITY_REQUEST_TEST\";\nexport const ADD_QUANTITY_SUCCESS_TEST = \"ADD_QUANTITY_SUCCESS_TEST\";\nexport const ADD_QUANTITY_FAILURE_TEST = \"ADD_QUANTITY_FAILURE_TEST\";\nexport const SUBSTRACT_QUANTITY_REQUEST_TEST = \"SUBSTRACT_QUANTITY_REQUEST_TEST\";\nexport const SUBSTRACT_QUANTITY_SUCCESS_TEST = \"SUBSTRACT_QUANTITY_SUCCESS_TEST\";\nexport const SUBSTRACT_QUANTITY_FAILURE_TEST = \"SUBSTRACT_QUANTITY_FAILURE_TEST\";\nexport const ADD_PRODUCT_REQUEST = \"ADD_PRODUCT_REQUEST\";\nexport const ADD_PRODUCT_SUCCESS = \"ADD_PRODUCT_SUCCESS\";\nexport const ADD_PRODUCT_FAILURE = \"ADD_PRODUCT_FAILURE\";\nexport const LOAD_CART_REQUEST = \"LOAD_CART_REQUEST\";\nexport const LOAD_CART_SUCCESS = \"LOAD_CART_SUCCESS\";\nexport const LOAD_CART_FAILURE = \"LOAD_CART_FAILURE\";\nexport const INITIATE_QUANTITY_REQUEST = \"INITIATE_QUANTITY_REQUEST\";\nexport const GET_NAVIBAR_SIZE = \"GET_NAVIBAR_SIZE\";\nexport const SEARCH_PRODUCT_SUCCESS = \"SEARCH_PRODUCT_SUCCESS\";\nexport const SELECT_CATEGORY_SUCCESS = \"SELECT_CATEGORY_SUCCESS\";\nexport const LOAD_PRODUCT_REQUEST_TEST = \"LOAD_PRODUCT_REQUEST_TEST\";\nexport const LOAD_PRODUCT_SUCCESS_TEST = \"LOAD_PRODUCT_SUCCESS_TEST\";\nexport const LOAD_PRODUCT_FAILURE_TEST = \"LOAD_PRODUCT_FAILURE_TEST\";\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_NAVIBAR_SIZE:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          naviSize: action.data\n        });\n      }\n\n    case ADD_QUANTITY_SUCCESS:\n      {\n        const index = state.products.findIndex(product => product.id === action.data.id);\n        const product = state.products[index];\n        let quantity = product.quantity;\n        quantity < 100 ? quantity += 1 : 99;\n        const products = [...state.products];\n        products[index] = _objectSpread(_objectSpread({}, product), {}, {\n          quantity\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          products\n        });\n      }\n\n    case SUBSTRACT_QUANTITY_SUCCESS:\n      {\n        const index = state.products.findIndex(product => product.id === action.data.id);\n        const product = state.products[index];\n        let quantity = product.quantity;\n        quantity > 1 ? quantity -= 1 : 1;\n        const products = [...state.products];\n        products[index] = _objectSpread(_objectSpread({}, product), {}, {\n          quantity\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          products\n        });\n      }\n\n    case ADD_QUANTITY_SUCCESS_TEST:\n      {\n        const index = state.testProducts.findIndex(product => product.id === action.data.id);\n        const product = state.testProducts[index];\n        let quantity = product.Product.quantity;\n        quantity < product.quantity ? quantity += 1 : product.quantity - 1;\n        const testProducts = [...state.testProducts];\n        testProducts[index] = _objectSpread(_objectSpread({}, product), {}, {\n          quantity\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          testProducts\n        });\n      }\n\n    case SUBSTRACT_QUANTITY_SUCCESS_TEST:\n      {\n        const index = state.testProducts.findIndex(product => product.id === action.data.id);\n        const product = state.testProducts[index];\n        let quantity = product.Product.quantity;\n        quantity > 1 ? quantity -= 1 : 1;\n        const testProducts = [...state.testProducts];\n        testProducts[index] = _objectSpread(_objectSpread({}, product), {}, {\n          quantity\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          testProducts\n        });\n      }\n\n    case LOAD_PRODUCTS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_PRODUCTS_SUCCESS:\n      {\n        if (action.data[0].TableId) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            products: action.data[0].menus,\n            originProducts: action.data[0].menus,\n            TableId: action.data[0].TableId,\n            categories: action.data[1]\n          });\n        }\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          originProducts: action.data[0],\n          products: action.data[0],\n          categories: action.data[1]\n        });\n      }\n\n    case LOAD_PRODUCTS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_PRODUCT_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_PRODUCT_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          products: [action.data, ...state.products]\n        });\n      }\n\n    case ADD_PRODUCT_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_CART_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_CART_SUCCESS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          cart: [...state.cart, action.data]\n        });\n      }\n\n    case LOAD_CART_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case INITIATE_QUANTITY_REQUEST:\n      {\n        const product = action.data;\n        const index = state.products.findIndex(v => v.id == action.data.id);\n        const products = [...state.products];\n        products[index] = _objectSpread(_objectSpread({}, product), {}, {\n          quantity: 1\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          products\n        });\n      }\n\n    case SEARCH_PRODUCT_SUCCESS:\n      {\n        const filteredProducts = state.originProducts.filter(product => {\n          return product.title.indexOf(action.data.text) > -1;\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          products: filteredProducts\n        });\n      }\n\n    case SELECT_CATEGORY_SUCCESS:\n      {\n        if (action.id == 0) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            products: [...state.originProducts]\n          });\n        } else if (action.id == -1) {\n          const discountedProduct = state.originProducts.filter(v => {\n            return v.Discount !== null;\n          });\n          return _objectSpread(_objectSpread({}, state), {}, {\n            products: discountedProduct\n          });\n        }\n\n        const filteredProducts = state.originProducts.filter(r => r.Category.id == action.id);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          products: filteredProducts\n        });\n      }\n\n    case LOAD_PRODUCT_REQUEST_TEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_PRODUCT_SUCCESS_TEST:\n      {\n        console.log(action.data);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          testProducts: action.data.products,\n          testOriginProducts: action.data.products\n        });\n      }\n\n    case LOAD_PRODUCT_FAILURE_TEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/reducers/menu.js"],"names":["initialState","products","originProducts","testProducts","testOriginProducts","naviSize","TableId","isAddingProduct","isLoadingCart","categories","LOAD_PRODUCTS_REQUEST","LOAD_PRODUCTS_SUCCESS","LOAD_PRODUCTS_FAILURE","ADD_QUANTITY_REQUEST","ADD_QUANTITY_SUCCESS","ADD_QUANTITY_FAILURE","SUBSTRACT_QUANTITY_REQUEST","SUBSTRACT_QUANTITY_SUCCESS","SUBSTRACT_QUANTITY_FAILURE","ADD_QUANTITY_REQUEST_TEST","ADD_QUANTITY_SUCCESS_TEST","ADD_QUANTITY_FAILURE_TEST","SUBSTRACT_QUANTITY_REQUEST_TEST","SUBSTRACT_QUANTITY_SUCCESS_TEST","SUBSTRACT_QUANTITY_FAILURE_TEST","ADD_PRODUCT_REQUEST","ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAILURE","LOAD_CART_REQUEST","LOAD_CART_SUCCESS","LOAD_CART_FAILURE","INITIATE_QUANTITY_REQUEST","GET_NAVIBAR_SIZE","SEARCH_PRODUCT_SUCCESS","SELECT_CATEGORY_SUCCESS","LOAD_PRODUCT_REQUEST_TEST","LOAD_PRODUCT_SUCCESS_TEST","LOAD_PRODUCT_FAILURE_TEST","reducer","state","action","type","data","index","findIndex","product","id","quantity","Product","menus","cart","v","filteredProducts","filter","title","indexOf","text","discountedProduct","Discount","r","Category","console","log"],"mappings":"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","sourcesContent":["const initialState = {\n  products: [],\n  originProducts: [],\n  testProducts: [],\n  testOriginProducts: [],\n  naviSize: null,\n  TableId: null,\n  isAddingProduct: false,\n  isLoadingCart: false,\n  categories: [],\n};\n\nexport const LOAD_PRODUCTS_REQUEST = \"LOAD_PRODUCTS_REQUEST\";\nexport const LOAD_PRODUCTS_SUCCESS = \"LOAD_PRODUCTS_SUCCESS\";\nexport const LOAD_PRODUCTS_FAILURE = \"LOAD_PRODUCTS_FAILURE\";\n\nexport const ADD_QUANTITY_REQUEST = \"ADD_QUANTITY_REQUEST\";\nexport const ADD_QUANTITY_SUCCESS = \"ADD_QUANTITY_SUCCESS\";\nexport const ADD_QUANTITY_FAILURE = \"ADD_QUANTITY_FAILURE\";\n\nexport const SUBSTRACT_QUANTITY_REQUEST = \"SUBSTRACT_QUANTITY_REQUEST\";\nexport const SUBSTRACT_QUANTITY_SUCCESS = \"SUBSTRACT_QUANTITY_SUCCESS\";\nexport const SUBSTRACT_QUANTITY_FAILURE = \"SUBSTRACT_QUANTITY_FAILURE\";\n\nexport const ADD_QUANTITY_REQUEST_TEST = \"ADD_QUANTITY_REQUEST_TEST\";\nexport const ADD_QUANTITY_SUCCESS_TEST = \"ADD_QUANTITY_SUCCESS_TEST\";\nexport const ADD_QUANTITY_FAILURE_TEST = \"ADD_QUANTITY_FAILURE_TEST\";\n\nexport const SUBSTRACT_QUANTITY_REQUEST_TEST = \"SUBSTRACT_QUANTITY_REQUEST_TEST\";\nexport const SUBSTRACT_QUANTITY_SUCCESS_TEST = \"SUBSTRACT_QUANTITY_SUCCESS_TEST\";\nexport const SUBSTRACT_QUANTITY_FAILURE_TEST = \"SUBSTRACT_QUANTITY_FAILURE_TEST\";\n\nexport const ADD_PRODUCT_REQUEST = \"ADD_PRODUCT_REQUEST\";\nexport const ADD_PRODUCT_SUCCESS = \"ADD_PRODUCT_SUCCESS\";\nexport const ADD_PRODUCT_FAILURE = \"ADD_PRODUCT_FAILURE\";\n\nexport const LOAD_CART_REQUEST = \"LOAD_CART_REQUEST\";\nexport const LOAD_CART_SUCCESS = \"LOAD_CART_SUCCESS\";\nexport const LOAD_CART_FAILURE = \"LOAD_CART_FAILURE\";\n\nexport const INITIATE_QUANTITY_REQUEST = \"INITIATE_QUANTITY_REQUEST\";\n\nexport const GET_NAVIBAR_SIZE = \"GET_NAVIBAR_SIZE\";\n\nexport const SEARCH_PRODUCT_SUCCESS = \"SEARCH_PRODUCT_SUCCESS\";\n\nexport const SELECT_CATEGORY_SUCCESS = \"SELECT_CATEGORY_SUCCESS\";\n\nexport const LOAD_PRODUCT_REQUEST_TEST = \"LOAD_PRODUCT_REQUEST_TEST\";\nexport const LOAD_PRODUCT_SUCCESS_TEST = \"LOAD_PRODUCT_SUCCESS_TEST\";\nexport const LOAD_PRODUCT_FAILURE_TEST = \"LOAD_PRODUCT_FAILURE_TEST\";\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_NAVIBAR_SIZE: {\n      return {\n        ...state,\n        naviSize: action.data,\n      };\n    }\n\n    case ADD_QUANTITY_SUCCESS: {\n      const index = state.products.findIndex((product) => product.id === action.data.id);\n      const product = state.products[index];\n      let quantity = product.quantity;\n      quantity < 100 ? (quantity += 1) : 99;\n      const products = [...state.products];\n      products[index] = { ...product, quantity };\n\n      return {\n        ...state,\n        products,\n      };\n    }\n\n    case SUBSTRACT_QUANTITY_SUCCESS: {\n      const index = state.products.findIndex((product) => product.id === action.data.id);\n      const product = state.products[index];\n      let quantity = product.quantity;\n      quantity > 1 ? (quantity -= 1) : 1;\n      const products = [...state.products];\n      products[index] = { ...product, quantity };\n      return {\n        ...state,\n        products,\n      };\n    }\n\n    case ADD_QUANTITY_SUCCESS_TEST: {\n      const index = state.testProducts.findIndex((product) => product.id === action.data.id);\n      const product = state.testProducts[index];\n      let quantity = product.Product.quantity;\n      quantity < product.quantity ? (quantity += 1) : product.quantity - 1;\n      const testProducts = [...state.testProducts];\n      testProducts[index] = { ...product, quantity };\n\n      return {\n        ...state,\n        testProducts,\n      };\n    }\n\n    case SUBSTRACT_QUANTITY_SUCCESS_TEST: {\n      const index = state.testProducts.findIndex((product) => product.id === action.data.id);\n      const product = state.testProducts[index];\n      let quantity = product.Product.quantity;\n      quantity > 1 ? (quantity -= 1) : 1;\n      const testProducts = [...state.testProducts];\n      testProducts[index] = { ...product, quantity };\n      return {\n        ...state,\n        testProducts,\n      };\n    }\n\n    case LOAD_PRODUCTS_REQUEST: {\n      return {\n        ...state,\n      };\n    }\n\n    case LOAD_PRODUCTS_SUCCESS: {\n      if (action.data[0].TableId) {\n        return {\n          ...state,\n          products: action.data[0].menus,\n          originProducts: action.data[0].menus,\n          TableId: action.data[0].TableId,\n          categories: action.data[1],\n        };\n      }\n      return {\n        ...state,\n        originProducts: action.data[0],\n        products: action.data[0],\n        categories: action.data[1],\n      };\n    }\n\n    case LOAD_PRODUCTS_FAILURE: {\n      return {\n        ...state,\n      };\n    }\n\n    case ADD_PRODUCT_REQUEST: {\n      return {\n        ...state,\n      };\n    }\n\n    case ADD_PRODUCT_SUCCESS: {\n      return {\n        ...state,\n        products: [action.data, ...state.products],\n      };\n    }\n\n    case ADD_PRODUCT_FAILURE: {\n      return {\n        ...state,\n      };\n    }\n\n    case LOAD_CART_REQUEST: {\n      return {\n        ...state,\n      };\n    }\n\n    case LOAD_CART_SUCCESS: {\n      return {\n        ...state,\n        cart: [...state.cart, action.data],\n      };\n    }\n\n    case LOAD_CART_FAILURE: {\n      return {\n        ...state,\n      };\n    }\n\n    case INITIATE_QUANTITY_REQUEST: {\n      const product = action.data;\n      const index = state.products.findIndex((v) => v.id == action.data.id);\n      const products = [...state.products];\n      products[index] = { ...product, quantity: 1 };\n      return {\n        ...state,\n        products,\n      };\n    }\n\n    case SEARCH_PRODUCT_SUCCESS: {\n      const filteredProducts = state.originProducts.filter((product) => {\n        return product.title.indexOf(action.data.text) > -1;\n      });\n      return { ...state, products: filteredProducts };\n    }\n\n    case SELECT_CATEGORY_SUCCESS: {\n      if (action.id == 0) {\n        return { ...state, products: [...state.originProducts] };\n      } else if (action.id == -1) {\n        const discountedProduct = state.originProducts.filter((v) => {\n          return v.Discount !== null;\n        });\n        return { ...state, products: discountedProduct };\n      }\n      const filteredProducts = state.originProducts.filter((r) => r.Category.id == action.id);\n      return { ...state, products: filteredProducts };\n    }\n\n    case LOAD_PRODUCT_REQUEST_TEST: {\n      return { ...state };\n    }\n    case LOAD_PRODUCT_SUCCESS_TEST: {\n      console.log(action.data);\n      return {\n        ...state,\n        testProducts: action.data.products,\n        testOriginProducts: action.data.products,\n      };\n    }\n    case LOAD_PRODUCT_FAILURE_TEST: {\n      return {\n        ...state,\n      };\n    }\n\n    default: {\n      return {\n        ...state,\n      };\n    }\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}