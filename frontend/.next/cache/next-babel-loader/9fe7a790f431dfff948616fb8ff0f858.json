{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport produce from \"immer\";\nvar initialState = {\n  stocks: [],\n  originalStocks: []\n};\nexport var LOAD_LIST_REQUEST = \"LOAD_LIST_REQUEST\";\nexport var LOAD_LIST_SUCCESS = \"LOAD_LIST_SUCCESS\";\nexport var LOAD_LIST_FAILURE = \"LOAD_LIST_FAILURE\";\nexport var ADD_STOCK_REQUEST = \"ADD_STOCK_REQUEST\";\nexport var ADD_STOCK_SUCCESS = \"ADD_STOCK_SUCCESS\";\nexport var ADD_STOCK_FAILURE = \"ADD_STOCK_FAILURE\";\nexport var PLUS_QUANTITY_SUCCESS = \"PLUS_QUANTITY_SUCCESS\";\nexport var MINUS_QUANTITY_SUCCESS = \"MINUS_QUANTITY_SUCCESS\";\nexport var INITIATE_STOCK_QUANTITY_SUCCESS = \"INITIATE_STOCK_QUANTITY_SUCCESS\";\nexport var SEARCH_STOCK_PRODUCT_SUCCESS = \"SEARCH_STOCK_PRODUCT_SUCCESS\";\nexport var SELECT_STOCK_CATEGORY_SUCCESS = \"SELECT_STOCK_CATEGORY_SUCCESS\";\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_LIST_REQUEST:\n        break;\n\n      case LOAD_LIST_SUCCESS:\n        draft.stocks = action.data.stocks;\n        draft.originalStocks = action.data.stocks;\n        break;\n\n      case LOAD_LIST_FAILURE:\n        break;\n\n      case PLUS_QUANTITY_SUCCESS:\n        {\n          var product = draft.stocks.find(function (stock) {\n            return stock.id === action.data.id;\n          });\n          var quantity = product.quantity;\n          var stock = product.stock;\n          quantity = quantity < stock ? quantity += 1 : product.quantity;\n          product.quantity = quantity;\n        }\n        break;\n\n      case MINUS_QUANTITY_SUCCESS:\n        {\n          var _product = draft.stocks.find(function (stock) {\n            return stock.id === action.data.id;\n          });\n\n          var _quantity = _product.quantity;\n          _quantity = _quantity > 1 ? _quantity -= 1 : 1;\n          _product.quantity = _quantity;\n        }\n        break;\n\n      case INITIATE_STOCK_QUANTITY_SUCCESS:\n        {\n          var _product2 = draft.stocks.find(function (stock) {\n            return stock.id === action.data.id;\n          });\n\n          _product2.quantity = 1;\n        }\n        break;\n\n      case SEARCH_STOCK_PRODUCT_SUCCESS:\n        {\n          var products = draft.originalStocks.filter(function (stock) {\n            return stock.Product.title.includes(action.data.text);\n          });\n          draft.stocks = products;\n        }\n        break;\n\n      case SELECT_STOCK_CATEGORY_SUCCESS:\n        {\n          var _products = draft.originalStocks.filter(function (stock) {\n            return stock.Category.id === action.data.id;\n          });\n\n          draft.stocks = _products;\n        }\n        break;\n\n      case ADD_STOCK_SUCCESS:\n        {\n          // console.log(action.data);\n          console.log(action.data.id);\n\n          var _product3 = draft.originalStocks.find(function (stock) {\n            return stock.id === action.data.id;\n          });\n\n          console.log(_product3);\n\n          if (_product3) {\n            _product3.quantity = action.data.quantity;\n          }\n\n          draft.stocks = [].concat(_toConsumableArray(state.stocks), [action.data]);\n          draft.originalStocks = [].concat(_toConsumableArray(state.originalStocks), [action.data]);\n          break;\n        }\n\n      case ADD_STOCK_FAILURE:\n        {\n          draft.addStockError = action.error;\n        }\n\n      default:\n        state;\n        break;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/Dev/project1/frontend/reducers/stock.js"],"names":["produce","initialState","stocks","originalStocks","LOAD_LIST_REQUEST","LOAD_LIST_SUCCESS","LOAD_LIST_FAILURE","ADD_STOCK_REQUEST","ADD_STOCK_SUCCESS","ADD_STOCK_FAILURE","PLUS_QUANTITY_SUCCESS","MINUS_QUANTITY_SUCCESS","INITIATE_STOCK_QUANTITY_SUCCESS","SEARCH_STOCK_PRODUCT_SUCCESS","SELECT_STOCK_CATEGORY_SUCCESS","state","action","draft","type","data","product","find","stock","id","quantity","products","filter","Product","title","includes","text","Category","console","log","addStockError","error"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAArB;AAKA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AAEP,OAAO,IAAMC,+BAA+B,GAAG,iCAAxC;AAEP,OAAO,IAAMC,4BAA4B,GAAG,8BAArC;AAEP,OAAO,IAAMC,6BAA6B,GAAG,+BAAtC;AAEP,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBd,YAAyB;AAAA,MAAXe,MAAW;AAC/C,SAAOhB,OAAO,CAACe,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC/B,YAAQD,MAAM,CAACE,IAAf;AACE,WAAKd,iBAAL;AACE;;AACF,WAAKC,iBAAL;AACEY,QAAAA,KAAK,CAACf,MAAN,GAAec,MAAM,CAACG,IAAP,CAAYjB,MAA3B;AACAe,QAAAA,KAAK,CAACd,cAAN,GAAuBa,MAAM,CAACG,IAAP,CAAYjB,MAAnC;AACA;;AACF,WAAKI,iBAAL;AACE;;AAEF,WAAKI,qBAAL;AACE;AACE,cAAMU,OAAO,GAAGH,KAAK,CAACf,MAAN,CAAamB,IAAb,CAAkB,UAACC,KAAD;AAAA,mBAAWA,KAAK,CAACC,EAAN,KAAaP,MAAM,CAACG,IAAP,CAAYI,EAApC;AAAA,WAAlB,CAAhB;AACA,cAAIC,QAAQ,GAAGJ,OAAO,CAACI,QAAvB;AACA,cAAMF,KAAK,GAAGF,OAAO,CAACE,KAAtB;AACAE,UAAAA,QAAQ,GAAGA,QAAQ,GAAGF,KAAX,GAAoBE,QAAQ,IAAI,CAAhC,GAAqCJ,OAAO,CAACI,QAAxD;AACAJ,UAAAA,OAAO,CAACI,QAAR,GAAmBA,QAAnB;AACD;AACD;;AAEF,WAAKb,sBAAL;AACE;AACE,cAAMS,QAAO,GAAGH,KAAK,CAACf,MAAN,CAAamB,IAAb,CAAkB,UAACC,KAAD;AAAA,mBAAWA,KAAK,CAACC,EAAN,KAAaP,MAAM,CAACG,IAAP,CAAYI,EAApC;AAAA,WAAlB,CAAhB;;AACA,cAAIC,SAAQ,GAAGJ,QAAO,CAACI,QAAvB;AACAA,UAAAA,SAAQ,GAAGA,SAAQ,GAAG,CAAX,GAAgBA,SAAQ,IAAI,CAA5B,GAAiC,CAA5C;AACAJ,UAAAA,QAAO,CAACI,QAAR,GAAmBA,SAAnB;AACD;AACD;;AAEF,WAAKZ,+BAAL;AACE;AACE,cAAMQ,SAAO,GAAGH,KAAK,CAACf,MAAN,CAAamB,IAAb,CAAkB,UAACC,KAAD;AAAA,mBAAWA,KAAK,CAACC,EAAN,KAAaP,MAAM,CAACG,IAAP,CAAYI,EAApC;AAAA,WAAlB,CAAhB;;AACAH,UAAAA,SAAO,CAACI,QAAR,GAAmB,CAAnB;AACD;AACD;;AAEF,WAAKX,4BAAL;AACE;AACE,cAAMY,QAAQ,GAAGR,KAAK,CAACd,cAAN,CAAqBuB,MAArB,CAA4B,UAACJ,KAAD;AAAA,mBAC3CA,KAAK,CAACK,OAAN,CAAcC,KAAd,CAAoBC,QAApB,CAA6Bb,MAAM,CAACG,IAAP,CAAYW,IAAzC,CAD2C;AAAA,WAA5B,CAAjB;AAGAb,UAAAA,KAAK,CAACf,MAAN,GAAeuB,QAAf;AACD;AACD;;AAEF,WAAKX,6BAAL;AACE;AACE,cAAMW,SAAQ,GAAGR,KAAK,CAACd,cAAN,CAAqBuB,MAArB,CACf,UAACJ,KAAD;AAAA,mBAAWA,KAAK,CAACS,QAAN,CAAeR,EAAf,KAAsBP,MAAM,CAACG,IAAP,CAAYI,EAA7C;AAAA,WADe,CAAjB;;AAGAN,UAAAA,KAAK,CAACf,MAAN,GAAeuB,SAAf;AACD;AACD;;AAEF,WAAKjB,iBAAL;AAAwB;AACtB;AACAwB,UAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAM,CAACG,IAAP,CAAYI,EAAxB;;AACA,cAAMH,SAAO,GAAGH,KAAK,CAACd,cAAN,CAAqBkB,IAArB,CAA0B,UAACC,KAAD;AAAA,mBAAWA,KAAK,CAACC,EAAN,KAAaP,MAAM,CAACG,IAAP,CAAYI,EAApC;AAAA,WAA1B,CAAhB;;AACAS,UAAAA,OAAO,CAACC,GAAR,CAAYb,SAAZ;;AACA,cAAIA,SAAJ,EAAa;AACXA,YAAAA,SAAO,CAACI,QAAR,GAAmBR,MAAM,CAACG,IAAP,CAAYK,QAA/B;AACD;;AACDP,UAAAA,KAAK,CAACf,MAAN,gCAAmBa,KAAK,CAACb,MAAzB,IAAiCc,MAAM,CAACG,IAAxC;AACAF,UAAAA,KAAK,CAACd,cAAN,gCAA2BY,KAAK,CAACZ,cAAjC,IAAiDa,MAAM,CAACG,IAAxD;AACA;AACD;;AAED,WAAKV,iBAAL;AAAwB;AACtBQ,UAAAA,KAAK,CAACiB,aAAN,GAAsBlB,MAAM,CAACmB,KAA7B;AACD;;AAED;AACEpB,QAAAA,KAAK;AACL;AAzEJ;AA2ED,GA5Ea,CAAd;AA6ED,CA9ED","sourcesContent":["import produce from \"immer\";\r\n\r\nconst initialState = {\r\n  stocks: [],\r\n  originalStocks: [],\r\n};\r\n\r\nexport const LOAD_LIST_REQUEST = \"LOAD_LIST_REQUEST\";\r\nexport const LOAD_LIST_SUCCESS = \"LOAD_LIST_SUCCESS\";\r\nexport const LOAD_LIST_FAILURE = \"LOAD_LIST_FAILURE\";\r\n\r\nexport const ADD_STOCK_REQUEST = \"ADD_STOCK_REQUEST\";\r\nexport const ADD_STOCK_SUCCESS = \"ADD_STOCK_SUCCESS\";\r\nexport const ADD_STOCK_FAILURE = \"ADD_STOCK_FAILURE\";\r\n\r\nexport const PLUS_QUANTITY_SUCCESS = \"PLUS_QUANTITY_SUCCESS\";\r\n\r\nexport const MINUS_QUANTITY_SUCCESS = \"MINUS_QUANTITY_SUCCESS\";\r\n\r\nexport const INITIATE_STOCK_QUANTITY_SUCCESS = \"INITIATE_STOCK_QUANTITY_SUCCESS\";\r\n\r\nexport const SEARCH_STOCK_PRODUCT_SUCCESS = \"SEARCH_STOCK_PRODUCT_SUCCESS\";\r\n\r\nexport const SELECT_STOCK_CATEGORY_SUCCESS = \"SELECT_STOCK_CATEGORY_SUCCESS\";\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_LIST_REQUEST:\r\n        break;\r\n      case LOAD_LIST_SUCCESS:\r\n        draft.stocks = action.data.stocks;\r\n        draft.originalStocks = action.data.stocks;\r\n        break;\r\n      case LOAD_LIST_FAILURE:\r\n        break;\r\n\r\n      case PLUS_QUANTITY_SUCCESS:\r\n        {\r\n          const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n          let quantity = product.quantity;\r\n          const stock = product.stock;\r\n          quantity = quantity < stock ? (quantity += 1) : product.quantity;\r\n          product.quantity = quantity;\r\n        }\r\n        break;\r\n\r\n      case MINUS_QUANTITY_SUCCESS:\r\n        {\r\n          const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n          let quantity = product.quantity;\r\n          quantity = quantity > 1 ? (quantity -= 1) : 1;\r\n          product.quantity = quantity;\r\n        }\r\n        break;\r\n\r\n      case INITIATE_STOCK_QUANTITY_SUCCESS:\r\n        {\r\n          const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n          product.quantity = 1;\r\n        }\r\n        break;\r\n\r\n      case SEARCH_STOCK_PRODUCT_SUCCESS:\r\n        {\r\n          const products = draft.originalStocks.filter((stock) =>\r\n            stock.Product.title.includes(action.data.text),\r\n          );\r\n          draft.stocks = products;\r\n        }\r\n        break;\r\n\r\n      case SELECT_STOCK_CATEGORY_SUCCESS:\r\n        {\r\n          const products = draft.originalStocks.filter(\r\n            (stock) => stock.Category.id === action.data.id,\r\n          );\r\n          draft.stocks = products;\r\n        }\r\n        break;\r\n\r\n      case ADD_STOCK_SUCCESS: {\r\n        // console.log(action.data);\r\n        console.log(action.data.id);\r\n        const product = draft.originalStocks.find((stock) => stock.id === action.data.id);\r\n        console.log(product);\r\n        if (product) {\r\n          product.quantity = action.data.quantity;\r\n        }\r\n        draft.stocks = [...state.stocks, action.data];\r\n        draft.originalStocks = [...state.originalStocks, action.data];\r\n        break;\r\n      }\r\n\r\n      case ADD_STOCK_FAILURE: {\r\n        draft.addStockError = action.error;\r\n      }\r\n\r\n      default:\r\n        state;\r\n        break;\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}