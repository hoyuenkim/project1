{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport StockList from \"../../../components/Generalui/StockList\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { PAGE_CHANGE_SUCCESS } from \"../../../reducers/admin\";\nimport { ADD_STOCK_SUCCESS, LOAD_LIST_REQUEST, SOLD_STOCK_FAILURE, SOLD_STOCK_SUCCESS, UPDATE_STOCK_SUCCESS } from \"../../../reducers/stock\";\nimport { io } from \"socket.io-client\";\nimport { message } from \"antd\";\nimport { SOLD_CART_SUCCESS } from \"../../../reducers/cart\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar Store = function Store() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useState = useState(null),\n      IMP = _useState[0],\n      setIMP = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.stock;\n  }),\n      errorMesssage = _useSelector.errorMesssage;\n\n  useEffect(function () {\n    dispatch({\n      type: PAGE_CHANGE_SUCCESS,\n      data: \"store\"\n    });\n  });\n  useEffect(function () {\n    if (errorMesssage) {\n      message.error(errorMesssage);\n    }\n  }, [errorMesssage]);\n  useEffect(function () {\n    var _window = window,\n        IMP = _window.IMP;\n    setIMP(IMP);\n    dispatch({\n      type: LOAD_LIST_REQUEST,\n      data: {\n        ShopId: query.ShopId\n      }\n    });\n  }, []);\n  useEffect(function () {\n    var socket = io(process.env.BACKEND_IP, {\n      cors: {\n        origin: true\n      }\n    });\n    socket.on(\"connection\", function (data) {\n      return console.log(data);\n    });\n    socket.emit(\"client:id\", {\n      id: query.ShopId\n    });\n    socket.on(\"server:id\", function (data) {\n      console.log(\"server:id\");\n      return console.log(data);\n    });\n    socket.on(\"server:add\", function (data) {\n      console.log(data);\n      return dispatch({\n        type: ADD_STOCK_SUCCESS,\n        data: data\n      });\n    });\n    socket.on(\"server:sold\", function (data) {\n      return dispatch({\n        type: SOLD_STOCK_SUCCESS,\n        data: data\n      });\n    });\n    socket.on(\"server:sold:error\", function (data) {\n      return dispatch({\n        type: SOLD_STOCK_FAILURE,\n        data: data\n      });\n    });\n    socket.on(\"server:update\", function (data) {\n      return dispatch({\n        type: UPDATE_STOCK_SUCCESS,\n        data: data\n      });\n    });\n  });\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(StockList, {})\n  });\n};\n\n_s(Store, \"y6nHS8dQ6UBG1spQLENdS4ERjik=\", false, function () {\n  return [useDispatch, useRouter, useSelector];\n});\n\n_c = Store;\nexport default Store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/Dev/project1/frontend/pages/store/[ShopId]/index.js"],"names":["StockList","useState","useEffect","useDispatch","useSelector","useRouter","PAGE_CHANGE_SUCCESS","ADD_STOCK_SUCCESS","LOAD_LIST_REQUEST","SOLD_STOCK_FAILURE","SOLD_STOCK_SUCCESS","UPDATE_STOCK_SUCCESS","io","message","SOLD_CART_SUCCESS","Store","dispatch","query","IMP","setIMP","state","stock","errorMesssage","type","data","error","window","ShopId","socket","process","env","BACKEND_IP","cors","origin","on","console","log","emit","id"],"mappings":"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","sourcesContent":["import StockList from \"../../../components/Generalui/StockList\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport { PAGE_CHANGE_SUCCESS } from \"../../../reducers/admin\";\r\nimport {\r\n  ADD_STOCK_SUCCESS,\r\n  LOAD_LIST_REQUEST,\r\n  SOLD_STOCK_FAILURE,\r\n  SOLD_STOCK_SUCCESS,\r\n  UPDATE_STOCK_SUCCESS,\r\n} from \"../../../reducers/stock\";\r\nimport { io } from \"socket.io-client\";\r\nimport { message } from \"antd\";\r\nimport { SOLD_CART_SUCCESS } from \"../../../reducers/cart\";\r\n\r\nconst Store = () => {\r\n  const dispatch = useDispatch();\r\n  const { query } = useRouter();\r\n  const [IMP, setIMP] = useState(null);\r\n\r\n  const { errorMesssage } = useSelector((state) => state.stock);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: PAGE_CHANGE_SUCCESS, data: \"store\" });\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (errorMesssage) {\r\n      message.error(errorMesssage);\r\n    }\r\n  }, [errorMesssage]);\r\n\r\n  useEffect(() => {\r\n    const { IMP } = window;\r\n    setIMP(IMP);\r\n    dispatch({\r\n      type: LOAD_LIST_REQUEST,\r\n      data: { ShopId: query.ShopId },\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const socket = io(process.env.BACKEND_IP, {\r\n      cors: { origin: true },\r\n    });\r\n\r\n    socket.on(\"connection\", (data) => {\r\n      return console.log(data);\r\n    });\r\n\r\n    socket.emit(\"client:id\", { id: query.ShopId });\r\n\r\n    socket.on(\"server:id\", (data) => {\r\n      console.log(\"server:id\");\r\n      return console.log(data);\r\n    });\r\n\r\n    socket.on(\"server:add\", (data) => {\r\n      console.log(data);\r\n      return dispatch({\r\n        type: ADD_STOCK_SUCCESS,\r\n        data,\r\n      });\r\n    });\r\n    socket.on(\"server:sold\", (data) => {\r\n      return dispatch({ type: SOLD_STOCK_SUCCESS, data });\r\n    });\r\n\r\n    socket.on(\"server:sold:error\", (data) => {\r\n      return dispatch({ type: SOLD_STOCK_FAILURE, data });\r\n    });\r\n\r\n    socket.on(\"server:update\", (data) => {\r\n      return dispatch({ type: UPDATE_STOCK_SUCCESS, data });\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <StockList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Store;\r\n"]},"metadata":{},"sourceType":"module"}