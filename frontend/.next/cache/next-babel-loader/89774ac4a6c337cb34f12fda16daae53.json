{"ast":null,"code":"import { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button, Card } from 'antd';\nimport { useInput } from '../Generalui/CustomHooks';\nimport { useCallback } from 'react';\nimport axios from 'axios';\nimport { PASSWORD_CHANGE_REQUEST } from '../../reducers/user';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst ChangePassword = ({\n  setToggleChangePassword\n}) => {\n  const dispatch = useDispatch();\n  const [presentPassword, onChangePresentPassword, setPresentPassword] = useInput();\n  const [password, onChangePassword, setPassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck, setChangePasswordCheck] = useInput();\n  const {\n    session,\n    isLoggedIn\n  } = useSelector(state => state.user);\n  const onFinish = useCallback(() => {\n    dispatch({\n      type: PASSWORD_CHANGE_REQUEST,\n      data: {\n        id: session.id,\n        password\n      }\n    });\n    setToggleChangePassword(prev => !prev);\n    setPresentPassword(null);\n    setPassword(null);\n    setChangePasswordCheck(null);\n  }, [password, passwordCheck]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Card, {\n      style: {\n        verticalAlign: 'middle'\n      },\n      children: /*#__PURE__*/_jsxs(Form, {\n        onFinish: onFinish,\n        children: [/*#__PURE__*/_jsx(Form.Item, {\n          name: \"presentPassword\",\n          validateTrigger: \"onBlur\",\n          rules: [{\n            required: true,\n            message: '기존 비밀번호를 입력해주세요'\n          }, () => ({\n            async validator(rule, value) {\n              const regex = new RegExp(/^[A-Za-z0-9]{6,12}$/);\n\n              if (value && value.match(regex)) {\n                const result = await axios.post('/user/confirm/password', {\n                  id: session.id,\n                  password: value\n                });\n\n                if (!result.data) {\n                  // console.log(result);\n                  return Promise.reject('기존 비밀번호가 일치하지 않습니다.');\n                } else {\n                  return Promise.resolve();\n                }\n              } else {\n                return Promise.reject('형식에 맞지 않는 비밀번호입니다');\n              }\n            }\n\n          })],\n          children: /*#__PURE__*/_jsx(Input.Password, {\n            size: `large`,\n            prefix: `* 기존 패스워드`,\n            value: presentPassword,\n            onChange: onChangePresentPassword,\n            placeholder: \"\\uAE30\\uC874 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n          })\n        }), /*#__PURE__*/_jsx(Form.Item, {\n          name: \"password\",\n          rules: [{\n            required: true,\n            message: '비밀번호를 확인해주세요'\n          }, {\n            pattern: /^[A-Za-z0-9]{6,12}$/,\n            message: '비밀번호가 형식에 맞지 않습니다'\n          }],\n          children: /*#__PURE__*/_jsx(Input.Password, {\n            prefix: `* 비밀번호`,\n            size: `large`,\n            value: password,\n            onChange: onChangePassword,\n            placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n          })\n        }), /*#__PURE__*/_jsx(Form.Item, {\n          name: \"passwordCheck\",\n          dependencies: ['password'],\n          rules: [{\n            required: true,\n            message: '비밀번호를 확인해 주세요'\n          }, ({\n            getFieldValue\n          }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject('비밀번호가 일치하지 않습니다.');\n            }\n\n          })],\n          children: /*#__PURE__*/_jsx(Input.Password, {\n            prefix: `* 비밀번호 확인`,\n            size: `large`,\n            value: passwordCheck,\n            onChange: onChangePasswordCheck,\n            placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n          })\n        }), /*#__PURE__*/_jsx(Button, {\n          type: 'primary',\n          htmlType: 'submit',\n          style: {\n            width: '100%'\n          },\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"\n        })]\n      })\n    })\n  });\n};\n\nexport default ChangePassword;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/components/Forms/ChangePassword.js"],"names":["useDispatch","useSelector","Form","Input","Button","Card","useInput","useCallback","axios","PASSWORD_CHANGE_REQUEST","ChangePassword","setToggleChangePassword","dispatch","presentPassword","onChangePresentPassword","setPresentPassword","password","onChangePassword","setPassword","passwordCheck","onChangePasswordCheck","setChangePasswordCheck","session","isLoggedIn","state","user","onFinish","type","data","id","prev","verticalAlign","required","message","validator","rule","value","regex","RegExp","match","result","post","Promise","reject","resolve","pattern","getFieldValue","width"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,IAA9B,QAA0C,MAA1C;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,QAAwC,qBAAxC;;;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiC;AACtD,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM,CAACa,eAAD,EAAkBC,uBAAlB,EAA2CC,kBAA3C,IAAiET,QAAQ,EAA/E;AACA,QAAM,CAACU,QAAD,EAAWC,gBAAX,EAA6BC,WAA7B,IAA4CZ,QAAQ,EAA1D;AACA,QAAM,CAACa,aAAD,EAAgBC,qBAAhB,EAAuCC,sBAAvC,IAAiEf,QAAQ,EAA/E;AAEA,QAAM;AAAEgB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA0BtB,WAAW,CAAEuB,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA3C;AAEA,QAAMC,QAAQ,GAAGnB,WAAW,CAAC,MAAM;AACjCK,IAAAA,QAAQ,CAAC;AACPe,MAAAA,IAAI,EAAElB,uBADC;AAEPmB,MAAAA,IAAI,EAAE;AACJC,QAAAA,EAAE,EAAEP,OAAO,CAACO,EADR;AAEJb,QAAAA;AAFI;AAFC,KAAD,CAAR;AAOAL,IAAAA,uBAAuB,CAAEmB,IAAD,IAAU,CAACA,IAAZ,CAAvB;AACAf,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAG,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAG,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,GAZ2B,EAYzB,CAACL,QAAD,EAAWG,aAAX,CAZyB,CAA5B;AAcA,sBACE;AAAA,2BACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEY,QAAAA,aAAa,EAAE;AAAjB,OAAb;AAAA,6BACE,MAAC,IAAD;AAAM,QAAA,QAAQ,EAAEL,QAAhB;AAAA,gCACE,KAAC,IAAD,CAAM,IAAN;AACE,UAAA,IAAI,EAAC,iBADP;AAEE,UAAA,eAAe,EAAC,QAFlB;AAGE,UAAA,KAAK,EAAE,CACL;AACEM,YAAAA,QAAQ,EAAE,IADZ;AAEEC,YAAAA,OAAO,EAAE;AAFX,WADK,EAKL,OAAO;AACL,kBAAMC,SAAN,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC3B,oBAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAW,qBAAX,CAAd;;AACA,kBAAIF,KAAK,IAAIA,KAAK,CAACG,KAAN,CAAYF,KAAZ,CAAb,EAAiC;AAC/B,sBAAMG,MAAM,GAAG,MAAMhC,KAAK,CAACiC,IAAN,CAAW,wBAAX,EAAqC;AACxDZ,kBAAAA,EAAE,EAAEP,OAAO,CAACO,EAD4C;AAExDb,kBAAAA,QAAQ,EAAEoB;AAF8C,iBAArC,CAArB;;AAIA,oBAAI,CAACI,MAAM,CAACZ,IAAZ,EAAkB;AAChB;AACA,yBAAOc,OAAO,CAACC,MAAR,CAAe,qBAAf,CAAP;AACD,iBAHD,MAGO;AACL,yBAAOD,OAAO,CAACE,OAAR,EAAP;AACD;AACF,eAXD,MAWO;AACL,uBAAOF,OAAO,CAACC,MAAR,CAAe,mBAAf,CAAP;AACD;AACF;;AAjBI,WAAP,CALK,CAHT;AAAA,iCA6BE,KAAC,KAAD,CAAO,QAAP;AACE,YAAA,IAAI,EAAG,OADT;AAEE,YAAA,MAAM,EAAG,WAFX;AAGE,YAAA,KAAK,EAAE9B,eAHT;AAIE,YAAA,QAAQ,EAAEC,uBAJZ;AAKE,YAAA,WAAW,EAAC;AALd;AA7BF,UADF,eAsCE,KAAC,IAAD,CAAM,IAAN;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,KAAK,EAAE,CACL;AACEkB,YAAAA,QAAQ,EAAE,IADZ;AAEEC,YAAAA,OAAO,EAAE;AAFX,WADK,EAKL;AACEY,YAAAA,OAAO,EAAE,qBADX;AAEEZ,YAAAA,OAAO,EAAE;AAFX,WALK,CAFT;AAAA,iCAaE,KAAC,KAAD,CAAO,QAAP;AACE,YAAA,MAAM,EAAG,QADX;AAEE,YAAA,IAAI,EAAG,OAFT;AAGE,YAAA,KAAK,EAAEjB,QAHT;AAIE,YAAA,QAAQ,EAAEC,gBAJZ;AAKE,YAAA,WAAW,EAAC;AALd;AAbF,UAtCF,eA2DE,KAAC,IAAD,CAAM,IAAN;AACE,UAAA,IAAI,EAAC,eADP;AAEE,UAAA,YAAY,EAAE,CAAC,UAAD,CAFhB;AAGE,UAAA,KAAK,EAAE,CACL;AACEe,YAAAA,QAAQ,EAAE,IADZ;AAEEC,YAAAA,OAAO,EAAE;AAFX,WADK,EAKL,CAAC;AAAEa,YAAAA;AAAF,WAAD,MAAwB;AACtBZ,YAAAA,SAAS,CAACC,IAAD,EAAOC,KAAP,EAAc;AACrB,kBAAI,CAACA,KAAD,IAAUU,aAAa,CAAC,UAAD,CAAb,KAA8BV,KAA5C,EAAmD;AACjD,uBAAOM,OAAO,CAACE,OAAR,EAAP;AACD;;AACD,qBAAOF,OAAO,CAACC,MAAR,CAAe,kBAAf,CAAP;AACD;;AANqB,WAAxB,CALK,CAHT;AAAA,iCAkBE,KAAC,KAAD,CAAO,QAAP;AACE,YAAA,MAAM,EAAG,WADX;AAEE,YAAA,IAAI,EAAG,OAFT;AAGE,YAAA,KAAK,EAAExB,aAHT;AAIE,YAAA,QAAQ,EAAEC,qBAJZ;AAKE,YAAA,WAAW,EAAC;AALd;AAlBF,UA3DF,eAqFE,KAAC,MAAD;AAAQ,UAAA,IAAI,EAAE,SAAd;AAAyB,UAAA,QAAQ,EAAE,QAAnC;AAA6C,UAAA,KAAK,EAAE;AAAE2B,YAAAA,KAAK,EAAE;AAAT,WAApD;AAAA;AAAA,UArFF;AAAA;AADF;AADF,IADF;AA+FD,CArHD;;AAuHA,eAAerC,cAAf","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button, Card } from 'antd';\nimport { useInput } from '../Generalui/CustomHooks';\nimport { useCallback } from 'react';\nimport axios from 'axios';\nimport { PASSWORD_CHANGE_REQUEST } from '../../reducers/user';\n\nconst ChangePassword = ({ setToggleChangePassword }) => {\n  const dispatch = useDispatch();\n  const [presentPassword, onChangePresentPassword, setPresentPassword] = useInput();\n  const [password, onChangePassword, setPassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck, setChangePasswordCheck] = useInput();\n\n  const { session, isLoggedIn } = useSelector((state) => state.user);\n\n  const onFinish = useCallback(() => {\n    dispatch({\n      type: PASSWORD_CHANGE_REQUEST,\n      data: {\n        id: session.id,\n        password,\n      },\n    });\n    setToggleChangePassword((prev) => !prev);\n    setPresentPassword(null);\n    setPassword(null);\n    setChangePasswordCheck(null);\n  }, [password, passwordCheck]);\n\n  return (\n    <>\n      <Card style={{ verticalAlign: 'middle' }}>\n        <Form onFinish={onFinish}>\n          <Form.Item\n            name=\"presentPassword\"\n            validateTrigger=\"onBlur\"\n            rules={[\n              {\n                required: true,\n                message: '기존 비밀번호를 입력해주세요',\n              },\n              () => ({\n                async validator(rule, value) {\n                  const regex = new RegExp(/^[A-Za-z0-9]{6,12}$/);\n                  if (value && value.match(regex)) {\n                    const result = await axios.post('/user/confirm/password', {\n                      id: session.id,\n                      password: value,\n                    });\n                    if (!result.data) {\n                      // console.log(result);\n                      return Promise.reject('기존 비밀번호가 일치하지 않습니다.');\n                    } else {\n                      return Promise.resolve();\n                    }\n                  } else {\n                    return Promise.reject('형식에 맞지 않는 비밀번호입니다');\n                  }\n                },\n              }),\n            ]}\n          >\n            <Input.Password\n              size={`large`}\n              prefix={`* 기존 패스워드`}\n              value={presentPassword}\n              onChange={onChangePresentPassword}\n              placeholder=\"기존 비밀번호를 입력해주세요\"\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: '비밀번호를 확인해주세요',\n              },\n              {\n                pattern: /^[A-Za-z0-9]{6,12}$/,\n                message: '비밀번호가 형식에 맞지 않습니다',\n              },\n            ]}\n          >\n            <Input.Password\n              prefix={`* 비밀번호`}\n              size={`large`}\n              value={password}\n              onChange={onChangePassword}\n              placeholder=\"비밀번호를 입력해주세요\"\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"passwordCheck\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: '비밀번호를 확인해 주세요',\n              },\n              ({ getFieldValue }) => ({\n                validator(rule, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject('비밀번호가 일치하지 않습니다.');\n                },\n              }),\n            ]}\n          >\n            <Input.Password\n              prefix={`* 비밀번호 확인`}\n              size={`large`}\n              value={passwordCheck}\n              onChange={onChangePasswordCheck}\n              placeholder=\"다시 비밀번호를 입력해주세요\"\n            />\n          </Form.Item>\n          <Button type={'primary'} htmlType={'submit'} style={{ width: '100%' }}>\n            비밀번호 변경\n          </Button>\n        </Form>\n      </Card>\n    </>\n  );\n};\n\nexport default ChangePassword;\n"]},"metadata":{},"sourceType":"module"}