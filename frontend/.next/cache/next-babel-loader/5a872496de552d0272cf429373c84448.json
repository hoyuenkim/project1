{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Button, Form, Input, Descriptions, Checkbox, Card, Space, Switch } from \"antd\";\nimport { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useInput } from \"../../components/Generalui/CustomHooks\";\nimport { SIGN_UP_REQUEST, BIZCODE_CONFIRM_REQUEST, EMAIL_CONFIRM_REQUEST } from \"../../reducers/user\";\nimport { withRouter } from \"next/router\";\nimport DaumPostcode from \"react-daum-postcode\";\n\nconst Signup = () => {\n  const [email, onChangeEmail] = useInput();\n  const [password, onChangePassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck] = useInput();\n  const [name, onChangeName] = useInput();\n  const {\n    0: bizcode,\n    1: setBizcode\n  } = useState();\n  const {\n    0: address,\n    1: setAddress\n  } = useState();\n  const [addressDetails, onChangeAddressDetail] = useInput();\n  const {\n    0: termToggle,\n    1: setTermToggle\n  } = useState(false);\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false);\n  const {\n    0: divisionToggle,\n    1: setDivisionToggle\n  } = useState(false);\n  const {\n    0: addressToggle,\n    1: setAddressToggle\n  } = useState(false);\n  const {\n    0: formHeight,\n    1: setFormHeight\n  } = useState(\"100vh\");\n  const dispatch = useDispatch();\n  const {\n    bizcodeConfirm,\n    emailConfirm\n  } = useSelector(state => state.user);\n\n  const onClickTermToggle = () => {\n    return setTermToggle(!termToggle);\n  };\n\n  const handleComplete = data => {\n    let fullAddress = data.address;\n    let extraAddress = \"\";\n\n    if (data.addressType === \"R\") {\n      if (data.bname !== \"\") {\n        extraAddress += data.bname;\n      }\n\n      if (data.buildingName !== \"\") {\n        extraAddress += extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\n      }\n\n      fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\n    }\n\n    console.log(fullAddress); // e.g. '서울 성동구 왕십리로2길 20 (성수동1가)'\n\n    setAddress(fullAddress);\n    setAddressToggle(false);\n  };\n\n  const onSubmitForm = useCallback(e => {\n    if (passwordError) {\n      return setPasswordError(true);\n    } else {\n      if (!termToggle) {\n        termError(true);\n        return false;\n      }\n\n      if (divisionToggle) {\n        dispatch({\n          type: SIGN_UP_REQUEST,\n          data: {\n            username: email,\n            password,\n            bizcode,\n            address,\n            addressDetail\n          }\n        });\n      }\n    }\n  }, [email, password, passwordCheck]);\n\n  const onChangeDivisionToggle = () => {\n    setFormHeight(formHeight ? undefined : \"100vh\");\n    setDivisionToggle(!divisionToggle);\n  };\n\n  const onChangeBizcode = e => {\n    setBizcode(e.target.value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    title: __jsx(Space, {\n      direction: \"horizental\",\n      align: `baseline`,\n      size: `large`\n    }, divisionToggle ? __jsx(\"h1\", null, \"\\uAC00\\uB9F9\\uC810\") : __jsx(\"h1\", null, \"\\uC77C\\uBC18\\uD68C\\uC6D0\"), __jsx(Switch, {\n      onClick: onChangeDivisionToggle,\n      checkedChildren: `가맹점`,\n      unCheckedChildren: `일반회원`,\n      size: \"middle\"\n    }))\n  }, __jsx(Form, {\n    onFinish: onSubmitForm,\n    encType: \"multipart/form-data\"\n  }, __jsx(Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: \"100%\",\n      height: formHeight\n    }\n  }, !termToggle && __jsx(Descriptions, {\n    bordered: true,\n    column: 24,\n    layout: `vertical`,\n    size: `large`\n  }, __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uAC1C\\uC778(\\uC2E0\\uC6A9)\\uC815\\uBCF4\\uC218\\uC9D1/\\uC774\\uC6A9\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uACE0\\uC720\\uC2DD\\uBCC4\\uC815\\uBCF4\\uC758 \\uCC98\\uB9AC\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uD1B5\\uC2E0\\uC0AC \\uC774\\uC6A9\\uC57D\\uAD00\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uC11C\\uBE44\\uC2A4 \\uC774\\uC6A9\\uC57D\\uAD00\")), __jsx(\"div\", {\n    style: {\n      textAlign: \"right\"\n    }\n  }, __jsx(Checkbox, {\n    onChange: onClickTermToggle\n  }, \"\\uC804\\uCCB4\\uB3D9\\uC758\")), __jsx(\"div\", null, __jsx(Form.Item, {\n    name: \"email\",\n    validateTrigger: \"onBlur\",\n    rules: [{\n      required: true,\n      message: \"이메일를 입력해 주세요!\"\n    }, () => ({\n      validator(rule, value) {\n        const regex = new RegExp(/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i);\n        const config = value.match(regex);\n\n        if (config) {\n          dispatch({\n            type: EMAIL_CONFIRM_REQUEST,\n            email: value\n          });\n        } else {\n          return Promise.reject(\"형식에 맞지 않는 이메일입니다\");\n        }\n      }\n\n    })]\n  }, __jsx(Input, {\n    size: `large`,\n    prefix: `* Email`,\n    value: email,\n    onChange: onChangeEmail,\n    placeholder: \"Email\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: \"비밀번호를 확인해주세요\"\n    }, {\n      pattern: /^[A-Za-z0-9]{6,12}$/,\n      message: \"비밀번호가 형식에 맞지 않습니다\"\n    }]\n  }, __jsx(Input.Password, {\n    prefix: `* 비밀번호`,\n    size: `large`,\n    value: password,\n    onChange: onChangePassword,\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"passwordCheck\",\n    dependencies: [\"password\"],\n    rules: [{\n      required: true,\n      message: \"비밀번호를 확인해 주세요\"\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue(\"password\") === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\n      }\n\n    })]\n  }, __jsx(Input.Password, {\n    prefix: `* 비밀번호 확인`,\n    size: `large`,\n    value: passwordCheck,\n    onChange: onChangePasswordCheck,\n    placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: \"이름을 입력해주세요\"\n    }]\n  }, __jsx(Input, {\n    prefix: divisionToggle ? \"* 가게명\" : \"* 이름\",\n    size: `large`,\n    onChange: onChangeName,\n    value: name\n  })), divisionToggle && __jsx(React.Fragment, null, __jsx(Form.Item, {\n    name: \"bizcode\",\n    validateTrigger: \"onBlur\",\n    rules: [{\n      required: true,\n      message: \"사업자 등록번호를 입력해주세요\"\n    }, () => ({\n      validator(rule, value) {\n        if (!value.match(/\\d{1}/g) || !value.length === 10) {\n          return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\n        } else {\n          function checkBizID(bizID) {\n            var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);\n            var tmpBizID,\n                i,\n                chkSum = 0,\n                c2,\n                remander;\n            bizID = bizID.replace(/-/gi, \"\");\n\n            for (i = 0; i <= 7; i++) chkSum += checkID[i] * bizID.charAt(i);\n\n            c2 = \"0\" + checkID[8] * bizID.charAt(8);\n            c2 = c2.substring(c2.length - 2, c2.length);\n            chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));\n            remander = (10 - chkSum % 10) % 10;\n            if (Math.floor(bizID.charAt(9)) == remander) return true;\n            return false;\n          }\n\n          if (checkBizID(value)) {\n            dispatch({\n              type: BIZCODE_CONFIRM_REQUEST,\n              bizcode: value\n            });\n          } else {\n            return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\n          }\n        }\n      }\n\n    })]\n  }, __jsx(Input, {\n    prefix: \"* 사업자등록번호\",\n    size: `large`,\n    name: \"bizcode\",\n    value: bizcode,\n    onChange: onChangeBizcode\n  })), addressToggle ? __jsx(Card, null, __jsx(DaumPostcode, {\n    onComplete: handleComplete,\n    autoClose: true,\n    height: \"10\"\n  })) : __jsx(Form.Item, {\n    name: \"address\",\n    initialValue: address,\n    rules: [{\n      required: true,\n      message: \"주소를 입력해주세요\"\n    }]\n  }, __jsx(Input, {\n    prefix: \"* \\uC8FC\\uC18C\",\n    name: \"address\",\n    readOnly: true,\n    onClick: () => setAddressToggle(true),\n    size: \"large\"\n  })), __jsx(Form.Item, null, __jsx(Input, {\n    prefix: \"* \\uC0C1\\uC138\\uC8FC\\uC18C\",\n    name: \"addressDetail\",\n    onChange: onChangeAddressDetail,\n    size: \"large\"\n  })))), __jsx(Button, {\n    htmlType: \"submit\",\n    type: \"primary\",\n    style: {\n      width: \"100%\"\n    }\n  }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")))));\n};\n\nexport default withRouter(Signup);","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/pages/user/signup.js"],"names":["Button","Form","Input","Descriptions","Checkbox","Card","Space","Switch","useState","useCallback","useDispatch","useSelector","useInput","SIGN_UP_REQUEST","BIZCODE_CONFIRM_REQUEST","EMAIL_CONFIRM_REQUEST","withRouter","DaumPostcode","Signup","email","onChangeEmail","password","onChangePassword","passwordCheck","onChangePasswordCheck","name","onChangeName","bizcode","setBizcode","address","setAddress","addressDetails","onChangeAddressDetail","termToggle","setTermToggle","termError","setTermError","divisionToggle","setDivisionToggle","addressToggle","setAddressToggle","formHeight","setFormHeight","dispatch","bizcodeConfirm","emailConfirm","state","user","onClickTermToggle","handleComplete","data","fullAddress","extraAddress","addressType","bname","buildingName","console","log","onSubmitForm","e","passwordError","setPasswordError","type","username","addressDetail","onChangeDivisionToggle","undefined","onChangeBizcode","target","value","width","height","textAlign","required","message","validator","rule","regex","RegExp","config","match","Promise","reject","pattern","getFieldValue","resolve","length","checkBizID","bizID","checkID","Array","tmpBizID","i","chkSum","c2","remander","replace","charAt","substring","Math","floor"],"mappings":"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","sourcesContent":["import { Button, Form, Input, Descriptions, Checkbox, Card, Space, Switch } from \"antd\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useInput } from \"../../components/Generalui/CustomHooks\";\r\nimport {\r\n  SIGN_UP_REQUEST,\r\n  BIZCODE_CONFIRM_REQUEST,\r\n  EMAIL_CONFIRM_REQUEST,\r\n} from \"../../reducers/user\";\r\nimport { withRouter } from \"next/router\";\r\nimport DaumPostcode from \"react-daum-postcode\";\r\n\r\nconst Signup = () => {\r\n  const [email, onChangeEmail] = useInput();\r\n  const [password, onChangePassword] = useInput();\r\n  const [passwordCheck, onChangePasswordCheck] = useInput();\r\n  const [name, onChangeName] = useInput();\r\n  const [bizcode, setBizcode] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [addressDetails, onChangeAddressDetail] = useInput();\r\n  const [termToggle, setTermToggle] = useState(false);\r\n  const [termError, setTermError] = useState(false);\r\n  const [divisionToggle, setDivisionToggle] = useState(false);\r\n  const [addressToggle, setAddressToggle] = useState(false);\r\n  const [formHeight, setFormHeight] = useState(\"100vh\");\r\n  const dispatch = useDispatch();\r\n\r\n  const { bizcodeConfirm, emailConfirm } = useSelector((state) => state.user);\r\n\r\n  const onClickTermToggle = () => {\r\n    return setTermToggle(!termToggle);\r\n  };\r\n\r\n  const handleComplete = (data) => {\r\n    let fullAddress = data.address;\r\n    let extraAddress = \"\";\r\n\r\n    if (data.addressType === \"R\") {\r\n      if (data.bname !== \"\") {\r\n        extraAddress += data.bname;\r\n      }\r\n      if (data.buildingName !== \"\") {\r\n        extraAddress += extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n      }\r\n      fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n    }\r\n\r\n    console.log(fullAddress); // e.g. '서울 성동구 왕십리로2길 20 (성수동1가)'\r\n    setAddress(fullAddress);\r\n    setAddressToggle(false);\r\n  };\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      if (passwordError) {\r\n        return setPasswordError(true);\r\n      } else {\r\n        if (!termToggle) {\r\n          termError(true);\r\n          return false;\r\n        }\r\n        if (divisionToggle) {\r\n          dispatch({\r\n            type: SIGN_UP_REQUEST,\r\n            data: {\r\n              username: email,\r\n              password,\r\n              bizcode,\r\n              address,\r\n              addressDetail,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    },\r\n    [email, password, passwordCheck]\r\n  );\r\n\r\n  const onChangeDivisionToggle = () => {\r\n    setFormHeight(formHeight ? undefined : \"100vh\");\r\n    setDivisionToggle(!divisionToggle);\r\n  };\r\n\r\n  const onChangeBizcode = (e) => {\r\n    setBizcode(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title={\r\n          <Space direction=\"horizental\" align={`baseline`} size={`large`}>\r\n            {divisionToggle ? <h1>가맹점</h1> : <h1>일반회원</h1>}\r\n            <Switch\r\n              onClick={onChangeDivisionToggle}\r\n              checkedChildren={`가맹점`}\r\n              unCheckedChildren={`일반회원`}\r\n              size={\"middle\"}\r\n            />\r\n          </Space>\r\n        }\r\n      >\r\n        <Form onFinish={onSubmitForm} encType={\"multipart/form-data\"}>\r\n          <Space direction=\"vertical\" size={\"large\"} style={{ width: \"100%\", height: formHeight }}>\r\n            {!termToggle && (\r\n              <Descriptions bordered column={24} layout={`vertical`} size={`large`}>\r\n                <Descriptions.Item label=\"필수\">개인(신용)정보수집/이용</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">고유식별정보의 처리</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">통신사 이용약관</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">서비스 이용약관</Descriptions.Item>\r\n              </Descriptions>\r\n            )}\r\n            <div style={{ textAlign: \"right\" }}>\r\n              <Checkbox onChange={onClickTermToggle}>전체동의</Checkbox>\r\n            </div>\r\n            <div>\r\n              <Form.Item\r\n                name=\"email\"\r\n                validateTrigger=\"onBlur\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"이메일를 입력해 주세요!\",\r\n                  },\r\n                  () => ({\r\n                    validator(rule, value) {\r\n                      const regex = new RegExp(\r\n                        /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i\r\n                      );\r\n                      const config = value.match(regex);\r\n                      if (config) {\r\n                        dispatch({ type: EMAIL_CONFIRM_REQUEST, email: value });\r\n                      } else {\r\n                        return Promise.reject(\"형식에 맞지 않는 이메일입니다\");\r\n                      }\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input\r\n                  size={`large`}\r\n                  prefix={`* Email`}\r\n                  value={email}\r\n                  onChange={onChangeEmail}\r\n                  placeholder=\"Email을 입력해주세요\"\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"비밀번호를 확인해주세요\",\r\n                  },\r\n                  {\r\n                    pattern: /^[A-Za-z0-9]{6,12}$/,\r\n                    message: \"비밀번호가 형식에 맞지 않습니다\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={`* 비밀번호`}\r\n                  size={`large`}\r\n                  value={password}\r\n                  onChange={onChangePassword}\r\n                  placeholder=\"비밀번호를 입력해주세요\"\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"passwordCheck\"\r\n                dependencies={[\"password\"]}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"비밀번호를 확인해 주세요\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={`* 비밀번호 확인`}\r\n                  size={`large`}\r\n                  value={passwordCheck}\r\n                  onChange={onChangePasswordCheck}\r\n                  placeholder=\"다시 비밀번호를 입력해주세요\"\r\n                />\r\n              </Form.Item>\r\n              <Form.Item name=\"name\" rules={[{ required: true, message: \"이름을 입력해주세요\" }]}>\r\n                <Input\r\n                  prefix={divisionToggle ? \"* 가게명\" : \"* 이름\"}\r\n                  size={`large`}\r\n                  onChange={onChangeName}\r\n                  value={name}\r\n                />\r\n              </Form.Item>\r\n              {divisionToggle && (\r\n                <>\r\n                  <Form.Item\r\n                    name=\"bizcode\"\r\n                    validateTrigger=\"onBlur\"\r\n                    rules={[\r\n                      { required: true, message: \"사업자 등록번호를 입력해주세요\" },\r\n                      () => ({\r\n                        validator(rule, value) {\r\n                          if (!value.match(/\\d{1}/g) || !value.length === 10) {\r\n                            return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\r\n                          } else {\r\n                            function checkBizID(bizID) {\r\n                              var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);\r\n                              var tmpBizID,\r\n                                i,\r\n                                chkSum = 0,\r\n                                c2,\r\n                                remander;\r\n                              bizID = bizID.replace(/-/gi, \"\");\r\n\r\n                              for (i = 0; i <= 7; i++) chkSum += checkID[i] * bizID.charAt(i);\r\n                              c2 = \"0\" + checkID[8] * bizID.charAt(8);\r\n                              c2 = c2.substring(c2.length - 2, c2.length);\r\n                              chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));\r\n                              remander = (10 - (chkSum % 10)) % 10;\r\n\r\n                              if (Math.floor(bizID.charAt(9)) == remander) return true;\r\n                              return false;\r\n                            }\r\n                            if (checkBizID(value)) {\r\n                              dispatch({\r\n                                type: BIZCODE_CONFIRM_REQUEST,\r\n                                bizcode: value,\r\n                              });\r\n                            } else {\r\n                              return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\r\n                            }\r\n                          }\r\n                        },\r\n                      }),\r\n                    ]}\r\n                  >\r\n                    <Input\r\n                      prefix={\"* 사업자등록번호\"}\r\n                      size={`large`}\r\n                      name={\"bizcode\"}\r\n                      value={bizcode}\r\n                      onChange={onChangeBizcode}\r\n                    />\r\n                  </Form.Item>\r\n                  {addressToggle ? (\r\n                    <Card>\r\n                      <DaumPostcode onComplete={handleComplete} autoClose={true} height={\"10\"} />\r\n                    </Card>\r\n                  ) : (\r\n                    <Form.Item\r\n                      name=\"address\"\r\n                      initialValue={address}\r\n                      rules={[{ required: true, message: \"주소를 입력해주세요\" }]}\r\n                    >\r\n                      <Input\r\n                        prefix=\"* 주소\"\r\n                        name={\"address\"}\r\n                        readOnly\r\n                        onClick={() => setAddressToggle(true)}\r\n                        size={\"large\"}\r\n                      />\r\n                    </Form.Item>\r\n                  )}\r\n                  <Form.Item>\r\n                    <Input\r\n                      prefix=\"* 상세주소\"\r\n                      name={\"addressDetail\"}\r\n                      onChange={onChangeAddressDetail}\r\n                      size={\"large\"}\r\n                    />\r\n                  </Form.Item>\r\n                </>\r\n              )}\r\n            </div>\r\n            <Button htmlType={\"submit\"} type={\"primary\"} style={{ width: \"100%\" }}>\r\n              회원가입\r\n            </Button>\r\n          </Space>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Signup);\r\n"]},"metadata":{},"sourceType":"module"}