{"ast":null,"code":"import produce from \"immer\";\nvar initialState = {\n  lists: [],\n  originalLists: []\n};\nexport var LOAD_LIST_REQUEST = \"LOAD_LIST_REQUEST\";\nexport var LOAD_LIST_SUCCESS = \"LOAD_LIST_SUCCESS\";\nexport var LOAD_LIST_FAILURE = \"LOAD_LIST_FAILURE\";\nexport var PLUS_QUANTITY_SUCCESS = \"PLUS_QUANTITY_SUCCESS\";\nexport var MINUS_QUANTITY_SUCCESS = \"MINUS_QUANTITY_SUCCESS\";\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_LIST_REQUEST:\n        break;\n\n      case LOAD_LIST_SUCCESS:\n        draft.lists = action.data.products;\n        draft.originalLists = action.data.products;\n        break;\n\n      case LOAD_LIST_FAILURE:\n        break;\n\n      case PLUS_QUANTITY_SUCCESS:\n        var product = draft.lists.find(function (list) {\n          return list.id === action.data.id;\n        });\n        var quantity = product.quantity;\n        var stock = product.stock;\n        quantity = quantity < stock ? quantity += 1 : product.quantity;\n        product.quantity = quantity;\n        break;\n\n      case MINUS_QUANTITY_SUCCESS:\n        quantity = quantity > 1 ? quantity -= 1 : 1;\n        product.quantity = quantity;\n        break;\n\n      default:\n        state;\n        break;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/reducers/stock.js"],"names":["produce","initialState","lists","originalLists","LOAD_LIST_REQUEST","LOAD_LIST_SUCCESS","LOAD_LIST_FAILURE","PLUS_QUANTITY_SUCCESS","MINUS_QUANTITY_SUCCESS","state","action","draft","type","data","products","product","find","list","id","quantity","stock"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB;AAKA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AAEP,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;AAC/C,SAAOV,OAAO,CAACS,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC/B,YAAQD,MAAM,CAACE,IAAf;AACE,WAAKR,iBAAL;AACE;;AACF,WAAKC,iBAAL;AACEM,QAAAA,KAAK,CAACT,KAAN,GAAcQ,MAAM,CAACG,IAAP,CAAYC,QAA1B;AACAH,QAAAA,KAAK,CAACR,aAAN,GAAsBO,MAAM,CAACG,IAAP,CAAYC,QAAlC;AACA;;AACF,WAAKR,iBAAL;AACE;;AAEF,WAAKC,qBAAL;AACE,YAAMQ,OAAO,GAAGJ,KAAK,CAACT,KAAN,CAAYc,IAAZ,CAAiB,UAACC,IAAD;AAAA,iBAAUA,IAAI,CAACC,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAAlC;AAAA,SAAjB,CAAhB;AACA,YAAIC,QAAQ,GAAGJ,OAAO,CAACI,QAAvB;AACA,YAAMC,KAAK,GAAGL,OAAO,CAACK,KAAtB;AACAD,QAAAA,QAAQ,GAAGA,QAAQ,GAAGC,KAAX,GAAoBD,QAAQ,IAAI,CAAhC,GAAqCJ,OAAO,CAACI,QAAxD;AACAJ,QAAAA,OAAO,CAACI,QAAR,GAAmBA,QAAnB;AACA;;AAEF,WAAKX,sBAAL;AACEW,QAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAX,GAAgBA,QAAQ,IAAI,CAA5B,GAAiC,CAA5C;AACAJ,QAAAA,OAAO,CAACI,QAAR,GAAmBA,QAAnB;AACA;;AAEF;AACEV,QAAAA,KAAK;AACL;AAzBJ;AA2BD,GA5Ba,CAAd;AA6BD,CA9BD","sourcesContent":["import produce from \"immer\";\r\n\r\nconst initialState = {\r\n  lists: [],\r\n  originalLists: [],\r\n};\r\n\r\nexport const LOAD_LIST_REQUEST = \"LOAD_LIST_REQUEST\";\r\nexport const LOAD_LIST_SUCCESS = \"LOAD_LIST_SUCCESS\";\r\nexport const LOAD_LIST_FAILURE = \"LOAD_LIST_FAILURE\";\r\n\r\nexport const PLUS_QUANTITY_SUCCESS = \"PLUS_QUANTITY_SUCCESS\";\r\n\r\nexport const MINUS_QUANTITY_SUCCESS = \"MINUS_QUANTITY_SUCCESS\";\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_LIST_REQUEST:\r\n        break;\r\n      case LOAD_LIST_SUCCESS:\r\n        draft.lists = action.data.products;\r\n        draft.originalLists = action.data.products;\r\n        break;\r\n      case LOAD_LIST_FAILURE:\r\n        break;\r\n\r\n      case PLUS_QUANTITY_SUCCESS:\r\n        const product = draft.lists.find((list) => list.id === action.data.id);\r\n        let quantity = product.quantity;\r\n        const stock = product.stock;\r\n        quantity = quantity < stock ? (quantity += 1) : product.quantity;\r\n        product.quantity = quantity;\r\n        break;\r\n\r\n      case MINUS_QUANTITY_SUCCESS:\r\n        quantity = quantity > 1 ? (quantity -= 1) : 1;\r\n        product.quantity = quantity;\r\n        break;\r\n\r\n      default:\r\n        state;\r\n        break;\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}