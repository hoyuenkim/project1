{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport producer from \"immer\";\nconst initialState = {\n  cart: [],\n  isLoadingCart: false,\n  isRemoveingCart: false,\n  ShopId: undefined,\n  TableId: undefined\n};\nexport const LOAD_CART_REQUEST = \"LOAD_CART_REQUEST\";\nexport const LOAD_CART_SUCCESS = \"LOAD_CART_SUCCESS\";\nexport const LOAD_CART_FAILURE = \"LOAD_CART_FAILURE\";\nexport const REMOVE_ITEM_REQUEST = \"REMOVE_ITEM_REQUEST\";\nexport const REMOVE_ITEM_SUCCESS = \"REMOVE_ITEM_SUCCESS\";\nexport const REMOVE_ITEM_FAILURE = \"REMOVE_ITEM_FAILURE\";\nexport const ADD_ITEM_QUANTITY_REQUEST = \"ADD_ITEM_QUANTITY_REQUEST\";\nexport const SUBSTRACT_ITEM_QUANTITY_REQUEST = \"SUBSTRACT_ITEM_QUANTITY_REQUEST\";\nexport const ADD_CART_ITEM_REQUEST = \"ADD_CART_ITEM_REQUEST\";\nexport const REMOVE_CART_ITEM_REQUEST = \"REMOVE_CART_ITEM_REQUEST\";\nexport const CLEAR_CART_REQUEST = \"CLEAR_CART_REQUEST\";\nexport const GET_SHOP_TABLE_ID = \"GET_SHOP_TABLE_ID\";\nexport const SOLD_CART_SUCCESS = \"SOLD_CART_SUCCESS\";\nexport default ((state = initialState, action) => {\n  return producer(state, draft => {\n    switch (action.type) {\n      case LOAD_CART_REQUEST:\n        break;\n\n      case LOAD_CART_SUCCESS:\n        draft.cart = [action.data];\n        break;\n\n      case LOAD_CART_FAILURE:\n        break;\n\n      case REMOVE_ITEM_REQUEST:\n        const items = draft.cart.filter(item => item.id !== action.id);\n        draft.cart = items;\n        break;\n\n      case ADD_CART_ITEM_REQUEST:\n        {\n          const product = draft.cart.find(v => v.id === action.product.id);\n\n          if (product) {\n            return product.quantity = product.quantity + action.product.quantity;\n          }\n\n          draft.cart.push(action.product);\n        }\n        break;\n\n      case ADD_ITEM_QUANTITY_REQUEST:\n        {\n          const product = draft.cart.find(stock => stock.id === action.data.id);\n          let quantity = product.quantity;\n          const stock = product.stock;\n          quantity = quantity < stock ? quantity += 1 : product.quantity;\n          product.quantity = quantity;\n        }\n        break;\n\n      case SUBSTRACT_ITEM_QUANTITY_REQUEST:\n        {\n          const product = draft.cart.find(stock => stock.id === action.data.id);\n          let quantity = product.quantity;\n          quantity = quantity > 1 ? quantity -= 1 : 1;\n          product.quantity = quantity;\n        }\n        break;\n\n      case CLEAR_CART_REQUEST:\n        draft.cart = [];\n        break;\n\n      case GET_SHOP_TABLE_ID:\n        draft.ShopId = action.data.ShopId;\n        draft.TableId = action.data.TableId;\n        break;\n\n      case SOLD_CART_SUCCESS:\n        {\n          const cart = state.cart;\n          const products = action.data;\n          const result = cart.map(item => {\n            const product = products.find(v => v.id === item.id);\n            const quantity = item.quantity - product.quantity;\n            return _objectSpread(_objectSpread({}, item), {}, {\n              quantity\n            });\n          });\n          draft.cart = [state.cart, ...result];\n        }\n        break;\n\n      default:\n        state;\n        break;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/Dev/project1/frontend/reducers/cart.js"],"names":["producer","initialState","cart","isLoadingCart","isRemoveingCart","ShopId","undefined","TableId","LOAD_CART_REQUEST","LOAD_CART_SUCCESS","LOAD_CART_FAILURE","REMOVE_ITEM_REQUEST","REMOVE_ITEM_SUCCESS","REMOVE_ITEM_FAILURE","ADD_ITEM_QUANTITY_REQUEST","SUBSTRACT_ITEM_QUANTITY_REQUEST","ADD_CART_ITEM_REQUEST","REMOVE_CART_ITEM_REQUEST","CLEAR_CART_REQUEST","GET_SHOP_TABLE_ID","SOLD_CART_SUCCESS","state","action","draft","type","data","items","filter","item","id","product","find","v","quantity","push","stock","products","result","map"],"mappings":"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","sourcesContent":["import producer from \"immer\";\n\nconst initialState = {\n  cart: [],\n  isLoadingCart: false,\n  isRemoveingCart: false,\n  ShopId: undefined,\n  TableId: undefined,\n};\n\nexport const LOAD_CART_REQUEST = \"LOAD_CART_REQUEST\";\nexport const LOAD_CART_SUCCESS = \"LOAD_CART_SUCCESS\";\nexport const LOAD_CART_FAILURE = \"LOAD_CART_FAILURE\";\n\nexport const REMOVE_ITEM_REQUEST = \"REMOVE_ITEM_REQUEST\";\nexport const REMOVE_ITEM_SUCCESS = \"REMOVE_ITEM_SUCCESS\";\nexport const REMOVE_ITEM_FAILURE = \"REMOVE_ITEM_FAILURE\";\n\nexport const ADD_ITEM_QUANTITY_REQUEST = \"ADD_ITEM_QUANTITY_REQUEST\";\nexport const SUBSTRACT_ITEM_QUANTITY_REQUEST = \"SUBSTRACT_ITEM_QUANTITY_REQUEST\";\n\nexport const ADD_CART_ITEM_REQUEST = \"ADD_CART_ITEM_REQUEST\";\nexport const REMOVE_CART_ITEM_REQUEST = \"REMOVE_CART_ITEM_REQUEST\";\n\nexport const CLEAR_CART_REQUEST = \"CLEAR_CART_REQUEST\";\n\nexport const GET_SHOP_TABLE_ID = \"GET_SHOP_TABLE_ID\";\n\nexport const SOLD_CART_SUCCESS = \"SOLD_CART_SUCCESS\";\n\nexport default (state = initialState, action) => {\n  return producer(state, (draft) => {\n    switch (action.type) {\n      case LOAD_CART_REQUEST:\n        break;\n      case LOAD_CART_SUCCESS:\n        draft.cart = [action.data];\n        break;\n      case LOAD_CART_FAILURE:\n        break;\n\n      case REMOVE_ITEM_REQUEST:\n        const items = draft.cart.filter((item) => item.id !== action.id);\n        draft.cart = items;\n        break;\n      case ADD_CART_ITEM_REQUEST:\n        {\n          const product = draft.cart.find((v) => v.id === action.product.id);\n          if (product) {\n            return (product.quantity = product.quantity + action.product.quantity);\n          }\n          draft.cart.push(action.product);\n        }\n        break;\n      case ADD_ITEM_QUANTITY_REQUEST:\n        {\n          const product = draft.cart.find((stock) => stock.id === action.data.id);\n          let quantity = product.quantity;\n          const stock = product.stock;\n          quantity = quantity < stock ? (quantity += 1) : product.quantity;\n          product.quantity = quantity;\n        }\n        break;\n      case SUBSTRACT_ITEM_QUANTITY_REQUEST:\n        {\n          const product = draft.cart.find((stock) => stock.id === action.data.id);\n          let quantity = product.quantity;\n          quantity = quantity > 1 ? (quantity -= 1) : 1;\n          product.quantity = quantity;\n        }\n        break;\n      case CLEAR_CART_REQUEST:\n        draft.cart = [];\n        break;\n      case GET_SHOP_TABLE_ID:\n        draft.ShopId = action.data.ShopId;\n        draft.TableId = action.data.TableId;\n        break;\n      case SOLD_CART_SUCCESS:\n        {\n          const cart = state.cart;\n          const products = action.data;\n          const result = cart.map((item) => {\n            const product = products.find((v) => v.id === item.id);\n            const quantity = item.quantity - product.quantity;\n            return { ...item, quantity };\n          });\n          draft.cart = [state.cart, ...result];\n        }\n        break;\n      default:\n        state;\n        break;\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}