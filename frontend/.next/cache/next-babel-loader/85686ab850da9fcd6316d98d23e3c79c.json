{"ast":null,"code":"import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, BIZCODE_CONFIRM_FAILURE, BIZCODE_CONFIRM_SUCCESS, BIZCODE_CONFIRM_REQUEST, EMAIL_CONFIRM_REQUEST, EMAIL_CONFIRM_SUCCESS, EMAIL_CONFIRM_FAILURE, PASSWORD_CHANGE_REQUEST, PASSWORD_CHANGE_SUCCESS, PASSWORD_CHANGE_FAILURE } from '../reducers/user';\n\nfunction loginApi(loginData) {\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginApi, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('Try logging in');\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpApi(signUpData) {\n  return axios.post('/user/signup', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpApi, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction loadUserApi() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    console.log('load user request');\n    const result = yield call(loadUserApi);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction bizcodeConfirmApi(bizcode) {\n  return axios.post('/user/confirm/bizcode', {\n    bizcode\n  });\n}\n\nfunction* bizcodeConfirm(action) {\n  try {\n    const result = yield call(bizcodeConfirmApi, action.bizcode);\n    yield put({\n      type: BIZCODE_CONFIRM_SUCCESS,\n      data: result.dlogata\n    });\n  } catch (e) {\n    yield put({\n      type: BIZCODE_CONFIRM_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchBizcodeConfirm() {\n  yield takeLatest(BIZCODE_CONFIRM_REQUEST, bizcodeConfirm);\n}\n\nfunction emailConfirmApi(email) {\n  return axios.post('/user/confirm/email', {\n    email\n  });\n}\n\nfunction* emailConfirm(action) {\n  try {\n    const result = yield call(emailConfirmApi, action.email);\n    yield put({\n      type: EMAIL_CONFIRM_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: EMAIL_CONFIRM_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchEmailConfirm() {\n  yield takeLatest(EMAIL_CONFIRM_REQUEST, emailConfirm);\n}\n\nfunction changePasswordApi(password) {\n  return axios.post('/user/passwordChange', {\n    password\n  });\n}\n\nfunction* passwordChange(action) {\n  try {\n    const result = yield call(emailConfirmApi, action.password);\n    yield put({\n      type: PASSWORD_CHANGE_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: PASSWORD_CHANGE_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchPasswordChange() {\n  yield takeLatest(PASSWORD_CHANGE_REQUEST);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLoadUser), fork(watchSignUp), fork(watchBizcodeConfirm), fork(watchEmailConfirm), fork(watchPasswordChange)]);\n}","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/sagas/user.js"],"names":["fork","takeEvery","all","put","call","takeLatest","axios","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","BIZCODE_CONFIRM_FAILURE","BIZCODE_CONFIRM_SUCCESS","BIZCODE_CONFIRM_REQUEST","EMAIL_CONFIRM_REQUEST","EMAIL_CONFIRM_SUCCESS","EMAIL_CONFIRM_FAILURE","PASSWORD_CHANGE_REQUEST","PASSWORD_CHANGE_SUCCESS","PASSWORD_CHANGE_FAILURE","loginApi","loginData","post","withCredentials","login","action","result","data","type","e","console","log","error","watchLogin","signUpApi","signUpData","signUp","watchSignUp","loadUserApi","get","loadUser","watchLoadUser","bizcodeConfirmApi","bizcode","bizcodeConfirm","dlogata","watchBizcodeConfirm","emailConfirmApi","email","emailConfirm","watchEmailConfirm","changePasswordApi","password","passwordChange","watchPasswordChange","userSaga"],"mappings":"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","sourcesContent":["import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILURE,\r\n  LOAD_USER_REQUEST,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  BIZCODE_CONFIRM_FAILURE,\r\n  BIZCODE_CONFIRM_SUCCESS,\r\n  BIZCODE_CONFIRM_REQUEST,\r\n  EMAIL_CONFIRM_REQUEST,\r\n  EMAIL_CONFIRM_SUCCESS,\r\n  EMAIL_CONFIRM_FAILURE,\r\n  PASSWORD_CHANGE_REQUEST,\r\n  PASSWORD_CHANGE_SUCCESS,\r\n  PASSWORD_CHANGE_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction loginApi(loginData) {\r\n  return axios.post('/user/login', loginData, { withCredentials: true });\r\n}\r\n\r\nfunction* login(action) {\r\n  try {\r\n    const result = yield call(loginApi, action.data);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  console.log('Try logging in');\r\n  yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction signUpApi(signUpData) {\r\n  return axios.post('/user/signup', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpApi, action.data);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction loadUserApi() {\r\n  // 서버에 요청을 보내는 부분\r\n\r\n  return axios.get('/user', { withCredentials: true });\r\n}\r\n\r\nfunction* loadUser() {\r\n  try {\r\n    console.log('load user request');\r\n    const result = yield call(loadUserApi);\r\n    yield put({\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction bizcodeConfirmApi(bizcode) {\r\n  return axios.post('/user/confirm/bizcode', { bizcode });\r\n}\r\n\r\nfunction* bizcodeConfirm(action) {\r\n  try {\r\n    const result = yield call(bizcodeConfirmApi, action.bizcode);\r\n    yield put({\r\n      type: BIZCODE_CONFIRM_SUCCESS,\r\n      data: result.dlogata,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: BIZCODE_CONFIRM_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchBizcodeConfirm() {\r\n  yield takeLatest(BIZCODE_CONFIRM_REQUEST, bizcodeConfirm);\r\n}\r\n\r\nfunction emailConfirmApi(email) {\r\n  return axios.post('/user/confirm/email', { email });\r\n}\r\n\r\nfunction* emailConfirm(action) {\r\n  try {\r\n    const result = yield call(emailConfirmApi, action.email);\r\n    yield put({\r\n      type: EMAIL_CONFIRM_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: EMAIL_CONFIRM_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchEmailConfirm() {\r\n  yield takeLatest(EMAIL_CONFIRM_REQUEST, emailConfirm);\r\n}\r\n\r\nfunction changePasswordApi(password) {\r\n  return axios.post('/user/passwordChange', { password });\r\n}\r\n\r\nfunction* passwordChange(action) {\r\n  try {\r\n    const result = yield call(emailConfirmApi, action.password);\r\n    yield put({\r\n      type: PASSWORD_CHANGE_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: PASSWORD_CHANGE_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchPasswordChange() {\r\n  yield takeLatest(PASSWORD_CHANGE_REQUEST)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLoadUser),\r\n    fork(watchSignUp),\r\n    fork(watchBizcodeConfirm),\r\n    fork(watchEmailConfirm),\r\n    fork(watchPasswordChange),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}