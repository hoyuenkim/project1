{"ast":null,"code":"var _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport Cropper from \"react-easy-crop\";\nimport { useState, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Button } from \"antd\";\n\nvar ImageInput = function ImageInput() {\n  _s();\n\n  // const { imagePath } = useSelector((state) => state.product);\n  var _useState = useState({\n    x: 0,\n    y: 0\n  }),\n      crop = _useState[0],\n      setCrop = _useState[1];\n\n  var _useState2 = useState(1),\n      zoom = _useState2[0],\n      setZoom = _useState2[1];\n\n  var _useState3 = useState(null),\n      croppedAreaPixels = _useState3[0],\n      setCroppedAreaPixels = _useState3[1];\n\n  var _useState4 = useState(null),\n      croppedImage = _useState4[0],\n      setCroppedImage = _useState4[1];\n\n  var onCropComplete = useCallback(function (croppedArea, croppedAreaPixels) {\n    console.log(croppedArea, croppedAreaPixels);\n  }, []);\n\n  var _useState5 = useState(null),\n      upImg = _useState5[0],\n      setUpImg = _useState5[1];\n\n  return __jsx(React.Fragment, null, !upImage && __jsx(Dropzone, {\n    onDrop: function onDrop(imgFile) {\n      var reader = new FileReader();\n      console.log(imgFile[0]);\n      reader.readAsDataURL(imgFile[0]);\n\n      reader.onload = function (e) {\n        console.log(e.target);\n        setUpImg(e.target.result);\n      };\n    }\n  }, function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps;\n    return __jsx(\"section\", null, __jsx(\"div\", getRootProps(), __jsx(\"input\", getInputProps()), __jsx(\"p\", null, \"Drag 'n' drop some files here, or click to select files\")));\n  }), upImg && __jsx(React.Fragment, null, __jsx(Cropper, {\n    image: upImg,\n    crop: crop,\n    zoom: zoom,\n    aspect: 4 / 3,\n    onCropChange: setCrop,\n    onZoomChange: setZoom,\n    onMediaLoaded: function onMediaLoaded() {\n      setZoom(1);\n    },\n    onCropcomplete: onCropComplete\n  }), __jsx(Button, null, \"test\")));\n};\n\n_s(ImageInput, \"Ii3ndzmC4FgsOMH6VssQm/Wxh2Y=\");\n\n_c = ImageInput;\nexport default ImageInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageInput\");","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/components/Generalui/ImageInput.js"],"names":["React","Dropzone","Cropper","useState","useCallback","useSelector","Button","ImageInput","x","y","crop","setCrop","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","croppedImage","setCroppedImage","onCropComplete","croppedArea","console","log","upImg","setUpImg","upImage","imgFile","reader","FileReader","readAsDataURL","onload","e","target","result","getRootProps","getInputProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,MAAvB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AACvB;AADuB,kBAGCJ,QAAQ,CAAC;AAAEK,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAD,CAHT;AAAA,MAGhBC,IAHgB;AAAA,MAGVC,OAHU;;AAAA,mBAICR,QAAQ,CAAC,CAAD,CAJT;AAAA,MAIhBS,IAJgB;AAAA,MAIVC,OAJU;;AAAA,mBAK2BV,QAAQ,CAAC,IAAD,CALnC;AAAA,MAKhBW,iBALgB;AAAA,MAKGC,oBALH;;AAAA,mBAMiBZ,QAAQ,CAAC,IAAD,CANzB;AAAA,MAMhBa,YANgB;AAAA,MAMFC,eANE;;AAQvB,MAAMC,cAAc,GAAGd,WAAW,CAAC,UAACe,WAAD,EAAcL,iBAAd,EAAoC;AACrEM,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ,EAAyBL,iBAAzB;AACD,GAFiC,EAE/B,EAF+B,CAAlC;;AARuB,mBAYGX,QAAQ,CAAC,IAAD,CAZX;AAAA,MAYhBmB,KAZgB;AAAA,MAYTC,QAZS;;AAcvB,SACE,4BACG,CAACC,OAAD,IACC,MAAC,QAAD;AACE,IAAA,MAAM,EAAE,gBAACC,OAAD,EAAa;AACnB,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYI,OAAO,CAAC,CAAD,CAAnB;AACAC,MAAAA,MAAM,CAACE,aAAP,CAAqBH,OAAO,CAAC,CAAD,CAA5B;;AACAC,MAAAA,MAAM,CAACG,MAAP,GAAgB,UAACC,CAAD,EAAO;AACrBV,QAAAA,OAAO,CAACC,GAAR,CAAYS,CAAC,CAACC,MAAd;AACAR,QAAAA,QAAQ,CAACO,CAAC,CAACC,MAAF,CAASC,MAAV,CAAR;AACD,OAHD;AAID;AATH,KAWG;AAAA,QAAGC,YAAH,QAAGA,YAAH;AAAA,QAAiBC,aAAjB,QAAiBA,aAAjB;AAAA,WACC,uBACE,aAASD,YAAY,EAArB,EACE,eAAWC,aAAa,EAAxB,CADF,EAEE,2EAFF,CADF,CADD;AAAA,GAXH,CAFJ,EAuBGZ,KAAK,IACJ,4BACE,MAAC,OAAD;AACE,IAAA,KAAK,EAAEA,KADT;AAEE,IAAA,IAAI,EAAEZ,IAFR;AAGE,IAAA,IAAI,EAAEE,IAHR;AAIE,IAAA,MAAM,EAAE,IAAI,CAJd;AAKE,IAAA,YAAY,EAAED,OALhB;AAME,IAAA,YAAY,EAAEE,OANhB;AAOE,IAAA,aAAa,EAAE,yBAAM;AACnBA,MAAAA,OAAO,CAAC,CAAD,CAAP;AACD,KATH;AAUE,IAAA,cAAc,EAAEK;AAVlB,IADF,EAaE,MAAC,MAAD,eAbF,CAxBJ,CADF;AA2CD,CAzDD;;GAAMX,U;;KAAAA,U;AA2DN,eAAeA,UAAf","sourcesContent":["import React from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button } from \"antd\";\r\n\r\nconst ImageInput = () => {\r\n  // const { imagePath } = useSelector((state) => state.product);\r\n\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [zoom, setZoom] = useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    console.log(croppedArea, croppedAreaPixels);\r\n  }, []);\r\n\r\n  const [upImg, setUpImg] = useState(null);\r\n\r\n  return (\r\n    <>\r\n      {!upImage && (\r\n        <Dropzone\r\n          onDrop={(imgFile) => {\r\n            const reader = new FileReader();\r\n            console.log(imgFile[0]);\r\n            reader.readAsDataURL(imgFile[0]);\r\n            reader.onload = (e) => {\r\n              console.log(e.target);\r\n              setUpImg(e.target.result);\r\n            };\r\n          }}\r\n        >\r\n          {({ getRootProps, getInputProps }) => (\r\n            <section>\r\n              <div {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                <p>Drag 'n' drop some files here, or click to select files</p>\r\n              </div>\r\n            </section>\r\n          )}\r\n        </Dropzone>\r\n      )}\r\n      {upImg && (\r\n        <>\r\n          <Cropper\r\n            image={upImg}\r\n            crop={crop}\r\n            zoom={zoom}\r\n            aspect={4 / 3}\r\n            onCropChange={setCrop}\r\n            onZoomChange={setZoom}\r\n            onMediaLoaded={() => {\r\n              setZoom(1);\r\n            }}\r\n            onCropcomplete={onCropComplete}\r\n          />\r\n          <Button>test</Button>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImageInput;\r\n"]},"metadata":{},"sourceType":"module"}