{"ast":null,"code":"import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_PAYMENT_HISTORY_FAILURE, LOAD_PAYMENT_HISTORY_REQUEST, LOAD_PAYMENT_HISTORY_SUCCESS, RATING_FAILURE, RATING_SUCCESS, RATING_REQUEST, SEARCH_HISTORY_SUCCESS, SEARCH_HISTORY_FAILURE, SEARCH_HISTORY_REQUEST } from '../reducers/payment';\n\nfunction paymentHistoryAPI(data) {\n  return axios.post('/payments/load', {\n    id: data.id,\n    ShopId: data.ShopId\n  });\n}\n\nfunction* paymentHistory(data) {\n  try {\n    const result = yield call(paymentHistoryAPI, data);\n    yield put({\n      type: LOAD_PAYMENT_HISTORY_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_PAYMENT_HISTORY_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchPaymentHistory() {\n  yield takeLatest(LOAD_PAYMENT_HISTORY_REQUEST, paymentHistory);\n}\n\nfunction ratingAPI({\n  data\n}) {\n  return axios.post('/payments/rating', {\n    PaymentsId: data.PaymentsId,\n    UserId: data.UserId,\n    ProductId: data.ProductId,\n    rate: data.rate\n  });\n}\n\nfunction* rating(data) {\n  try {\n    const result = yield call(ratingAPI, data);\n    yield put({\n      type: RATING_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: RATING_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRating() {\n  yield takeLatest(RATING_REQUEST, rating);\n}\n\nfunction searchHistoryAPI({\n  data\n}) {\n  console.log(data);\n\n  if (data.divison === true) {\n    return axios.post('/payments/search/shop', {\n      data\n    });\n  } else {\n    return axios.post('/payments/search/user', {\n      data\n    });\n  }\n}\n\nfunction* searchHistory(data) {\n  try {\n    const result = yield call(searchHistoryAPI, data);\n    yield put({\n      type: SEARCH_HISTORY_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: SEARCH_HISTORY_FAILURE\n    });\n  }\n}\n\nfunction* watchSearchHistory() {\n  yield takeLatest(SEARCH_HISTORY_REQUEST, searchHistory);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchPaymentHistory), fork(watchRating), fork(watchSearchHistory)]);\n}","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/sagas/payment.js"],"names":["fork","takeEvery","all","put","call","takeLatest","axios","LOAD_PAYMENT_HISTORY_FAILURE","LOAD_PAYMENT_HISTORY_REQUEST","LOAD_PAYMENT_HISTORY_SUCCESS","RATING_FAILURE","RATING_SUCCESS","RATING_REQUEST","SEARCH_HISTORY_SUCCESS","SEARCH_HISTORY_FAILURE","SEARCH_HISTORY_REQUEST","paymentHistoryAPI","data","post","id","ShopId","paymentHistory","result","type","e","error","watchPaymentHistory","ratingAPI","PaymentsId","UserId","ProductId","rate","rating","console","log","watchRating","searchHistoryAPI","divison","searchHistory","watchSearchHistory","userSaga"],"mappings":"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","sourcesContent":["import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  LOAD_PAYMENT_HISTORY_FAILURE,\r\n  LOAD_PAYMENT_HISTORY_REQUEST,\r\n  LOAD_PAYMENT_HISTORY_SUCCESS,\r\n  RATING_FAILURE,\r\n  RATING_SUCCESS,\r\n  RATING_REQUEST,\r\n  SEARCH_HISTORY_SUCCESS,\r\n  SEARCH_HISTORY_FAILURE,\r\n  SEARCH_HISTORY_REQUEST,\r\n} from '../reducers/payment';\r\n\r\nfunction paymentHistoryAPI(data) {\r\n  return axios.post('/payments/load', { id: data.id, ShopId: data.ShopId,  });\r\n}\r\n\r\nfunction* paymentHistory(data) {\r\n  try {\r\n    const result = yield call(paymentHistoryAPI, data);\r\n    yield put({\r\n      type: LOAD_PAYMENT_HISTORY_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({ type: LOAD_PAYMENT_HISTORY_FAILURE, error: e });\r\n  }\r\n}\r\n\r\nfunction* watchPaymentHistory() {\r\n  yield takeLatest(LOAD_PAYMENT_HISTORY_REQUEST, paymentHistory);\r\n}\r\n\r\nfunction ratingAPI({ data }) {\r\n  return axios.post('/payments/rating', {\r\n    PaymentsId: data.PaymentsId,\r\n    UserId: data.UserId,\r\n    ProductId: data.ProductId,\r\n    rate: data.rate,\r\n  });\r\n}\r\n\r\nfunction* rating(data) {\r\n  try {\r\n    const result = yield call(ratingAPI, data);\r\n    yield put({ type: RATING_SUCCESS, data: result.data });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({ type: RATING_FAILURE, error: e });\r\n  }\r\n}\r\n\r\nfunction* watchRating() {\r\n  yield takeLatest(RATING_REQUEST, rating);\r\n}\r\n\r\nfunction searchHistoryAPI({ data }) {\r\n  console.log(data);\r\n  if (data.divison === true) {\r\n    return axios.post('/payments/search/shop', { data });\r\n  } else {\r\n    return axios.post('/payments/search/user', { data });\r\n  }\r\n}\r\n\r\nfunction* searchHistory(data) {\r\n  try {\r\n    const result = yield call(searchHistoryAPI, data);\r\n    yield put({ type: SEARCH_HISTORY_SUCCESS, data: result.data });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({ type: SEARCH_HISTORY_FAILURE });\r\n  }\r\n}\r\n\r\nfunction* watchSearchHistory() {\r\n  yield takeLatest(SEARCH_HISTORY_REQUEST, searchHistory);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchPaymentHistory), fork(watchRating), fork(watchSearchHistory)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}