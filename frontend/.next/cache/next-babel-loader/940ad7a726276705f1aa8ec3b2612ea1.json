{"ast":null,"code":"import { createStore, compose, applyMiddleware } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../sagas\";\nimport rootReducer from \"../reducers\";\n\nconst {\n  persistStore\n} = require(\"redux-persist\");\n\nimport storage from \"redux-persist/lib/storage/session\";\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhencer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n\n  const rootStore = reducer => createStore(reducer, {}, enhencer);\n\n  const isServer = true;\n\n  if (isServer) {\n    const store = rootStore(rootReducer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n  } else {\n    const {\n      persistReducer\n    } = require(\"redux-persist\");\n\n    const persistConfig = {\n      key: \"nextjs\",\n      whitelist: [\"user\"],\n      storage,\n      transforms: []\n    };\n    console.log(`store: ${store}`);\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = rootStore(persistedReducer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    store.__persistor = persistStore(store);\n    return store;\n  }\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/store/configureStore.js"],"names":["createStore","compose","applyMiddleware","createWrapper","composeWithDevTools","createSagaMiddleware","rootSaga","rootReducer","persistStore","require","storage","configureStore","sagaMiddleware","middlewares","enhencer","rootStore","reducer","isServer","store","sagaTask","run","persistReducer","persistConfig","key","whitelist","transforms","console","log","persistedReducer","__persistor","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAmBC,OAAO,CAAC,eAAD,CAAhC;;AACA,OAAOC,OAAP,MAAoB,mCAApB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AAEA,QAAMQ,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GACZ,QACIb,OAAO,CAACC,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CADX,GAEIT,mBAAmB,CAACF,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CAHzB;;AAIA,QAAME,SAAS,GAAIC,OAAD,IAAahB,WAAW,CAACgB,OAAD,EAAU,EAAV,EAAcF,QAAd,CAA1C;;AAEA,QAAMG,QAAQ,OAAd;;AACA,MAAIA,QAAJ,EAAc;AACZ,UAAMC,KAAK,GAAGH,SAAS,CAACR,WAAD,CAAvB;AACAW,IAAAA,KAAK,CAACC,QAAN,GAAiBP,cAAc,CAACQ,GAAf,CAAmBd,QAAnB,CAAjB;AACA,WAAOY,KAAP;AACD,GAJD,MAIO;AACL,UAAM;AAAEG,MAAAA;AAAF,QAAqBZ,OAAO,CAAC,eAAD,CAAlC;;AAEA,UAAMa,aAAa,GAAG;AACpBC,MAAAA,GAAG,EAAE,QADe;AAEpBC,MAAAA,SAAS,EAAE,CAAC,MAAD,CAFS;AAGpBd,MAAAA,OAHoB;AAIpBe,MAAAA,UAAU,EAAE;AAJQ,KAAtB;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAa,UAAST,KAAM,EAA5B;AACA,UAAMU,gBAAgB,GAAGP,cAAc,CAACC,aAAD,EAAgBf,WAAhB,CAAvC;AACA,UAAMW,KAAK,GAAGH,SAAS,CAACa,gBAAD,CAAvB;AACAV,IAAAA,KAAK,CAACC,QAAN,GAAiBP,cAAc,CAACQ,GAAf,CAAmBd,QAAnB,CAAjB;AACAY,IAAAA,KAAK,CAACW,WAAN,GAAoBrB,YAAY,CAACU,KAAD,CAAhC;AACA,WAAOA,KAAP;AACD;AACF,CA/BD;;AAiCA,MAAMY,OAAO,GAAG3B,aAAa,CAACQ,cAAD,EAAiB;AAAEoB,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { createStore, compose, applyMiddleware } from \"redux\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"../sagas\";\nimport rootReducer from \"../reducers\";\nconst { persistStore } = require(\"redux-persist\");\nimport storage from \"redux-persist/lib/storage/session\";\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const middlewares = [sagaMiddleware];\n  const enhencer =\n    process.env.NODE_ENV === \"production\"\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares));\n  const rootStore = (reducer) => createStore(reducer, {}, enhencer);\n\n  const isServer = typeof window === \"undefined\";\n  if (isServer) {\n    const store = rootStore(rootReducer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n  } else {\n    const { persistReducer } = require(\"redux-persist\");\n\n    const persistConfig = {\n      key: \"nextjs\",\n      whitelist: [\"user\"],\n      storage,\n      transforms: [],\n    };\n    console.log(`store: ${store}`);\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = rootStore(persistedReducer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    store.__persistor = persistStore(store);\n    return store;\n  }\n};\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV !== \"production\" });\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}