{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Button, Form, Input, Descriptions, Checkbox, Card, Space, Switch } from \"antd\";\nimport { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useInput } from \"../../components/Generalui/CustomHooks\";\nimport { SIGN_UP_REQUEST, BIZCODE_CONFIRM_REQUEST } from \"../../reducers/user\";\nimport Router, { withRouter } from \"next/router\";\n\nvar Signup = function Signup() {\n  _s();\n\n  var _useInput = useInput(),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      email = _useInput2[0],\n      onChangeEmail = _useInput2[1];\n\n  var _useInput3 = useInput(),\n      _useInput4 = _slicedToArray(_useInput3, 2),\n      password = _useInput4[0],\n      onChangePassword = _useInput4[1];\n\n  var _useInput5 = useInput(),\n      _useInput6 = _slicedToArray(_useInput5, 2),\n      passwordCheck = _useInput6[0],\n      onChangePasswordCheck = _useInput6[1];\n\n  var _useInput7 = useInput(),\n      _useInput8 = _slicedToArray(_useInput7, 2),\n      name = _useInput8[0],\n      onChangeName = _useInput8[1];\n\n  var _useState = useState(),\n      bizcode = _useState[0],\n      setBizcode = _useState[1];\n\n  var _useState2 = useState(false),\n      termToggle = _useState2[0],\n      setTermToggle = _useState2[1];\n\n  var _useState3 = useState(false),\n      divisionToggle = _useState3[0],\n      setDivisionToggle = _useState3[1];\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      bizcodeConfirm = _useSelector.bizcodeConfirm;\n\n  var onClickTermToggle = function onClickTermToggle() {\n    return setTermToggle(!termToggle);\n  };\n\n  var onSubmitForm = useCallback(function (e) {\n    if (passwordError) {\n      return setPasswordError(true);\n    } else {\n      dispatch({\n        type: SIGN_UP_REQUEST,\n        data: {\n          username: email,\n          password: password\n        }\n      });\n    }\n  }, [email, password, passwordCheck]);\n\n  var onChangeDivisionToggle = function onChangeDivisionToggle() {\n    return setDivisionToggle(!divisionToggle);\n  };\n\n  var onChangeBizcode = function onChangeBizcode(e) {\n    setBizcode(e.target.value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    title: __jsx(Space, {\n      direction: \"horizental\",\n      align: \"baseline\",\n      size: \"large\"\n    }, divisionToggle ? __jsx(\"h1\", null, \"\\uAC00\\uB9F9\\uC810\") : __jsx(\"h1\", null, \"\\uC77C\\uBC18\\uD68C\\uC6D0\"), __jsx(Switch, {\n      onClick: onChangeDivisionToggle,\n      checkedChildren: \"\\uAC00\\uB9F9\\uC810\",\n      unCheckedChildren: \"\\uC77C\\uBC18\\uD68C\\uC6D0\",\n      size: \"middle\"\n    }))\n  }, __jsx(Form, {\n    onFinish: onSubmitForm\n  }, __jsx(Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    }\n  }, !termToggle && __jsx(Descriptions, {\n    bordered: true,\n    column: 24,\n    layout: \"vertical\",\n    size: \"large\"\n  }, __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uAC1C\\uC778(\\uC2E0\\uC6A9)\\uC815\\uBCF4\\uC218\\uC9D1/\\uC774\\uC6A9\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uACE0\\uC720\\uC2DD\\uBCC4\\uC815\\uBCF4\\uC758 \\uCC98\\uB9AC\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uD1B5\\uC2E0\\uC0AC \\uC774\\uC6A9\\uC57D\\uAD00\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uC11C\\uBE44\\uC2A4 \\uC774\\uC6A9\\uC57D\\uAD00\")), __jsx(\"div\", {\n    style: {\n      textAlign: \"right\"\n    }\n  }, __jsx(Checkbox, {\n    onChange: onClickTermToggle\n  }, \"\\uC804\\uCCB4\\uB3D9\\uC758\")), __jsx(\"div\", null, __jsx(Form.Item, {\n    name: \"email\",\n    rules: [{\n      type: \"email\",\n      message: \"올바른 이메일 형식을 입력해주세요!\"\n    }, {\n      required: true,\n      message: \"이메일를 입력해 주세요!\"\n    }]\n  }, __jsx(Input, {\n    size: \"large\",\n    prefix: \"* Email\",\n    value: email,\n    onChange: onChangeEmail,\n    placeholder: \"Email\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: \"비밀번호를 확인해주세요\"\n    }]\n  }, __jsx(Input.Password, {\n    prefix: \"* \\uBE44\\uBC00\\uBC88\\uD638\",\n    size: \"large\",\n    value: password,\n    onChange: onChangePassword,\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"passwordCheck\",\n    dependencies: [\"password\"],\n    rules: [{\n      required: true,\n      message: \"비밀번호를 확인해 주세요\"\n    }, function (_ref) {\n      var getFieldValue = _ref.getFieldValue;\n      return {\n        validator: function validator(rule, value) {\n          if (!value || getFieldValue(\"password\") === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\n        }\n      };\n    }]\n  }, __jsx(Input.Password, {\n    prefix: \"* \\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n    size: \"large\",\n    value: passwordCheck,\n    onChange: onChangePasswordCheck,\n    placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: \"이름을 입력해주세요\"\n    }]\n  }, __jsx(Input, {\n    prefix: divisionToggle ? \"* 가게명\" : \"* 이름\",\n    size: \"large\",\n    onChange: onChangeName,\n    value: name\n  })), divisionToggle && __jsx(Form.Item, {\n    name: \"bizcode\",\n    validateTrigger: \"onBlur\",\n    rules: [{\n      len: 10,\n      pattern: /\\d{1}/g,\n      message: \"올바른 사업자 등록번호가 아닙니다.\"\n    }, {\n      required: true,\n      message: \"사업자 등록번호를 입력해주세요\"\n    }, function () {\n      return {\n        validator: function validator(rule, value) {\n          dispatch({\n            type: BIZCODE_CONFIRM_REQUEST,\n            bizcode: value\n          });\n        }\n      };\n    }]\n  }, __jsx(Input, {\n    prefix: \"* 사업자등록번호\",\n    size: \"large\",\n    name: \"bizcode\",\n    value: bizcode,\n    onChange: onChangeBizcode\n  }))), __jsx(Button, {\n    htmlType: \"submit\",\n    type: \"primary\",\n    style: {\n      width: \"100%\"\n    }\n  }, \"\\uD68C\\uC6D0\\uAC00\\uC785\")))));\n};\n\n_s(Signup, \"G+i/03xtpPnN9I7GI1TD1c0+4D0=\", false, function () {\n  return [useInput, useInput, useInput, useInput, useDispatch, useSelector];\n});\n\n_c = Signup;\nexport default _c2 = withRouter(Signup);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Signup\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/pages/user/signup.js"],"names":["Button","Form","Input","Descriptions","Checkbox","Card","Space","Switch","useState","useCallback","useDispatch","useSelector","useInput","SIGN_UP_REQUEST","BIZCODE_CONFIRM_REQUEST","Router","withRouter","Signup","email","onChangeEmail","password","onChangePassword","passwordCheck","onChangePasswordCheck","name","onChangeName","bizcode","setBizcode","termToggle","setTermToggle","divisionToggle","setDivisionToggle","dispatch","state","user","bizcodeConfirm","onClickTermToggle","onSubmitForm","e","passwordError","setPasswordError","type","data","username","onChangeDivisionToggle","onChangeBizcode","target","value","width","height","textAlign","message","required","getFieldValue","validator","rule","Promise","resolve","reject","len","pattern"],"mappings":"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","sourcesContent":["import { Button, Form, Input, Descriptions, Checkbox, Card, Space, Switch } from \"antd\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useInput } from \"../../components/Generalui/CustomHooks\";\r\nimport { SIGN_UP_REQUEST, BIZCODE_CONFIRM_REQUEST } from \"../../reducers/user\";\r\nimport Router, { withRouter } from \"next/router\";\r\n\r\nconst Signup = () => {\r\n  const [email, onChangeEmail] = useInput();\r\n  const [password, onChangePassword] = useInput();\r\n  const [passwordCheck, onChangePasswordCheck] = useInput();\r\n  const [name, onChangeName] = useInput();\r\n  const [bizcode, setBizcode] = useState();\r\n  const [termToggle, setTermToggle] = useState(false);\r\n  const [divisionToggle, setDivisionToggle] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const { bizcodeConfirm } = useSelector((state) => state.user);\r\n\r\n  const onClickTermToggle = () => {\r\n    return setTermToggle(!termToggle);\r\n  };\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      if (passwordError) {\r\n        return setPasswordError(true);\r\n      } else {\r\n        dispatch({\r\n          type: SIGN_UP_REQUEST,\r\n          data: {\r\n            username: email,\r\n            password: password,\r\n          },\r\n        });\r\n      }\r\n    },\r\n    [email, password, passwordCheck]\r\n  );\r\n\r\n  const onChangeDivisionToggle = () => {\r\n    return setDivisionToggle(!divisionToggle);\r\n  };\r\n\r\n  const onChangeBizcode = (e) => {\r\n    setBizcode(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title={\r\n          <Space direction=\"horizental\" align={`baseline`} size={`large`}>\r\n            {divisionToggle ? <h1>가맹점</h1> : <h1>일반회원</h1>}\r\n            <Switch\r\n              onClick={onChangeDivisionToggle}\r\n              checkedChildren={`가맹점`}\r\n              unCheckedChildren={`일반회원`}\r\n              size={\"middle\"}\r\n            />\r\n          </Space>\r\n        }\r\n      >\r\n        <Form onFinish={onSubmitForm}>\r\n          <Space direction=\"vertical\" size={\"large\"} style={{ width: \"100%\", height: `100vh` }}>\r\n            {!termToggle && (\r\n              <Descriptions bordered column={24} layout={`vertical`} size={`large`}>\r\n                <Descriptions.Item label=\"필수\">개인(신용)정보수집/이용</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">고유식별정보의 처리</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">통신사 이용약관</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">서비스 이용약관</Descriptions.Item>\r\n              </Descriptions>\r\n            )}\r\n            <div style={{ textAlign: \"right\" }}>\r\n              <Checkbox onChange={onClickTermToggle}>전체동의</Checkbox>\r\n            </div>\r\n            <div>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"올바른 이메일 형식을 입력해주세요!\",\r\n                  },\r\n                  {\r\n                    required: true,\r\n                    message: \"이메일를 입력해 주세요!\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  size={`large`}\r\n                  prefix={`* Email`}\r\n                  value={email}\r\n                  onChange={onChangeEmail}\r\n                  placeholder=\"Email을 입력해주세요\"\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"비밀번호를 확인해주세요\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={`* 비밀번호`}\r\n                  size={`large`}\r\n                  value={password}\r\n                  onChange={onChangePassword}\r\n                  placeholder=\"비밀번호를 입력해주세요\"\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"passwordCheck\"\r\n                dependencies={[\"password\"]}\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"비밀번호를 확인해 주세요\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(rule, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  prefix={`* 비밀번호 확인`}\r\n                  size={`large`}\r\n                  value={passwordCheck}\r\n                  onChange={onChangePasswordCheck}\r\n                  placeholder=\"다시 비밀번호를 입력해주세요\"\r\n                />\r\n              </Form.Item>\r\n              <Form.Item name=\"name\" rules={[{ required: true, message: \"이름을 입력해주세요\" }]}>\r\n                <Input\r\n                  prefix={divisionToggle ? \"* 가게명\" : \"* 이름\"}\r\n                  size={`large`}\r\n                  onChange={onChangeName}\r\n                  value={name}\r\n                />\r\n              </Form.Item>\r\n              {divisionToggle && (\r\n                <Form.Item\r\n                  name=\"bizcode\"\r\n                  validateTrigger=\"onBlur\"\r\n                  rules={[\r\n                    { len: 10, pattern: /\\d{1}/g, message: \"올바른 사업자 등록번호가 아닙니다.\" },\r\n                    { required: true, message: \"사업자 등록번호를 입력해주세요\" },\r\n                    () => ({\r\n                      validator(rule, value) {\r\n                        dispatch({\r\n                          type: BIZCODE_CONFIRM_REQUEST,\r\n                          bizcode: value,\r\n                        });\r\n                      },\r\n                    }),\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    prefix={\"* 사업자등록번호\"}\r\n                    size={`large`}\r\n                    name={\"bizcode\"}\r\n                    value={bizcode}\r\n                    onChange={onChangeBizcode}\r\n                  />\r\n                </Form.Item>\r\n              )}\r\n            </div>\r\n            <Button htmlType={\"submit\"} type={\"primary\"} style={{ width: \"100%\" }}>\r\n              회원가입\r\n            </Button>\r\n          </Space>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Signup);\r\n"]},"metadata":{},"sourceType":"module"}