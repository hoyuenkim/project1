{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(paymentHistory),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchPaymentHistory),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rating),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchRating),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_PAYMENT_HISTORY_FAILURE, LOAD_PAYMENT_HISTORY_REQUEST, LOAD_PAYMENT_HISTORY_SUCCESS, RATING_FAILURE, RATING_SUCCESS } from '../reducers/payment';\nimport next from 'next';\n\nfunction paymentHistoryAPI(data) {\n  console.log('api call');\n  return axios.post('/payments/history/load', {\n    id: data.id\n  });\n}\n\nfunction paymentHistory(data) {\n  var result;\n  return _regeneratorRuntime.wrap(function paymentHistory$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(paymentHistoryAPI, data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOAD_PAYMENT_HISTORY_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: LOAD_PAYMENT_HISTORY_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchPaymentHistory() {\n  return _regeneratorRuntime.wrap(function watchPaymentHistory$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_PAYMENT_HISTORY_REQUEST, paymentHistory);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction ratingAPI(data) {\n  return axios.post('/payments/rating', {\n    id: data.id,\n    rate: data.rate\n  });\n}\n\nfunction rating(data) {\n  var result;\n  return _regeneratorRuntime.wrap(function rating$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(ratingAPI, data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: RATING_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: RATING_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchRating() {\n  return _regeneratorRuntime.wrap(function watchRating$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(RATING_REQUEST, rating);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchPaymentHistory)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/sagas/payment.js"],"names":["paymentHistory","watchPaymentHistory","rating","watchRating","userSaga","fork","takeEvery","all","put","call","takeLatest","axios","LOAD_PAYMENT_HISTORY_FAILURE","LOAD_PAYMENT_HISTORY_REQUEST","LOAD_PAYMENT_HISTORY_SUCCESS","RATING_FAILURE","RATING_SUCCESS","next","paymentHistoryAPI","data","console","log","post","id","result","type","error","ratingAPI","rate","RATING_REQUEST"],"mappings":";;oDAiBUA,c;qDAYAC,mB;qDAQAC,M;qDAWAC,W;qDAIeC,Q;;AApDzB,SAASC,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,EAA0CC,UAA1C,QAA4D,oBAA5D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,4BADF,EAEEC,4BAFF,EAGEC,4BAHF,EAIEC,cAJF,EAKEC,cALF,QAMO,qBANP;AAOA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAOV,KAAK,CAACW,IAAN,CAAW,wBAAX,EAAqC;AAAEC,IAAAA,EAAE,EAAEJ,IAAI,CAACI;AAAX,GAArC,CAAP;AACD;;AAED,SAAUvB,cAAV,CAAyBmB,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMV,IAAI,CAACS,iBAAD,EAAoBC,IAApB,CAAV;;AAFnB;AAEUK,UAAAA,MAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEX,4BADE;AAERK,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQI,iBAAMX,GAAG,CAAC;AAAEiB,YAAAA,IAAI,EAAEb,4BAAR;AAAsCc,YAAAA,KAAK;AAA3C,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAAUzB,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,UAAU,CAACG,4BAAD,EAA+Bb,cAA/B,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAS2B,SAAT,CAAmBR,IAAnB,EAAyB;AACvB,SAAOR,KAAK,CAACW,IAAN,CAAW,kBAAX,EAA+B;AAAEC,IAAAA,EAAE,EAAEJ,IAAI,CAACI,EAAX;AAAeK,IAAAA,IAAI,EAAET,IAAI,CAACS;AAA1B,GAA/B,CAAP;AACD;;AAED,SAAU1B,MAAV,CAAiBiB,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMV,IAAI,CAACkB,SAAD,EAAYR,IAAZ,CAAV;;AAFnB;AAEUK,UAAAA,MAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AAAEiB,YAAAA,IAAI,EAAET,cAAR;AAAwBG,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAArC,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKIC,UAAAA,OAAO,CAACC,GAAR;AALJ;AAOI,iBAAMb,GAAG,CAAC;AAAEiB,YAAAA,IAAI,EAAEV,cAAR;AAAwBW,YAAAA,KAAK;AAA7B,WAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUvB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACmB,cAAD,EAAiB3B,MAAjB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMG,GAAG,CAAC,CAACF,IAAI,CAACJ,mBAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  LOAD_PAYMENT_HISTORY_FAILURE,\r\n  LOAD_PAYMENT_HISTORY_REQUEST,\r\n  LOAD_PAYMENT_HISTORY_SUCCESS,\r\n  RATING_FAILURE,\r\n  RATING_SUCCESS,\r\n} from '../reducers/payment';\r\nimport next from 'next';\r\n\r\nfunction paymentHistoryAPI(data) {\r\n  console.log('api call');\r\n  return axios.post('/payments/history/load', { id: data.id });\r\n}\r\n\r\nfunction* paymentHistory(data) {\r\n  try {\r\n    const result = yield call(paymentHistoryAPI, data);\r\n    yield put({\r\n      type: LOAD_PAYMENT_HISTORY_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({ type: LOAD_PAYMENT_HISTORY_FAILURE, error: e });\r\n  }\r\n}\r\n\r\nfunction* watchPaymentHistory() {\r\n  yield takeLatest(LOAD_PAYMENT_HISTORY_REQUEST, paymentHistory);\r\n}\r\n\r\nfunction ratingAPI(data) {\r\n  return axios.post('/payments/rating', { id: data.id, rate: data.rate });\r\n}\r\n\r\nfunction* rating(data) {\r\n  try {\r\n    const result = yield call(ratingAPI, data);\r\n    yield put({ type: RATING_SUCCESS, data: result.data });\r\n  } catch (e) {\r\n    console.log(e);\r\n\r\n    yield put({ type: RATING_FAILURE, error: e });\r\n  }\r\n}\r\n\r\nfunction* watchRating() {\r\n  yield takeLatest(RATING_REQUEST, rating)\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchPaymentHistory)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}