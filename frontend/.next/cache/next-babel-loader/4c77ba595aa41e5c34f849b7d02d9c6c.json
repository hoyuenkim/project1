{"ast":null,"code":"import React, { useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Input, Button, message, Card, Space } from \"antd\";\nimport { MailOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { LOG_IN_REQUEST } from \"../../reducers/user\";\nimport Router from \"next/router\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst Login = ({\n  setToggleLogin,\n  username,\n  onChangeUsername,\n  setUsername,\n  password,\n  onChangePassword,\n  setPassword\n}) => {\n  const dispatch = useDispatch();\n  const {\n    loginError\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    if (loginError) {\n      message.error(loginError);\n    }\n  }, [loginError]);\n  const {\n    isLoggedIn\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    if (isLoggedIn) {\n      setToggleLogin(false);\n    }\n  });\n\n  const onClickSignUp = () => {\n    setToggleLogin(false);\n    Router.push(\"/user/signup\");\n  };\n\n  const onFinish = () => {\n    dispatch({\n      type: LOG_IN_REQUEST,\n      data: {\n        username,\n        password\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Card, {\n      style: {\n        verticalAlign: \"middle\"\n      },\n      children: /*#__PURE__*/_jsx(Form, {\n        onFinish: onFinish,\n        initialValues: {\n          username: undefined,\n          password: undefined\n        },\n        children: /*#__PURE__*/_jsxs(Space, {\n          direction: \"vertical\",\n          size: \"large\",\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsx(Form.Item, {\n            name: \"email\",\n            rules: [{\n              required: true,\n              message: \"이메일을 입력해주세요\"\n            }, {\n              type: \"email\",\n              message: \"형식에 맞지 않는 아이디입니다\"\n            }],\n            children: /*#__PURE__*/_jsx(Input, {\n              prefix: /*#__PURE__*/_jsx(MailOutlined, {}),\n              size: \"large\",\n              name: \"email\",\n              onChange: onChangeUsername\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            name: \"password\",\n            rules: [{\n              required: true,\n              message: \"비밀번호를 입력해주세요\"\n            }, {\n              pattern: /^[0-9a-zA-Z]{6,12}$/,\n              message: \"형식에 맞지 않는 비밀번호입니다\"\n            }],\n            children: /*#__PURE__*/_jsx(Input.Password, {\n              name: \"password\",\n              prefix: /*#__PURE__*/_jsx(LockOutlined, {}),\n              size: \"large\",\n              onChange: onChangePassword\n            })\n          }), /*#__PURE__*/_jsx(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            style: {\n              width: \"100%\"\n            },\n            children: \"Login\"\n          }), /*#__PURE__*/_jsx(Button, {\n            style: {\n              width: \"100%\"\n            },\n            onClick: onClickSignUp,\n            children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n          })]\n        })\n      })\n    })\n  });\n};\n\nexport default Login;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/Dev/project1/frontend/components/Forms/Login.js"],"names":["React","useEffect","useCallback","useDispatch","useSelector","Form","Input","Button","message","Card","Space","MailOutlined","LockOutlined","LOG_IN_REQUEST","Router","Login","setToggleLogin","username","onChangeUsername","setUsername","password","onChangePassword","setPassword","dispatch","loginError","state","user","error","isLoggedIn","onClickSignUp","push","onFinish","type","data","verticalAlign","undefined","width","required","pattern"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Form, Input, Button, message, Card, Space } from \"antd\";\nimport { MailOutlined, LockOutlined } from \"@ant-design/icons\";\nimport { LOG_IN_REQUEST } from \"../../reducers/user\";\nimport Router from \"next/router\";\n\nconst Login = ({\n  setToggleLogin,\n  username,\n  onChangeUsername,\n  setUsername,\n  password,\n  onChangePassword,\n  setPassword,\n}) => {\n  const dispatch = useDispatch();\n\n  const { loginError } = useSelector((state) => state.user);\n\n  useEffect(() => {\n    if (loginError) {\n      message.error(loginError);\n    }\n  }, [loginError]);\n\n  const { isLoggedIn } = useSelector((state) => state.user);\n  useEffect(() => {\n    if (isLoggedIn) {\n      setToggleLogin(false);\n    }\n  });\n\n  const onClickSignUp = () => {\n    setToggleLogin(false);\n    Router.push(\"/user/signup\");\n  };\n\n  const onFinish = () => {\n    dispatch({\n      type: LOG_IN_REQUEST,\n      data: {\n        username,\n        password,\n      },\n    });\n  };\n\n  return (\n    <>\n      <Card style={{ verticalAlign: \"middle\" }}>\n        <Form onFinish={onFinish} initialValues={{ username: undefined, password: undefined }}>\n          <Space direction=\"vertical\" size={\"large\"} style={{ width: \"100%\" }}>\n            <Form.Item\n              name={\"email\"}\n              rules={[\n                { required: true, message: \"이메일을 입력해주세요\" },\n                { type: \"email\", message: \"형식에 맞지 않는 아이디입니다\" },\n              ]}\n            >\n              <Input\n                prefix={<MailOutlined />}\n                size={\"large\"}\n                name={\"email\"}\n                onChange={onChangeUsername}\n              />\n            </Form.Item>\n            <Form.Item\n              name={\"password\"}\n              rules={[\n                { required: true, message: \"비밀번호를 입력해주세요\" },\n                {\n                  pattern: /^[0-9a-zA-Z]{6,12}$/,\n                  message: \"형식에 맞지 않는 비밀번호입니다\",\n                },\n              ]}\n            >\n              <Input.Password\n                name={\"password\"}\n                prefix={<LockOutlined />}\n                size={\"large\"}\n                onChange={onChangePassword}\n              />\n            </Form.Item>\n            <Button type={\"primary\"} htmlType={\"submit\"} style={{ width: \"100%\" }}>\n              Login\n            </Button>\n\n            <Button style={{ width: \"100%\" }} onClick={onClickSignUp}>\n              회원가입\n            </Button>\n          </Space>\n        </Form>\n      </Card>\n    </>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}