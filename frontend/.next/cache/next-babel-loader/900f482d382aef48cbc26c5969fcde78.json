{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadProducts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadProducts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadProductTest),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(productsSaga);\n\nimport axios from \"axios\";\nimport { all, put, fork, call, takeLatest } from \"redux-saga/effects\";\nimport { LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE, LOAD_PRODUCTS_REQUEST, LOAD_PRODUCT_FAILURE_TEST, LOAD_PRODUCT_SUCCESS_TEST } from \"../reducers/menu\";\n\nfunction loadProductApi(data) {\n  return axios.post(\"/menu\", {\n    data: data\n  });\n}\n\nfunction loadProducts(_ref) {\n  var data, result;\n  return _regeneratorRuntime.wrap(function loadProducts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          data = _ref.data;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(loadProductApi, data);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return put({\n            type: LOAD_PRODUCTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(_context.t0);\n          _context.next = 14;\n          return put({\n            type: LOAD_PRODUCTS_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction watchLoadProducts() {\n  return _regeneratorRuntime.wrap(function watchLoadProducts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_PRODUCTS_REQUEST, loadProducts);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction loadProductTestAPI(data) {\n  return axios.post(\"/products/load/test\", data);\n}\n\nfunction loadProductTest(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadProductTest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadProductTestAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_PRODUCT_SUCCESS_TEST,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_PRODUCT_FAILURE_TEST,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nexport default function productsSaga() {\n  return _regeneratorRuntime.wrap(function productsSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLoadProducts)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/sagas/menu.js"],"names":["loadProducts","watchLoadProducts","loadProductTest","productsSaga","axios","all","put","fork","call","takeLatest","LOAD_PRODUCTS_SUCCESS","LOAD_PRODUCTS_FAILURE","LOAD_PRODUCTS_REQUEST","LOAD_PRODUCT_FAILURE_TEST","LOAD_PRODUCT_SUCCESS_TEST","loadProductApi","data","post","result","type","console","log","error","loadProductTestAPI","action"],"mappings":";;oDAcUA,Y;qDAgBAC,iB;qDAQAC,e;qDAUeC,Y;;AAhDzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,qBAHF,EAIEC,yBAJF,EAKEC,yBALF,QAMO,kBANP;;AAQA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOZ,KAAK,CAACa,IAAN,UAAoB;AAAED,IAAAA,IAAI,EAAJA;AAAF,GAApB,CAAP;AACD;;AAED,SAAUhB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyBgB,UAAAA,IAAzB,QAAyBA,IAAzB;AAAA;AAAA;AAEmB,iBAAMR,IAAI,CAACO,cAAD,EAAiBC,IAAjB,CAAV;;AAFnB;AAEUE,UAAAA,MAFV;AAAA;AAGI,iBAAMZ,GAAG,CAAC;AACRa,YAAAA,IAAI,EAAET,qBADE;AAERM,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQII,UAAAA,OAAO,CAACC,GAAR;AARJ;AASI,iBAAMf,GAAG,CAAC;AACRa,YAAAA,IAAI,EAAER,qBADE;AAERW,YAAAA,KAAK;AAFG,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUrB,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAACG,qBAAD,EAAwBZ,YAAxB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASuB,kBAAT,CAA4BP,IAA5B,EAAkC;AAChC,SAAOZ,KAAK,CAACa,IAAN,CAAW,qBAAX,EAAkCD,IAAlC,CAAP;AACD;;AAED,SAAUd,eAAV,CAA0BsB,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMhB,IAAI,CAACe,kBAAD,EAAqBC,MAAM,CAACR,IAA5B,CAAV;;AAFnB;AAEUE,UAAAA,MAFV;AAAA;AAGI,iBAAMZ,GAAG,CAAC;AAAEa,YAAAA,IAAI,EAAEL,yBAAR;AAAmCE,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAAhD,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKII,UAAAA,OAAO,CAACE,KAAR;AALJ;AAMI,iBAAMhB,GAAG,CAAC;AAAEa,YAAAA,IAAI,EAAEN,yBAAR;AAAmCS,YAAAA,KAAK;AAAxC,WAAD,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAe,SAAUnB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CAACE,IAAI,CAACN,iBAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\nimport { all, put, fork, call, takeLatest } from \"redux-saga/effects\";\nimport {\n  LOAD_PRODUCTS_SUCCESS,\n  LOAD_PRODUCTS_FAILURE,\n  LOAD_PRODUCTS_REQUEST,\n  LOAD_PRODUCT_FAILURE_TEST,\n  LOAD_PRODUCT_SUCCESS_TEST,\n} from \"../reducers/menu\";\n\nfunction loadProductApi(data) {\n  return axios.post(`/menu`, { data });\n}\n\nfunction* loadProducts({ data }) {\n  try {\n    const result = yield call(loadProductApi, data);\n    yield put({\n      type: LOAD_PRODUCTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_PRODUCTS_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadProducts() {\n  yield takeLatest(LOAD_PRODUCTS_REQUEST, loadProducts);\n}\n\nfunction loadProductTestAPI(data) {\n  return axios.post(\"/products/load/test\", data);\n}\n\nfunction* loadProductTest(action) {\n  try {\n    const result = yield call(loadProductTestAPI, action.data);\n    yield put({ type: LOAD_PRODUCT_SUCCESS_TEST, data: result.data });\n  } catch (err) {\n    console.error(err);\n    yield put({ type: LOAD_PRODUCT_FAILURE_TEST, error: err });\n  }\n}\n\nexport default function* productsSaga() {\n  yield all([fork(watchLoadProducts)]);\n}\n"]},"metadata":{},"sourceType":"module"}