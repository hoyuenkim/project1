{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hoyuen\\\\Documents\\\\dev\\\\project1\\\\frontend\\\\pages\\\\user\\\\signup.js\";\nimport { Button, Form, Input, Descriptions, Checkbox, Card, Space, Switch } from 'antd';\nimport { useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInput, useChecked } from '../../components/Generalui/CustomHooks';\nimport DaumPostcode from 'react-daum-postcode';\nimport wrapper from '../../store/configureStore';\nimport Terms from '../../components/Generalui/Terms';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport { SIGN_UP_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport Router from 'next/router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = 'http://127.0.0.1:3065';\n\nconst Signup = () => {\n  const [email, onChangeEmail] = useInput();\n  const [password, onChangePassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck] = useInput();\n  const [name, onChangeName] = useInput();\n  const {\n    0: bizcode,\n    1: setBizcode\n  } = useState();\n  const {\n    0: address,\n    1: setAddress\n  } = useState();\n  const [addressDetail, onChangeAddressDetail] = useInput();\n  const {\n    0: termToggle,\n    1: setTermToggle\n  } = useState(false);\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false);\n  const {\n    0: divisionToggle,\n    1: setDivisionToggle\n  } = useState(false);\n  const {\n    0: addressToggle,\n    1: setAddressToggle\n  } = useState(false);\n  const {\n    0: formHeight,\n    1: setFormHeight\n  } = useState('100vh');\n  const [personalInformationTerm, togglePersonalInformationTerm, setPersonalInformationTerm] = useChecked(false);\n  const [thirdPartyIngormationTerm, toggleThirdPartyInformationTerm, setThirdPartyInformationTerm] = useChecked(false);\n  const [locationTerm, toggleLocationTerm, setLocationTerm] = useChecked(false);\n  const dispatch = useDispatch();\n\n  const onClickTermToggle = () => {\n    return setTermToggle(!termToggle);\n  };\n\n  const handleComplete = data => {\n    let fullAddress = data.address;\n    let extraAddress = '';\n\n    if (data.addressType === 'R') {\n      if (data.bname !== '') {\n        extraAddress += data.bname;\n      }\n\n      if (data.buildingName !== '') {\n        extraAddress += extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName;\n      }\n\n      fullAddress += extraAddress !== '' ? ` (${extraAddress})` : '';\n    }\n\n    setAddress(fullAddress);\n    setAddressToggle(false);\n  };\n\n  const onFinish = () => {\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        username: email,\n        password,\n        name,\n        bizcode,\n        address,\n        addressDetail,\n        division: divisionToggle\n      }\n    });\n    Router.push('/user/login');\n  };\n\n  const onChangeDivisionToggle = () => {\n    setFormHeight(formHeight ? undefined : '100vh');\n    setDivisionToggle(!divisionToggle);\n  };\n\n  const onChangeBizcode = e => {\n    setBizcode(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      title: /*#__PURE__*/_jsxDEV(Space, {\n        direction: \"horizental\",\n        align: `baseline`,\n        size: `large`,\n        children: [divisionToggle ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uAC00\\uB9F9\\uC810\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 31\n        }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\uC77C\\uBC18\\uD68C\\uC6D0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 46\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          onClick: onChangeDivisionToggle,\n          checkedChildren: `가맹점`,\n          unCheckedChildren: `일반회원`,\n          size: 'middle'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onFinish: onFinish,\n        encType: 'multipart/form-data',\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          direction: \"vertical\",\n          size: 'large',\n          style: {\n            width: '100%',\n            height: formHeight\n          },\n          children: [/*#__PURE__*/_jsxDEV(Terms, {\n            setTerms: [[personalInformationTerm, togglePersonalInformationTerm, setPersonalInformationTerm], [thirdPartyIngormationTerm, toggleThirdPartyInformationTerm, setThirdPartyInformationTerm]]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"email\",\n            validateTrigger: \"onBlur\",\n            rules: [{\n              required: true,\n              message: '이메일를 입력해 주세요!'\n            }, () => ({\n              async validator(rule, value) {\n                const regex = new RegExp(/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i);\n\n                if (value && value.match(regex)) {\n                  const result = await axios.post('/user/confirm/email', {\n                    email: value\n                  });\n\n                  if (result.data) {\n                    return Promise.reject('이미 존재하는 이메일입니다');\n                  } else {\n                    return Promise.resolve();\n                  }\n                } else {\n                  return Promise.reject('형식에 맞지 않는 이메일입니다');\n                }\n              }\n\n            })],\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              size: `large`,\n              prefix: `* Email`,\n              value: email,\n              onChange: onChangeEmail,\n              placeholder: \"Email\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"password\",\n            rules: [{\n              required: true,\n              message: '비밀번호를 확인해주세요'\n            }, {\n              pattern: /^[A-Za-z0-9]{6,12}$/,\n              message: '비밀번호가 형식에 맞지 않습니다'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input.Password, {\n              prefix: `* 비밀번호`,\n              size: `large`,\n              value: password,\n              onChange: onChangePassword,\n              placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"passwordCheck\",\n            dependencies: ['password'],\n            rules: [{\n              required: true,\n              message: '비밀번호를 확인해 주세요'\n            }, ({\n              getFieldValue\n            }) => ({\n              validator(rule, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve();\n                }\n\n                return Promise.reject('비밀번호가 일치하지 않습니다.');\n              }\n\n            })],\n            children: /*#__PURE__*/_jsxDEV(Input.Password, {\n              prefix: `* 비밀번호 확인`,\n              size: `large`,\n              value: passwordCheck,\n              onChange: onChangePasswordCheck,\n              placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n            name: \"name\",\n            rules: [{\n              required: true,\n              message: '이름을 입력해주세요'\n            }],\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              prefix: divisionToggle ? '* 가게명' : '* 이름',\n              size: `large`,\n              onChange: onChangeName,\n              value: name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), divisionToggle && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"bizcode\",\n              validateTrigger: \"onBlur\",\n              rules: [{\n                required: true,\n                message: '사업자 등록번호를 입력해주세요'\n              }, () => ({\n                async validator(rule, value) {\n                  if (!value || !value.match(/\\d{1}/g) || !value.length === 10) {\n                    return Promise.reject('형식에 맞지 않은 사업자 등록번호입니다');\n                  } else {\n                    function checkBizID(bizID) {\n                      var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);\n                      var tmpBizID,\n                          i,\n                          chkSum = 0,\n                          c2,\n                          remander;\n                      bizID = bizID.replace(/-/gi, '');\n\n                      for (i = 0; i <= 7; i++) chkSum += checkID[i] * bizID.charAt(i);\n\n                      c2 = '0' + checkID[8] * bizID.charAt(8);\n                      c2 = c2.substring(c2.length - 2, c2.length);\n                      chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));\n                      remander = (10 - chkSum % 10) % 10;\n                      if (Math.floor(bizID.charAt(9)) == remander) return true;\n                      return false;\n                    }\n\n                    if (checkBizID(value)) {\n                      const result = await axios.post('/user/confirm/bizcode', {\n                        bizcode: value\n                      });\n\n                      if (!result.data) {\n                        return Promise.resolve();\n                      } else {\n                        return Promise.reject('이미 존재하는 사업자 등록번호입니다');\n                      }\n                    } else {\n                      return Promise.reject('형식에 맞지 않은 사업자 등록번호입니다');\n                    }\n                  }\n                }\n\n              })],\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                prefix: '* 사업자등록번호',\n                size: `large`,\n                name: 'bizcode',\n                value: bizcode,\n                onChange: onChangeBizcode\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this), addressToggle ? /*#__PURE__*/_jsxDEV(Card, {\n              children: /*#__PURE__*/_jsxDEV(DaumPostcode, {\n                onComplete: handleComplete,\n                autoClose: true,\n                height: '10'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(Form.Item, {\n              name: \"address\",\n              initialValue: address,\n              rules: [{\n                required: true,\n                message: '주소를 입력해주세요'\n              }],\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                prefix: \"* \\uC8FC\\uC18C\",\n                name: 'address',\n                readOnly: true,\n                onClick: () => setAddressToggle(true),\n                size: 'large'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                prefix: \"* \\uC0C1\\uC138\\uC8FC\\uC18C\",\n                name: 'addressDetail',\n                onChange: onChangeAddressDetail,\n                size: 'large'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(Form.Item, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              style: {\n                width: `100%`\n              },\n              children: \"\\uC81C\\uCD9C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nexport default Signup;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/pages/user/signup.js"],"names":["Button","Form","Input","Descriptions","Checkbox","Card","Space","Switch","useState","useCallback","useDispatch","useSelector","useInput","useChecked","DaumPostcode","wrapper","Terms","axios","END","SIGN_UP_REQUEST","LOAD_USER_REQUEST","Router","defaults","baseURL","Signup","email","onChangeEmail","password","onChangePassword","passwordCheck","onChangePasswordCheck","name","onChangeName","bizcode","setBizcode","address","setAddress","addressDetail","onChangeAddressDetail","termToggle","setTermToggle","termError","setTermError","divisionToggle","setDivisionToggle","addressToggle","setAddressToggle","formHeight","setFormHeight","personalInformationTerm","togglePersonalInformationTerm","setPersonalInformationTerm","thirdPartyIngormationTerm","toggleThirdPartyInformationTerm","setThirdPartyInformationTerm","locationTerm","toggleLocationTerm","setLocationTerm","dispatch","onClickTermToggle","handleComplete","data","fullAddress","extraAddress","addressType","bname","buildingName","onFinish","type","username","division","push","onChangeDivisionToggle","undefined","onChangeBizcode","e","target","value","width","height","required","message","validator","rule","regex","RegExp","match","result","post","Promise","reject","resolve","pattern","getFieldValue","length","checkBizID","bizID","checkID","Array","tmpBizID","i","chkSum","c2","remander","replace","charAt","substring","Math","floor"],"mappings":"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","sourcesContent":["import { Button, Form, Input, Descriptions, Checkbox, Card, Space, Switch } from 'antd';\nimport { useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useInput, useChecked } from '../../components/Generalui/CustomHooks';\nimport DaumPostcode from 'react-daum-postcode';\nimport wrapper from '../../store/configureStore';\nimport Terms from '../../components/Generalui/Terms';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport { SIGN_UP_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport Router from 'next/router';\n\naxios.defaults.baseURL = 'http://127.0.0.1:3065';\n\nconst Signup = () => {\n  const [email, onChangeEmail] = useInput();\n  const [password, onChangePassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck] = useInput();\n  const [name, onChangeName] = useInput();\n  const [bizcode, setBizcode] = useState();\n  const [address, setAddress] = useState();\n  const [addressDetail, onChangeAddressDetail] = useInput();\n  const [termToggle, setTermToggle] = useState(false);\n  const [termError, setTermError] = useState(false);\n  const [divisionToggle, setDivisionToggle] = useState(false);\n  const [addressToggle, setAddressToggle] = useState(false);\n  const [formHeight, setFormHeight] = useState('100vh');\n  const [\n    personalInformationTerm,\n    togglePersonalInformationTerm,\n    setPersonalInformationTerm,\n  ] = useChecked(false);\n  const [\n    thirdPartyIngormationTerm,\n    toggleThirdPartyInformationTerm,\n    setThirdPartyInformationTerm,\n  ] = useChecked(false);\n  const [locationTerm, toggleLocationTerm, setLocationTerm] = useChecked(false);\n\n  const dispatch = useDispatch();\n\n  const onClickTermToggle = () => {\n    return setTermToggle(!termToggle);\n  };\n\n  const handleComplete = (data) => {\n    let fullAddress = data.address;\n    let extraAddress = '';\n\n    if (data.addressType === 'R') {\n      if (data.bname !== '') {\n        extraAddress += data.bname;\n      }\n      if (data.buildingName !== '') {\n        extraAddress += extraAddress !== '' ? `, ${data.buildingName}` : data.buildingName;\n      }\n      fullAddress += extraAddress !== '' ? ` (${extraAddress})` : '';\n    }\n\n    setAddress(fullAddress);\n    setAddressToggle(false);\n  };\n\n  const onFinish = () => {\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        username: email,\n        password,\n        name,\n        bizcode,\n        address,\n        addressDetail,\n        division: divisionToggle,\n      },\n    });\n    Router.push('/user/login');\n  };\n\n  const onChangeDivisionToggle = () => {\n    setFormHeight(formHeight ? undefined : '100vh');\n    setDivisionToggle(!divisionToggle);\n  };\n\n  const onChangeBizcode = (e) => {\n    setBizcode(e.target.value);\n  };\n\n  return (\n    <>\n      <Card\n        title={\n          <Space direction=\"horizental\" align={`baseline`} size={`large`}>\n            {divisionToggle ? <h1>가맹점</h1> : <h1>일반회원</h1>}\n            <Switch\n              onClick={onChangeDivisionToggle}\n              checkedChildren={`가맹점`}\n              unCheckedChildren={`일반회원`}\n              size={'middle'}\n            />\n          </Space>\n        }\n      >\n        <Form onFinish={onFinish} encType={'multipart/form-data'}>\n          <Space direction=\"vertical\" size={'large'} style={{ width: '100%', height: formHeight }}>\n            <Terms\n              setTerms={[\n                [\n                  personalInformationTerm,\n                  togglePersonalInformationTerm,\n                  setPersonalInformationTerm,\n                ],\n                [\n                  thirdPartyIngormationTerm,\n                  toggleThirdPartyInformationTerm,\n                  setThirdPartyInformationTerm,\n                ],\n              ]}\n            />\n\n            <Form.Item\n              name=\"email\"\n              validateTrigger=\"onBlur\"\n              rules={[\n                {\n                  required: true,\n                  message: '이메일를 입력해 주세요!',\n                },\n                () => ({\n                  async validator(rule, value) {\n                    const regex = new RegExp(\n                      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i,\n                    );\n                    if (value && value.match(regex)) {\n                      const result = await axios.post('/user/confirm/email', {\n                        email: value,\n                      });\n                      if (result.data) {\n                        return Promise.reject('이미 존재하는 이메일입니다');\n                      } else {\n                        return Promise.resolve();\n                      }\n                    } else {\n                      return Promise.reject('형식에 맞지 않는 이메일입니다');\n                    }\n                  },\n                }),\n              ]}\n            >\n              <Input\n                size={`large`}\n                prefix={`* Email`}\n                value={email}\n                onChange={onChangeEmail}\n                placeholder=\"Email을 입력해주세요\"\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"password\"\n              rules={[\n                {\n                  required: true,\n                  message: '비밀번호를 확인해주세요',\n                },\n                {\n                  pattern: /^[A-Za-z0-9]{6,12}$/,\n                  message: '비밀번호가 형식에 맞지 않습니다',\n                },\n              ]}\n            >\n              <Input.Password\n                prefix={`* 비밀번호`}\n                size={`large`}\n                value={password}\n                onChange={onChangePassword}\n                placeholder=\"비밀번호를 입력해주세요\"\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"passwordCheck\"\n              dependencies={['password']}\n              rules={[\n                {\n                  required: true,\n                  message: '비밀번호를 확인해 주세요',\n                },\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue('password') === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject('비밀번호가 일치하지 않습니다.');\n                  },\n                }),\n              ]}\n            >\n              <Input.Password\n                prefix={`* 비밀번호 확인`}\n                size={`large`}\n                value={passwordCheck}\n                onChange={onChangePasswordCheck}\n                placeholder=\"다시 비밀번호를 입력해주세요\"\n              />\n            </Form.Item>\n            <Form.Item name=\"name\" rules={[{ required: true, message: '이름을 입력해주세요' }]}>\n              <Input\n                prefix={divisionToggle ? '* 가게명' : '* 이름'}\n                size={`large`}\n                onChange={onChangeName}\n                value={name}\n              />\n            </Form.Item>\n            {divisionToggle && (\n              <>\n                <Form.Item\n                  name=\"bizcode\"\n                  validateTrigger=\"onBlur\"\n                  rules={[\n                    { required: true, message: '사업자 등록번호를 입력해주세요' },\n                    () => ({\n                      async validator(rule, value) {\n                        if (!value || !value.match(/\\d{1}/g) || !value.length === 10) {\n                          return Promise.reject('형식에 맞지 않은 사업자 등록번호입니다');\n                        } else {\n                          function checkBizID(bizID) {\n                            var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);\n                            var tmpBizID,\n                              i,\n                              chkSum = 0,\n                              c2,\n                              remander;\n                            bizID = bizID.replace(/-/gi, '');\n\n                            for (i = 0; i <= 7; i++) chkSum += checkID[i] * bizID.charAt(i);\n                            c2 = '0' + checkID[8] * bizID.charAt(8);\n                            c2 = c2.substring(c2.length - 2, c2.length);\n                            chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));\n                            remander = (10 - (chkSum % 10)) % 10;\n\n                            if (Math.floor(bizID.charAt(9)) == remander) return true;\n                            return false;\n                          }\n                          if (checkBizID(value)) {\n                            const result = await axios.post('/user/confirm/bizcode', {\n                              bizcode: value,\n                            });\n                            if (!result.data) {\n                              return Promise.resolve();\n                            } else {\n                              return Promise.reject('이미 존재하는 사업자 등록번호입니다');\n                            }\n                          } else {\n                            return Promise.reject('형식에 맞지 않은 사업자 등록번호입니다');\n                          }\n                        }\n                      },\n                    }),\n                  ]}\n                >\n                  <Input\n                    prefix={'* 사업자등록번호'}\n                    size={`large`}\n                    name={'bizcode'}\n                    value={bizcode}\n                    onChange={onChangeBizcode}\n                  />\n                </Form.Item>\n                {addressToggle ? (\n                  <Card>\n                    <DaumPostcode onComplete={handleComplete} autoClose={true} height={'10'} />\n                  </Card>\n                ) : (\n                  <Form.Item\n                    name=\"address\"\n                    initialValue={address}\n                    rules={[{ required: true, message: '주소를 입력해주세요' }]}\n                  >\n                    <Input\n                      prefix=\"* 주소\"\n                      name={'address'}\n                      readOnly\n                      onClick={() => setAddressToggle(true)}\n                      size={'large'}\n                    />\n                  </Form.Item>\n                )}\n                <Form.Item>\n                  <Input\n                    prefix=\"* 상세주소\"\n                    name={'addressDetail'}\n                    onChange={onChangeAddressDetail}\n                    size={'large'}\n                  />\n                </Form.Item>\n              </>\n            )}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" style={{ width: `100%` }}>\n                제출\n              </Button>\n            </Form.Item>\n          </Space>\n        </Form>\n      </Card>\n    </>\n  );\n};\n\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}