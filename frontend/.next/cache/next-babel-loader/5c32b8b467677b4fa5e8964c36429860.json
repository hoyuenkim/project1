{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport Cropper from \"react-easy-crop\";\nimport { useState, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Upload } from \"antd\";\nconst {\n  Dragger\n} = Upload;\n\nconst ImageInput = () => {\n  // const { imagePath } = useSelector((state) => state.product);\n  const {\n    0: crop,\n    1: setCrop\n  } = useState({\n    x: 0,\n    y: 0\n  });\n  const {\n    0: zoom,\n    1: setZoom\n  } = useState(1);\n  const {\n    0: croppedAreaPixels,\n    1: setCroppedAreaPixels\n  } = useState(null);\n  const {\n    0: croppedImage,\n    1: setCroppedImage\n  } = useState(null);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    console.log(croppedArea, croppedAreaPixels);\n  }, []);\n  const {\n    0: upImg,\n    1: setUpImg\n  } = useState(null);\n  return __jsx(React.Fragment, null, !upIma && __jsx(Dragger, props, __jsx(\"p\", {\n    className: \"ant-upload-drag-icon\"\n  }, __jsx(InboxOutlined, null)), __jsx(\"p\", {\n    className: \"ant-upload-text\"\n  }, \"Click or drag file to this area to upload\"), __jsx(\"p\", {\n    className: \"ant-upload-hint\"\n  }, \"Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files\")), upImg && __jsx(React.Fragment, null, __jsx(Cropper, {\n    image: upImg,\n    crop: crop,\n    zoom: zoom,\n    aspect: 4 / 3,\n    onCropChange: setCrop,\n    onZoomChange: setZoom,\n    onMediaLoaded: () => {\n      setZoom(1);\n    },\n    onCropcomplete: onCropComplete\n  }), __jsx(Button, null, \"test\")));\n};\n\nexport default ImageInput;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/components/Generalui/ImageInput.js"],"names":["React","Dropzone","Cropper","useState","useCallback","useSelector","Button","Upload","Dragger","ImageInput","crop","setCrop","x","y","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","croppedImage","setCroppedImage","onCropComplete","croppedArea","console","log","upImg","setUpImg","upIma","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,MAA/B;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,MAApB;;AAEA,MAAME,UAAU,GAAG,MAAM;AACvB;AAEA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC;AAAES,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAD,CAAhC;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAA,OAACa,iBAAD;AAAA,OAAoBC;AAApB,MAA4Cd,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM;AAAA,OAACe,YAAD;AAAA,OAAeC;AAAf,MAAkChB,QAAQ,CAAC,IAAD,CAAhD;AAEA,QAAMiB,cAAc,GAAGhB,WAAW,CAAC,CAACiB,WAAD,EAAcL,iBAAd,KAAoC;AACrEM,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAZ,EAAyBL,iBAAzB;AACD,GAFiC,EAE/B,EAF+B,CAAlC;AAIA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBtB,QAAQ,CAAC,IAAD,CAAlC;AAEA,SACE,4BACG,CAACuB,KAAD,IACC,MAAC,OAAD,EAAaC,KAAb,EACE;AAAG,IAAA,SAAS,EAAC;AAAb,KACE,MAAC,aAAD,OADF,CADF,EAIE;AAAG,IAAA,SAAS,EAAC;AAAb,iDAJF,EAKE;AAAG,IAAA,SAAS,EAAC;AAAb,8GALF,CAFJ,EAaGH,KAAK,IACJ,4BACE,MAAC,OAAD;AACE,IAAA,KAAK,EAAEA,KADT;AAEE,IAAA,IAAI,EAAEd,IAFR;AAGE,IAAA,IAAI,EAAEI,IAHR;AAIE,IAAA,MAAM,EAAE,IAAI,CAJd;AAKE,IAAA,YAAY,EAAEH,OALhB;AAME,IAAA,YAAY,EAAEI,OANhB;AAOE,IAAA,aAAa,EAAE,MAAM;AACnBA,MAAAA,OAAO,CAAC,CAAD,CAAP;AACD,KATH;AAUE,IAAA,cAAc,EAAEK;AAVlB,IADF,EAaE,MAAC,MAAD,eAbF,CAdJ,CADF;AAiCD,CA/CD;;AAiDA,eAAeX,UAAf","sourcesContent":["import React from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button, Upload } from \"antd\";\r\nconst { Dragger } = Upload;\r\n\r\nconst ImageInput = () => {\r\n  // const { imagePath } = useSelector((state) => state.product);\r\n\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [zoom, setZoom] = useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    console.log(croppedArea, croppedAreaPixels);\r\n  }, []);\r\n\r\n  const [upImg, setUpImg] = useState(null);\r\n\r\n  return (\r\n    <>\r\n      {!upIma && (\r\n        <Dragger {...props}>\r\n          <p className=\"ant-upload-drag-icon\">\r\n            <InboxOutlined />\r\n          </p>\r\n          <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\r\n          <p className=\"ant-upload-hint\">\r\n            Support for a single or bulk upload. Strictly prohibit from uploading company data or\r\n            other band files\r\n          </p>\r\n        </Dragger>\r\n      )}\r\n      {upImg && (\r\n        <>\r\n          <Cropper\r\n            image={upImg}\r\n            crop={crop}\r\n            zoom={zoom}\r\n            aspect={4 / 3}\r\n            onCropChange={setCrop}\r\n            onZoomChange={setZoom}\r\n            onMediaLoaded={() => {\r\n              setZoom(1);\r\n            }}\r\n            onCropcomplete={onCropComplete}\r\n          />\r\n          <Button>test</Button>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ImageInput;\r\n"]},"metadata":{},"sourceType":"module"}