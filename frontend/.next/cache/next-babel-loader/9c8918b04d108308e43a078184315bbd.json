{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button, Card } from 'antd';\nimport { useInput } from '../Generalui/CustomHooks';\nimport { useCallback } from 'react';\nimport axios from 'axios';\nimport { PASSWORD_CHANGE_REQUEST } from '../../reducers/user';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar ChangePassword = function ChangePassword(_ref) {\n  _s();\n\n  var setToggleChangePassword = _ref.setToggleChangePassword;\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      presentPassword = _useInput2[0],\n      onChangePresentPassword = _useInput2[1],\n      setPresentPassword = _useInput2[2];\n\n  var _useInput3 = useInput(),\n      _useInput4 = _slicedToArray(_useInput3, 3),\n      password = _useInput4[0],\n      onChangePassword = _useInput4[1],\n      setPassword = _useInput4[2];\n\n  var _useInput5 = useInput(),\n      _useInput6 = _slicedToArray(_useInput5, 3),\n      passwordCheck = _useInput6[0],\n      onChangePasswordCheck = _useInput6[1],\n      setChangePasswordCheck = _useInput6[2];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      session = _useSelector.session,\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  var onFinish = useCallback(function () {\n    dispatch({\n      type: PASSWORD_CHANGE_REQUEST,\n      data: {\n        id: session.id,\n        password: password\n      }\n    });\n    setToggleChangePassword(function (prev) {\n      return !prev;\n    });\n    setPresentPassword(null);\n    setPassword(null);\n    setChangePasswordCheck(null);\n  }, [password, passwordCheck]);\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Card, {\n      style: {\n        verticalAlign: 'middle'\n      },\n      children: /*#__PURE__*/_jsxs(Form, {\n        onFinish: onFinish,\n        children: [/*#__PURE__*/_jsx(Form.Item, {\n          name: \"presentPassword\",\n          validateTrigger: \"onBlur\",\n          rules: [{\n            required: true,\n            message: '기존 비밀번호를 입력해주세요'\n          }, function () {\n            return {\n              validator: function validator(rule, value) {\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var regex, result;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          regex = new RegExp(/^[A-Za-z0-9]{6,12}$/);\n\n                          if (!(value && value.match(regex))) {\n                            _context.next = 12;\n                            break;\n                          }\n\n                          _context.next = 4;\n                          return axios.post('/user/confirm/password', {\n                            id: session.id,\n                            password: value\n                          });\n\n                        case 4:\n                          result = _context.sent;\n\n                          if (result.data) {\n                            _context.next = 9;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", Promise.reject('기존 비밀번호가 일치하지 않습니다.'));\n\n                        case 9:\n                          return _context.abrupt(\"return\", Promise.resolve());\n\n                        case 10:\n                          _context.next = 13;\n                          break;\n\n                        case 12:\n                          return _context.abrupt(\"return\", Promise.reject('형식에 맞지 않는 비밀번호입니다'));\n\n                        case 13:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n              }\n            };\n          }],\n          children: /*#__PURE__*/_jsx(Input.Password, {\n            size: \"large\",\n            prefix: \"* \\uAE30\\uC874 \\uD328\\uC2A4\\uC6CC\\uB4DC\",\n            value: presentPassword,\n            onChange: onChangePresentPassword,\n            placeholder: \"\\uAE30\\uC874 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n          })\n        }), /*#__PURE__*/_jsx(Form.Item, {\n          name: \"password\",\n          rules: [{\n            required: true,\n            message: '비밀번호를 확인해주세요'\n          }, {\n            pattern: /^[A-Za-z0-9]{6,12}$/,\n            message: '비밀번호가 형식에 맞지 않습니다'\n          }],\n          children: /*#__PURE__*/_jsx(Input.Password, {\n            prefix: \"* \\uBE44\\uBC00\\uBC88\\uD638\",\n            size: \"large\",\n            value: password,\n            onChange: onChangePassword,\n            placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n          })\n        }), /*#__PURE__*/_jsx(Form.Item, {\n          name: \"passwordCheck\",\n          dependencies: ['password'],\n          rules: [{\n            required: true,\n            message: '비밀번호를 확인해 주세요'\n          }, function (_ref2) {\n            var getFieldValue = _ref2.getFieldValue;\n            return {\n              validator: function validator(rule, value) {\n                if (!value || getFieldValue('password') === value) {\n                  return Promise.resolve();\n                }\n\n                return Promise.reject('비밀번호가 일치하지 않습니다.');\n              }\n            };\n          }],\n          children: /*#__PURE__*/_jsx(Input.Password, {\n            prefix: \"* \\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n            size: \"large\",\n            value: passwordCheck,\n            onChange: onChangePasswordCheck,\n            placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n          })\n        }), /*#__PURE__*/_jsx(Button, {\n          type: 'primary',\n          htmlType: 'submit',\n          style: {\n            width: '100%'\n          },\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"\n        })]\n      })\n    })\n  });\n};\n\n_s(ChangePassword, \"QkVmmXGZwsGOI/pCl3C2GF6jwls=\", false, function () {\n  return [useDispatch, useInput, useInput, useInput, useSelector];\n});\n\n_c = ChangePassword;\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/components/Forms/ChangePassword.js"],"names":["useDispatch","useSelector","Form","Input","Button","Card","useInput","useCallback","axios","PASSWORD_CHANGE_REQUEST","ChangePassword","setToggleChangePassword","dispatch","presentPassword","onChangePresentPassword","setPresentPassword","password","onChangePassword","setPassword","passwordCheck","onChangePasswordCheck","setChangePasswordCheck","state","user","session","isLoggedIn","onFinish","type","data","id","prev","verticalAlign","required","message","validator","rule","value","regex","RegExp","match","post","result","Promise","reject","resolve","pattern","getFieldValue","width"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button, Card } from 'antd';\nimport { useInput } from '../Generalui/CustomHooks';\nimport { useCallback } from 'react';\nimport axios from 'axios';\nimport { PASSWORD_CHANGE_REQUEST } from '../../reducers/user';\n\nconst ChangePassword = ({ setToggleChangePassword }) => {\n  const dispatch = useDispatch();\n  const [presentPassword, onChangePresentPassword, setPresentPassword] = useInput();\n  const [password, onChangePassword, setPassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck, setChangePasswordCheck] = useInput();\n\n  const { session, isLoggedIn } = useSelector((state) => state.user);\n\n  const onFinish = useCallback(() => {\n    dispatch({\n      type: PASSWORD_CHANGE_REQUEST,\n      data: {\n        id: session.id,\n        password,\n      },\n    });\n    setToggleChangePassword((prev) => !prev);\n    setPresentPassword(null);\n    setPassword(null);\n    setChangePasswordCheck(null);\n  }, [password, passwordCheck]);\n\n  return (\n    <>\n      <Card style={{ verticalAlign: 'middle' }}>\n        <Form onFinish={onFinish}>\n          <Form.Item\n            name=\"presentPassword\"\n            validateTrigger=\"onBlur\"\n            rules={[\n              {\n                required: true,\n                message: '기존 비밀번호를 입력해주세요',\n              },\n              () => ({\n                async validator(rule, value) {\n                  const regex = new RegExp(/^[A-Za-z0-9]{6,12}$/);\n                  if (value && value.match(regex)) {\n                    const result = await axios.post('/user/confirm/password', {\n                      id: session.id,\n                      password: value,\n                    });\n                    if (!result.data) {\n                      // console.log(result);\n                      return Promise.reject('기존 비밀번호가 일치하지 않습니다.');\n                    } else {\n                      return Promise.resolve();\n                    }\n                  } else {\n                    return Promise.reject('형식에 맞지 않는 비밀번호입니다');\n                  }\n                },\n              }),\n            ]}\n          >\n            <Input.Password\n              size={`large`}\n              prefix={`* 기존 패스워드`}\n              value={presentPassword}\n              onChange={onChangePresentPassword}\n              placeholder=\"기존 비밀번호를 입력해주세요\"\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: '비밀번호를 확인해주세요',\n              },\n              {\n                pattern: /^[A-Za-z0-9]{6,12}$/,\n                message: '비밀번호가 형식에 맞지 않습니다',\n              },\n            ]}\n          >\n            <Input.Password\n              prefix={`* 비밀번호`}\n              size={`large`}\n              value={password}\n              onChange={onChangePassword}\n              placeholder=\"비밀번호를 입력해주세요\"\n            />\n          </Form.Item>\n          <Form.Item\n            name=\"passwordCheck\"\n            dependencies={['password']}\n            rules={[\n              {\n                required: true,\n                message: '비밀번호를 확인해 주세요',\n              },\n              ({ getFieldValue }) => ({\n                validator(rule, value) {\n                  if (!value || getFieldValue('password') === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject('비밀번호가 일치하지 않습니다.');\n                },\n              }),\n            ]}\n          >\n            <Input.Password\n              prefix={`* 비밀번호 확인`}\n              size={`large`}\n              value={passwordCheck}\n              onChange={onChangePasswordCheck}\n              placeholder=\"다시 비밀번호를 입력해주세요\"\n            />\n          </Form.Item>\n          <Button type={'primary'} htmlType={'submit'} style={{ width: '100%' }}>\n            비밀번호 변경\n          </Button>\n        </Form>\n      </Card>\n    </>\n  );\n};\n\nexport default ChangePassword;\n"]},"metadata":{},"sourceType":"module"}