{"ast":null,"code":"import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_PAYMENT_HISTORY_FAILURE, LOAD_PAYMENT_HISTORY_REQUEST, LOAD_PAYMENT_HISTORY_SUCCESS, RATING_FAILURE, RATING_SUCCESS, RATING_REQUEST, SEARCH_HISTORY_SUCCESS, SEARCH_HISTORY_FAILURE, SEARCH_HISTORY_REQUEST, PAYMENT_HISTORY_REMOVE_REQUEST, PAYMENT_HISTORY_REMOVE_FAILURE, PAYMENT_HISTORY_REMOVE_SUCCESS } from '../reducers/payment';\n\nfunction paymentHistoryAPI(data) {\n  return axios.post('/payments/load', {\n    id: data.id,\n    ShopId: data.ShopId,\n    division: data.division\n  });\n}\n\nfunction* paymentHistory(data) {\n  try {\n    const result = yield call(paymentHistoryAPI, data);\n    yield put({\n      type: LOAD_PAYMENT_HISTORY_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_PAYMENT_HISTORY_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchPaymentHistory() {\n  yield takeLatest(LOAD_PAYMENT_HISTORY_REQUEST, paymentHistory);\n}\n\nfunction ratingAPI({\n  data\n}) {\n  return axios.post('/payments/rating', {\n    PaymentsId: data.PaymentsId,\n    UserId: data.UserId,\n    ProductId: data.ProductId,\n    rate: data.rate\n  });\n}\n\nfunction* rating(data) {\n  try {\n    const result = yield call(ratingAPI, data);\n    yield put({\n      type: RATING_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: RATING_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchRating() {\n  yield takeLatest(RATING_REQUEST, rating);\n}\n\nfunction searchHistoryAPI({\n  data\n}) {\n  console.log(data);\n\n  if (data.division == true) {\n    return axios.post('/payments/search/shop', {\n      data\n    });\n  } else {\n    return axios.post('/payments/search/user', {\n      data\n    });\n  }\n}\n\nfunction* searchHistory(data) {\n  try {\n    const result = yield call(searchHistoryAPI, data);\n    yield put({\n      type: SEARCH_HISTORY_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: SEARCH_HISTORY_FAILURE\n    });\n  }\n}\n\nfunction* watchSearchHistory() {\n  yield takeLatest(SEARCH_HISTORY_REQUEST, searchHistory);\n}\n\nfunction cancelPaymentAPI({\n  id,\n  UserId,\n  division,\n  imp_uid,\n  amount\n}) {\n  return axios.post('/payments/cancel', {\n    id,\n    UserId,\n    division,\n    imp_uid,\n    amount\n  });\n}\n\nfunction* cancelPayment(action) {\n  try {\n    const result = yield call(cancelPaymentAPI, action.data);\n    console.log(result.data);\n    yield put({\n      type: PAYMENT_HISTORY_REMOVE_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: PAYMENT_HISTORY_REMOVE_FAILURE,\n      error: err\n    });\n  }\n}\n\nfunction* watchCancelPayment() {\n  yield takeLatest(PAYMENT_HISTORY_REMOVE_REQUEST, cancelPayment);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchPaymentHistory), fork(watchRating), fork(watchSearchHistory), fork(watchCancelPayment)]);\n}","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/sagas/payment.js"],"names":["fork","takeEvery","all","put","call","takeLatest","axios","LOAD_PAYMENT_HISTORY_FAILURE","LOAD_PAYMENT_HISTORY_REQUEST","LOAD_PAYMENT_HISTORY_SUCCESS","RATING_FAILURE","RATING_SUCCESS","RATING_REQUEST","SEARCH_HISTORY_SUCCESS","SEARCH_HISTORY_FAILURE","SEARCH_HISTORY_REQUEST","PAYMENT_HISTORY_REMOVE_REQUEST","PAYMENT_HISTORY_REMOVE_FAILURE","PAYMENT_HISTORY_REMOVE_SUCCESS","paymentHistoryAPI","data","post","id","ShopId","division","paymentHistory","result","type","e","error","watchPaymentHistory","ratingAPI","PaymentsId","UserId","ProductId","rate","rating","console","log","watchRating","searchHistoryAPI","searchHistory","watchSearchHistory","cancelPaymentAPI","imp_uid","amount","cancelPayment","action","err","watchCancelPayment","userSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,EAA0CC,UAA1C,QAA4D,oBAA5D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,4BADF,EAEEC,4BAFF,EAGEC,4BAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,sBAPF,EAQEC,sBARF,EASEC,sBATF,EAUEC,8BAVF,EAWEC,8BAXF,EAYEC,8BAZF,QAaO,qBAbP;;AAeA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,SAAOd,KAAK,CAACe,IAAN,CAAW,gBAAX,EAA6B;AAClCC,IAAAA,EAAE,EAAEF,IAAI,CAACE,EADyB;AAElCC,IAAAA,MAAM,EAAEH,IAAI,CAACG,MAFqB;AAGlCC,IAAAA,QAAQ,EAAEJ,IAAI,CAACI;AAHmB,GAA7B,CAAP;AAKD;;AAED,UAAUC,cAAV,CAAyBL,IAAzB,EAA+B;AAC7B,MAAI;AACF,UAAMM,MAAM,GAAG,MAAMtB,IAAI,CAACe,iBAAD,EAAoBC,IAApB,CAAzB;AACA,UAAMjB,GAAG,CAAC;AACRwB,MAAAA,IAAI,EAAElB,4BADE;AAERW,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOQ,CAAP,EAAU;AACV,UAAMzB,GAAG,CAAC;AAAEwB,MAAAA,IAAI,EAAEpB,4BAAR;AAAsCsB,MAAAA,KAAK,EAAED;AAA7C,KAAD,CAAT;AACD;AACF;;AAED,UAAUE,mBAAV,GAAgC;AAC9B,QAAMzB,UAAU,CAACG,4BAAD,EAA+BiB,cAA/B,CAAhB;AACD;;AAED,SAASM,SAAT,CAAmB;AAAEX,EAAAA;AAAF,CAAnB,EAA6B;AAC3B,SAAOd,KAAK,CAACe,IAAN,CAAW,kBAAX,EAA+B;AACpCW,IAAAA,UAAU,EAAEZ,IAAI,CAACY,UADmB;AAEpCC,IAAAA,MAAM,EAAEb,IAAI,CAACa,MAFuB;AAGpCC,IAAAA,SAAS,EAAEd,IAAI,CAACc,SAHoB;AAIpCC,IAAAA,IAAI,EAAEf,IAAI,CAACe;AAJyB,GAA/B,CAAP;AAMD;;AAED,UAAUC,MAAV,CAAiBhB,IAAjB,EAAuB;AACrB,MAAI;AACF,UAAMM,MAAM,GAAG,MAAMtB,IAAI,CAAC2B,SAAD,EAAYX,IAAZ,CAAzB;AACA,UAAMjB,GAAG,CAAC;AAAEwB,MAAAA,IAAI,EAAEhB,cAAR;AAAwBS,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAArC,KAAD,CAAT;AACD,GAHD,CAGE,OAAOQ,CAAP,EAAU;AACVS,IAAAA,OAAO,CAACC,GAAR,CAAYV,CAAZ;AACA,UAAMzB,GAAG,CAAC;AAAEwB,MAAAA,IAAI,EAAEjB,cAAR;AAAwBmB,MAAAA,KAAK,EAAED;AAA/B,KAAD,CAAT;AACD;AACF;;AAED,UAAUW,WAAV,GAAwB;AACtB,QAAMlC,UAAU,CAACO,cAAD,EAAiBwB,MAAjB,CAAhB;AACD;;AAED,SAASI,gBAAT,CAA0B;AAAEpB,EAAAA;AAAF,CAA1B,EAAoC;AAClCiB,EAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;;AACA,MAAIA,IAAI,CAACI,QAAL,IAAiB,IAArB,EAA2B;AACzB,WAAOlB,KAAK,CAACe,IAAN,CAAW,uBAAX,EAAoC;AAAED,MAAAA;AAAF,KAApC,CAAP;AACD,GAFD,MAEO;AACL,WAAOd,KAAK,CAACe,IAAN,CAAW,uBAAX,EAAoC;AAAED,MAAAA;AAAF,KAApC,CAAP;AACD;AACF;;AAED,UAAUqB,aAAV,CAAwBrB,IAAxB,EAA8B;AAC5B,MAAI;AACF,UAAMM,MAAM,GAAG,MAAMtB,IAAI,CAACoC,gBAAD,EAAmBpB,IAAnB,CAAzB;AACA,UAAMjB,GAAG,CAAC;AAAEwB,MAAAA,IAAI,EAAEd,sBAAR;AAAgCO,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAA7C,KAAD,CAAT;AACD,GAHD,CAGE,OAAOQ,CAAP,EAAU;AACVS,IAAAA,OAAO,CAACC,GAAR,CAAYV,CAAZ;AACA,UAAMzB,GAAG,CAAC;AAAEwB,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAT;AACD;AACF;;AAED,UAAU4B,kBAAV,GAA+B;AAC7B,QAAMrC,UAAU,CAACU,sBAAD,EAAyB0B,aAAzB,CAAhB;AACD;;AAED,SAASE,gBAAT,CAA0B;AAAErB,EAAAA,EAAF;AAAMW,EAAAA,MAAN;AAAcT,EAAAA,QAAd;AAAwBoB,EAAAA,OAAxB;AAAiCC,EAAAA;AAAjC,CAA1B,EAAqE;AACnE,SAAOvC,KAAK,CAACe,IAAN,CAAW,kBAAX,EAA+B;AAAEC,IAAAA,EAAF;AAAMW,IAAAA,MAAN;AAAcT,IAAAA,QAAd;AAAwBoB,IAAAA,OAAxB;AAAiCC,IAAAA;AAAjC,GAA/B,CAAP;AACD;;AAED,UAAUC,aAAV,CAAwBC,MAAxB,EAAgC;AAC9B,MAAI;AACF,UAAMrB,MAAM,GAAG,MAAMtB,IAAI,CAACuC,gBAAD,EAAmBI,MAAM,CAAC3B,IAA1B,CAAzB;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAM,CAACN,IAAnB;AACA,UAAMjB,GAAG,CAAC;AAAEwB,MAAAA,IAAI,EAAET,8BAAR;AAAwCE,MAAAA,IAAI,EAAEM,MAAM,CAACN;AAArD,KAAD,CAAT;AACD,GAJD,CAIE,OAAO4B,GAAP,EAAY;AACZX,IAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACA,UAAM7C,GAAG,CAAC;AAAEwB,MAAAA,IAAI,EAAEV,8BAAR;AAAwCY,MAAAA,KAAK,EAAEmB;AAA/C,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,kBAAV,GAA+B;AAC7B,QAAM5C,UAAU,CAACW,8BAAD,EAAiC8B,aAAjC,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAMhD,GAAG,CAAC,CACRF,IAAI,CAAC8B,mBAAD,CADI,EAER9B,IAAI,CAACuC,WAAD,CAFI,EAGRvC,IAAI,CAAC0C,kBAAD,CAHI,EAIR1C,IAAI,CAACiD,kBAAD,CAJI,CAAD,CAAT;AAMD","sourcesContent":["import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  LOAD_PAYMENT_HISTORY_FAILURE,\r\n  LOAD_PAYMENT_HISTORY_REQUEST,\r\n  LOAD_PAYMENT_HISTORY_SUCCESS,\r\n  RATING_FAILURE,\r\n  RATING_SUCCESS,\r\n  RATING_REQUEST,\r\n  SEARCH_HISTORY_SUCCESS,\r\n  SEARCH_HISTORY_FAILURE,\r\n  SEARCH_HISTORY_REQUEST,\r\n  PAYMENT_HISTORY_REMOVE_REQUEST,\r\n  PAYMENT_HISTORY_REMOVE_FAILURE,\r\n  PAYMENT_HISTORY_REMOVE_SUCCESS,\r\n} from '../reducers/payment';\r\n\r\nfunction paymentHistoryAPI(data) {\r\n  return axios.post('/payments/load', {\r\n    id: data.id,\r\n    ShopId: data.ShopId,\r\n    division: data.division,\r\n  });\r\n}\r\n\r\nfunction* paymentHistory(data) {\r\n  try {\r\n    const result = yield call(paymentHistoryAPI, data);\r\n    yield put({\r\n      type: LOAD_PAYMENT_HISTORY_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({ type: LOAD_PAYMENT_HISTORY_FAILURE, error: e });\r\n  }\r\n}\r\n\r\nfunction* watchPaymentHistory() {\r\n  yield takeLatest(LOAD_PAYMENT_HISTORY_REQUEST, paymentHistory);\r\n}\r\n\r\nfunction ratingAPI({ data }) {\r\n  return axios.post('/payments/rating', {\r\n    PaymentsId: data.PaymentsId,\r\n    UserId: data.UserId,\r\n    ProductId: data.ProductId,\r\n    rate: data.rate,\r\n  });\r\n}\r\n\r\nfunction* rating(data) {\r\n  try {\r\n    const result = yield call(ratingAPI, data);\r\n    yield put({ type: RATING_SUCCESS, data: result.data });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({ type: RATING_FAILURE, error: e });\r\n  }\r\n}\r\n\r\nfunction* watchRating() {\r\n  yield takeLatest(RATING_REQUEST, rating);\r\n}\r\n\r\nfunction searchHistoryAPI({ data }) {\r\n  console.log(data);\r\n  if (data.division == true) {\r\n    return axios.post('/payments/search/shop', { data });\r\n  } else {\r\n    return axios.post('/payments/search/user', { data });\r\n  }\r\n}\r\n\r\nfunction* searchHistory(data) {\r\n  try {\r\n    const result = yield call(searchHistoryAPI, data);\r\n    yield put({ type: SEARCH_HISTORY_SUCCESS, data: result.data });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({ type: SEARCH_HISTORY_FAILURE });\r\n  }\r\n}\r\n\r\nfunction* watchSearchHistory() {\r\n  yield takeLatest(SEARCH_HISTORY_REQUEST, searchHistory);\r\n}\r\n\r\nfunction cancelPaymentAPI({ id, UserId, division, imp_uid, amount }) {\r\n  return axios.post('/payments/cancel', { id, UserId, division, imp_uid, amount });\r\n}\r\n\r\nfunction* cancelPayment(action) {\r\n  try {\r\n    const result = yield call(cancelPaymentAPI, action.data);\r\n    console.log(result.data);\r\n    yield put({ type: PAYMENT_HISTORY_REMOVE_SUCCESS, data: result.data });\r\n  } catch (err) {\r\n    console.log(err);\r\n    yield put({ type: PAYMENT_HISTORY_REMOVE_FAILURE, error: err });\r\n  }\r\n}\r\n\r\nfunction* watchCancelPayment() {\r\n  yield takeLatest(PAYMENT_HISTORY_REMOVE_REQUEST, cancelPayment);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchPaymentHistory),\r\n    fork(watchRating),\r\n    fork(watchSearchHistory),\r\n    fork(watchCancelPayment),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}