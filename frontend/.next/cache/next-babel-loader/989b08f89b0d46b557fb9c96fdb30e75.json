{"ast":null,"code":"import StockList from \"../../../components/Generalui/StockList\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useRouter } from \"next/router\";\nimport { PAGE_CHANGE_SUCCESS } from \"../../../reducers/admin\";\nimport { ADD_STOCK_SUCCESS, LOAD_LIST_REQUEST, SOLD_STOCK_FAILURE, SOLD_STOCK_SUCCESS, UPDATE_STOCK_SUCCESS } from \"../../../reducers/stock\";\nimport { io } from \"socket.io-client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nconst Store = () => {\n  const dispatch = useDispatch();\n  const {\n    query\n  } = useRouter();\n  const {\n    0: IMP,\n    1: setIMP\n  } = useState(null);\n  useEffect(() => {\n    dispatch({\n      type: PAGE_CHANGE_SUCCESS,\n      data: \"store\"\n    });\n  });\n  useEffect(() => {\n    const {\n      IMP\n    } = window;\n    setIMP(IMP);\n    dispatch({\n      type: LOAD_LIST_REQUEST,\n      data: {\n        ShopId: query.ShopId\n      }\n    });\n  }, []);\n  useEffect(() => {\n    const socket = io(process.env.BACKEND_IP, {\n      cors: {\n        origin: true\n      }\n    });\n    socket.on(\"connection\", data => {\n      return console.log(data);\n    });\n    socket.emit(\"client:id\", {\n      id: query.ShopId\n    });\n    socket.on(\"server:id\", data => {\n      return console.log(data);\n    });\n    socket.on(\"server:add\", data => {\n      console.log(data);\n      return dispatch({\n        type: ADD_STOCK_SUCCESS,\n        data\n      });\n    });\n    socket.on(\"server:sold\", data => {\n      return dispatch({\n        type: SOLD_STOCK_SUCCESS,\n        data\n      });\n    });\n    socket.on(\"server:sold:error\", data => {\n      return dispatch({\n        type: SOLD_STOCK_FAILURE,\n        data\n      });\n    });\n    socket.on(\"server:update\", data => {\n      return dispatch({\n        type: UPDATE_STOCK_SUCCESS,\n        data\n      });\n    });\n  });\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(StockList, {})\n  });\n};\n\nexport default Store;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/Dev/project1/frontend/pages/store/[ShopId]/index.js"],"names":["StockList","useState","useEffect","useDispatch","useRouter","PAGE_CHANGE_SUCCESS","ADD_STOCK_SUCCESS","LOAD_LIST_REQUEST","SOLD_STOCK_FAILURE","SOLD_STOCK_SUCCESS","UPDATE_STOCK_SUCCESS","io","Store","dispatch","query","IMP","setIMP","type","data","window","ShopId","socket","process","env","BACKEND_IP","cors","origin","on","console","log","emit","id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,yCAAtB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,kBAHF,EAIEC,kBAJF,EAKEC,oBALF,QAMO,yBANP;AAOA,SAASC,EAAT,QAAmB,kBAAnB;;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAYV,SAAS,EAA3B;AACA,QAAM;AAAA,OAACW,GAAD;AAAA,OAAMC;AAAN,MAAgBf,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEZ,mBAAR;AAA6Ba,MAAAA,IAAI,EAAE;AAAnC,KAAD,CAAR;AACD,GAFQ,CAAT;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEa,MAAAA;AAAF,QAAUI,MAAhB;AACAH,IAAAA,MAAM,CAACD,GAAD,CAAN;AACAF,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEV,iBADC;AAEPW,MAAAA,IAAI,EAAE;AAAEE,QAAAA,MAAM,EAAEN,KAAK,CAACM;AAAhB;AAFC,KAAD,CAAR;AAID,GAPQ,EAON,EAPM,CAAT;AASAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,MAAM,GAAGV,EAAE,CAACW,OAAO,CAACC,GAAR,CAAYC,UAAb,EAAyB;AACxCC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV;AADkC,KAAzB,CAAjB;AAIAL,IAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAyBT,IAAD,IAAU;AAChC,aAAOU,OAAO,CAACC,GAAR,CAAYX,IAAZ,CAAP;AACD,KAFD;AAIAG,IAAAA,MAAM,CAACS,IAAP,CAAY,WAAZ,EAAyB;AAAEC,MAAAA,EAAE,EAAEjB,KAAK,CAACM;AAAZ,KAAzB;AAEAC,IAAAA,MAAM,CAACM,EAAP,CAAU,WAAV,EAAwBT,IAAD,IAAU;AAC/B,aAAOU,OAAO,CAACC,GAAR,CAAYX,IAAZ,CAAP;AACD,KAFD;AAIAG,IAAAA,MAAM,CAACM,EAAP,CAAU,YAAV,EAAyBT,IAAD,IAAU;AAChCU,MAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACA,aAAOL,QAAQ,CAAC;AACdI,QAAAA,IAAI,EAAEX,iBADQ;AAEdY,QAAAA;AAFc,OAAD,CAAf;AAID,KAND;AAOAG,IAAAA,MAAM,CAACM,EAAP,CAAU,aAAV,EAA0BT,IAAD,IAAU;AACjC,aAAOL,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAER,kBAAR;AAA4BS,QAAAA;AAA5B,OAAD,CAAf;AACD,KAFD;AAIAG,IAAAA,MAAM,CAACM,EAAP,CAAU,mBAAV,EAAgCT,IAAD,IAAU;AACvC,aAAOL,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAET,kBAAR;AAA4BU,QAAAA;AAA5B,OAAD,CAAf;AACD,KAFD;AAIAG,IAAAA,MAAM,CAACM,EAAP,CAAU,eAAV,EAA4BT,IAAD,IAAU;AACnC,aAAOL,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEP,oBAAR;AAA8BQ,QAAAA;AAA9B,OAAD,CAAf;AACD,KAFD;AAGD,GAjCQ,CAAT;AAmCA,sBACE;AAAA,2BACE,KAAC,SAAD;AADF,IADF;AAKD,CA1DD;;AA4DA,eAAeN,KAAf","sourcesContent":["import StockList from \"../../../components/Generalui/StockList\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useRouter } from \"next/router\";\r\nimport { PAGE_CHANGE_SUCCESS } from \"../../../reducers/admin\";\r\nimport {\r\n  ADD_STOCK_SUCCESS,\r\n  LOAD_LIST_REQUEST,\r\n  SOLD_STOCK_FAILURE,\r\n  SOLD_STOCK_SUCCESS,\r\n  UPDATE_STOCK_SUCCESS,\r\n} from \"../../../reducers/stock\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nconst Store = () => {\r\n  const dispatch = useDispatch();\r\n  const { query } = useRouter();\r\n  const [IMP, setIMP] = useState(null);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: PAGE_CHANGE_SUCCESS, data: \"store\" });\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { IMP } = window;\r\n    setIMP(IMP);\r\n    dispatch({\r\n      type: LOAD_LIST_REQUEST,\r\n      data: { ShopId: query.ShopId },\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const socket = io(process.env.BACKEND_IP, {\r\n      cors: { origin: true },\r\n    });\r\n\r\n    socket.on(\"connection\", (data) => {\r\n      return console.log(data);\r\n    });\r\n\r\n    socket.emit(\"client:id\", { id: query.ShopId });\r\n\r\n    socket.on(\"server:id\", (data) => {\r\n      return console.log(data);\r\n    });\r\n\r\n    socket.on(\"server:add\", (data) => {\r\n      console.log(data);\r\n      return dispatch({\r\n        type: ADD_STOCK_SUCCESS,\r\n        data,\r\n      });\r\n    });\r\n    socket.on(\"server:sold\", (data) => {\r\n      return dispatch({ type: SOLD_STOCK_SUCCESS, data });\r\n    });\r\n\r\n    socket.on(\"server:sold:error\", (data) => {\r\n      return dispatch({ type: SOLD_STOCK_FAILURE, data });\r\n    });\r\n\r\n    socket.on(\"server:update\", (data) => {\r\n      return dispatch({ type: UPDATE_STOCK_SUCCESS, data });\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <StockList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Store;\r\n"]},"metadata":{},"sourceType":"module"}