{"ast":null,"code":"import axios from \"axios\";\nimport { all, put, fork, call, takeLatest } from \"redux-saga/effects\";\nimport { LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE, LOAD_PRODUCTS_REQUEST, LOAD_PRODUCT_FAILURE_TEST, LOAD_PRODUCT_SUCCESS_TEST, LOAD_PRODUCT_REQUEST_TEST } from \"../reducers/menu\";\n\nfunction loadProductApi(data) {\n  return axios.post(`/menu`, {\n    data\n  });\n}\n\nfunction* loadProducts({\n  data\n}) {\n  try {\n    const result = yield call(loadProductApi, data);\n    yield put({\n      type: LOAD_PRODUCTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_PRODUCTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadProducts() {\n  yield takeLatest(LOAD_PRODUCTS_REQUEST, loadProducts);\n}\n\nfunction loadProductTestAPI(data) {\n  return axios.post(\"/products/load/test\", data);\n}\n\nfunction* loadProductTest(action) {\n  try {\n    const result = yield call(loadProductTestAPI, action.data);\n    yield put({\n      type: LOAD_PRODUCT_SUCCESS_TEST,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_PRODUCT_FAILURE_TEST,\n      error: err\n    });\n  }\n}\n\nfunction* watchLoadProductTest() {\n  yield takeLatest(LOAD_PRODUCT_REQUEST_TEST, loadProductTest);\n}\n\nexport default function* productsSaga() {\n  yield all([fork(watchLoadProducts), fork(watchLoadProductTest)]);\n}","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/sagas/menu.js"],"names":["axios","all","put","fork","call","takeLatest","LOAD_PRODUCTS_SUCCESS","LOAD_PRODUCTS_FAILURE","LOAD_PRODUCTS_REQUEST","LOAD_PRODUCT_FAILURE_TEST","LOAD_PRODUCT_SUCCESS_TEST","LOAD_PRODUCT_REQUEST_TEST","loadProductApi","data","post","loadProducts","result","type","e","console","log","error","watchLoadProducts","loadProductTestAPI","loadProductTest","action","err","watchLoadProductTest","productsSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,qBAHF,EAIEC,yBAJF,EAKEC,yBALF,EAMEC,yBANF,QAOO,kBAPP;;AASA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B,SAAOb,KAAK,CAACc,IAAN,CAAY,OAAZ,EAAoB;AAAED,IAAAA;AAAF,GAApB,CAAP;AACD;;AAED,UAAUE,YAAV,CAAuB;AAAEF,EAAAA;AAAF,CAAvB,EAAiC;AAC/B,MAAI;AACF,UAAMG,MAAM,GAAG,MAAMZ,IAAI,CAACQ,cAAD,EAAiBC,IAAjB,CAAzB;AACA,UAAMX,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEX,qBADE;AAERO,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOK,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMhB,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEV,qBADE;AAERc,MAAAA,KAAK,EAAEH;AAFC,KAAD,CAAT;AAID;AACF;;AAED,UAAUI,iBAAV,GAA8B;AAC5B,QAAMjB,UAAU,CAACG,qBAAD,EAAwBO,YAAxB,CAAhB;AACD;;AAED,SAASQ,kBAAT,CAA4BV,IAA5B,EAAkC;AAChC,SAAOb,KAAK,CAACc,IAAN,CAAW,qBAAX,EAAkCD,IAAlC,CAAP;AACD;;AAED,UAAUW,eAAV,CAA0BC,MAA1B,EAAkC;AAChC,MAAI;AACF,UAAMT,MAAM,GAAG,MAAMZ,IAAI,CAACmB,kBAAD,EAAqBE,MAAM,CAACZ,IAA5B,CAAzB;AACA,UAAMX,GAAG,CAAC;AAAEe,MAAAA,IAAI,EAAEP,yBAAR;AAAmCG,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAAhD,KAAD,CAAT;AACD,GAHD,CAGE,OAAOa,GAAP,EAAY;AACZP,IAAAA,OAAO,CAACE,KAAR,CAAcK,GAAd;AACA,UAAMxB,GAAG,CAAC;AAAEe,MAAAA,IAAI,EAAER,yBAAR;AAAmCY,MAAAA,KAAK,EAAEK;AAA1C,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,oBAAV,GAAiC;AAC/B,QAAMtB,UAAU,CAACM,yBAAD,EAA4Ba,eAA5B,CAAhB;AACD;;AAED,eAAe,UAAUI,YAAV,GAAyB;AACtC,QAAM3B,GAAG,CAAC,CAACE,IAAI,CAACmB,iBAAD,CAAL,EAA0BnB,IAAI,CAACwB,oBAAD,CAA9B,CAAD,CAAT;AACD","sourcesContent":["import axios from \"axios\";\nimport { all, put, fork, call, takeLatest } from \"redux-saga/effects\";\nimport {\n  LOAD_PRODUCTS_SUCCESS,\n  LOAD_PRODUCTS_FAILURE,\n  LOAD_PRODUCTS_REQUEST,\n  LOAD_PRODUCT_FAILURE_TEST,\n  LOAD_PRODUCT_SUCCESS_TEST,\n  LOAD_PRODUCT_REQUEST_TEST,\n} from \"../reducers/menu\";\n\nfunction loadProductApi(data) {\n  return axios.post(`/menu`, { data });\n}\n\nfunction* loadProducts({ data }) {\n  try {\n    const result = yield call(loadProductApi, data);\n    yield put({\n      type: LOAD_PRODUCTS_SUCCESS,\n      data: result.data,\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_PRODUCTS_FAILURE,\n      error: e,\n    });\n  }\n}\n\nfunction* watchLoadProducts() {\n  yield takeLatest(LOAD_PRODUCTS_REQUEST, loadProducts);\n}\n\nfunction loadProductTestAPI(data) {\n  return axios.post(\"/products/load/test\", data);\n}\n\nfunction* loadProductTest(action) {\n  try {\n    const result = yield call(loadProductTestAPI, action.data);\n    yield put({ type: LOAD_PRODUCT_SUCCESS_TEST, data: result.data });\n  } catch (err) {\n    console.error(err);\n    yield put({ type: LOAD_PRODUCT_FAILURE_TEST, error: err });\n  }\n}\n\nfunction* watchLoadProductTest() {\n  yield takeLatest(LOAD_PRODUCT_REQUEST_TEST, loadProductTest);\n}\n\nexport default function* productsSaga() {\n  yield all([fork(watchLoadProducts), fork(watchLoadProductTest)]);\n}\n"]},"metadata":{},"sourceType":"module"}