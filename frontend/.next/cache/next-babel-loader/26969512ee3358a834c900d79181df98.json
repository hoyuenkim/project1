{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hoyuen\\\\Documents\\\\project\\\\project1\\\\frontend\\\\components\\\\Generalui\\\\EditProduct.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useInput } from './CustomHooks';\nimport { useState } from 'react';\nimport { Form, Input, Button, Upload, Select, Card } from 'antd';\nimport ImgCrop from 'antd-img-crop';\nimport { useDispatch } from 'react-redux';\nimport { GiftOutlined, DollarOutlined, ProfileOutlined } from '@ant-design/icons';\nimport { EDIT_PRODUCT_REQUEST } from '../../reducers/shop';\n\nconst EditProduct = ({\n  product,\n  setEdit,\n  setProduct,\n  categories\n}) => {\n  const dispatch = useDispatch();\n  const imageList = [];\n  {\n    product && product.Images.map(async (v, i) => {\n      return imageList.push({\n        uid: i,\n        name: v.url,\n        status: 'done',\n        url: `http://127.0.0.1:3065/uploads/${v.url}`,\n        ImageIds: v.id\n      });\n    });\n  }\n  const [title, onChangeTitle] = useInput(product && product.title);\n  const [price, onChangePrice] = useInput(product && product.price);\n  const [description, onChangeDecription] = useInput(product && product.description);\n  const {\n    0: fileList,\n    1: setFileList\n  } = useState(imageList);\n  const {\n    0: fileError,\n    1: setFileError\n  } = useState(false);\n  const {\n    0: category,\n    1: setCategory\n  } = useState(product && product.category);\n\n  const onImagesChange = ({\n    fileList: newFileList\n  }) => {\n    setFileList(newFileList);\n    setFileError(false);\n  };\n\n  const onChangeCategory = e => {\n    setCategory(e);\n  };\n\n  const onPreview = async file => {\n    let src = file.url;\n\n    if (!src) {\n      src = await new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj);\n\n        reader.onload = () => resolve(reader.result);\n      });\n    }\n\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow.document.write(image.outerHTML);\n  };\n\n  const onFinish = () => {\n    const formData = new FormData();\n    formData.append('id', product.id);\n    formData.append('title', title);\n    formData.append('price', price);\n    formData.append('description', description);\n    formData.append('CategoryId', category);\n    fileList.forEach(({\n      originFileObj,\n      ImageIds\n    }) => {\n      if (ImageIds) formData.append('ImageIds', ImageIds);\n      if (originFileObj) formData.append('files', originFileObj);\n    });\n\n    if (fileList.length > 0) {\n      dispatch({\n        type: EDIT_PRODUCT_REQUEST,\n        formData\n      });\n      setEdit(false);\n      setProduct(null);\n    } else {\n      return setFileError(true);\n    }\n  };\n\n  return __jsx(Form, {\n    encType: 'multipart/form-data',\n    onFinish: onFinish,\n    val: true,\n    initialValues: {\n      title: product && product.title,\n      price: product && product.price,\n      description: product && product.description\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Item, {\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: '상품명을 입력해주세요'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    name: \"title\",\n    prefix: __jsx(GiftOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 37\n      }\n    }),\n    size: 'large',\n    onChange: onChangeTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"price\",\n    rules: [{\n      required: true,\n      message: '가격을 입력해주세요'\n    }, {\n      pattern: /^[0-9]/g,\n      message: '숫자를 입력해주세요'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    name: \"price\",\n    prefix: __jsx(DollarOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }),\n    size: 'large',\n    value: price,\n    onChange: onChangePrice,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"description\",\n    label: \"\\uC124\\uBA85\",\n    rules: [{\n      required: true,\n      message: '상세내역을 입력해주세요'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    name: \"description\",\n    prefix: __jsx(ProfileOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }),\n    size: 'large',\n    placeholder: '상세사항을 입력해주세요',\n    maxLength: 200,\n    onChange: onChangeDecription,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"category\",\n    label: \"\\uCE74\\uD14C\\uACE0\\uB9AC\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    onChange: onChangeCategory,\n    defaultValue: product.Category.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, categories.map((category, index) => __jsx(Select.Option, {\n    key: index,\n    value: category.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, category.name)))), __jsx(Card, {\n    title: `image`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, __jsx(ImgCrop, {\n    rotate: true,\n    aspect: 4 / 3,\n    name: 'image',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, __jsx(Upload, {\n    action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n    listType: \"picture-card\",\n    fileList: fileList,\n    onChange: onImagesChange,\n    onPreview: onPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, fileList.length < 5 && '+ Upload')), fileError && __jsx(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 23\n    }\n  }, \"\\uD30C\\uC77C\\uC744 \\uC5C5\\uB85C\\uB4DC \\uD574\\uC8FC\\uC138\\uC694\")), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: {\n      width: `100%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, \"\\uC81C\\uCD9C\"));\n};\n\nexport default EditProduct;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/components/Generalui/EditProduct.js"],"names":["useInput","useState","Form","Input","Button","Upload","Select","Card","ImgCrop","useDispatch","GiftOutlined","DollarOutlined","ProfileOutlined","EDIT_PRODUCT_REQUEST","EditProduct","product","setEdit","setProduct","categories","dispatch","imageList","Images","map","v","i","push","uid","name","url","status","ImageIds","id","title","onChangeTitle","price","onChangePrice","description","onChangeDecription","fileList","setFileList","fileError","setFileError","category","setCategory","onImagesChange","newFileList","onChangeCategory","e","onPreview","file","src","Promise","resolve","reader","FileReader","readAsDataURL","originFileObj","onload","result","image","Image","imgWindow","window","open","document","write","outerHTML","onFinish","formData","FormData","append","forEach","length","type","required","message","pattern","Category","index","color","width"],"mappings":"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","sourcesContent":["import { useInput } from './CustomHooks';\r\nimport { useState } from 'react';\r\nimport { Form, Input, Button, Upload, Select, Card } from 'antd';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport { useDispatch } from 'react-redux';\r\nimport { GiftOutlined, DollarOutlined, ProfileOutlined } from '@ant-design/icons';\r\nimport { EDIT_PRODUCT_REQUEST } from '../../reducers/shop';\r\n\r\nconst EditProduct = ({ product, setEdit, setProduct, categories }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const imageList = [];\r\n\r\n  {\r\n    product &&\r\n      product.Images.map(async (v, i) => {\r\n        return imageList.push({\r\n          uid: i,\r\n          name: v.url,\r\n          status: 'done',\r\n          url: `http://127.0.0.1:3065/uploads/${v.url}`,\r\n          ImageIds: v.id,\r\n        });\r\n      });\r\n  }\r\n\r\n  const [title, onChangeTitle] = useInput(product && product.title);\r\n  const [price, onChangePrice] = useInput(product && product.price);\r\n  const [description, onChangeDecription] = useInput(product && product.description);\r\n  const [fileList, setFileList] = useState(imageList);\r\n  const [fileError, setFileError] = useState(false);\r\n  const [category, setCategory] = useState(product && product.category);\r\n\r\n  const onImagesChange = ({ fileList: newFileList }) => {\r\n    setFileList(newFileList);\r\n    setFileError(false);\r\n  };\r\n\r\n  const onChangeCategory = (e) => {\r\n    setCategory(e);\r\n  };\r\n\r\n  const onPreview = async (file) => {\r\n    let src = file.url;\r\n    if (!src) {\r\n      src = await new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file.originFileObj);\r\n        reader.onload = () => resolve(reader.result);\r\n      });\r\n    }\r\n    const image = new Image();\r\n    image.src = src;\r\n    const imgWindow = window.open(src);\r\n    imgWindow.document.write(image.outerHTML);\r\n  };\r\n\r\n  const onFinish = () => {\r\n    const formData = new FormData();\r\n    formData.append('id', product.id);\r\n    formData.append('title', title);\r\n    formData.append('price', price);\r\n    formData.append('description', description);\r\n    formData.append('CategoryId', category);\r\n    fileList.forEach(({ originFileObj, ImageIds }) => {\r\n      if (ImageIds) formData.append('ImageIds', ImageIds);\r\n      if (originFileObj) formData.append('files', originFileObj);\r\n    });\r\n    if (fileList.length > 0) {\r\n      dispatch({\r\n        type: EDIT_PRODUCT_REQUEST,\r\n        formData,\r\n      });\r\n      setEdit(false);\r\n      setProduct(null);\r\n    } else {\r\n      return setFileError(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      encType={'multipart/form-data'}\r\n      onFinish={onFinish}\r\n      val\r\n      initialValues={{\r\n        title: product && product.title,\r\n        price: product && product.price,\r\n        description: product && product.description,\r\n      }}\r\n    >\r\n      <Form.Item name=\"title\" rules={[{ required: true, message: '상품명을 입력해주세요' }]} >\r\n        <Input name=\"title\" prefix={<GiftOutlined />} size={'large'} onChange={onChangeTitle} />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"price\"\r\n        rules={[\r\n          { required: true, message: '가격을 입력해주세요' },\r\n          { pattern: /^[0-9]/g, message: '숫자를 입력해주세요' },\r\n        ]}\r\n      >\r\n        <Input\r\n          name=\"price\"\r\n          prefix={<DollarOutlined />}\r\n          size={'large'}\r\n          value={price}\r\n          onChange={onChangePrice}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item\r\n        name=\"description\"\r\n        label=\"설명\"\r\n        rules={[{ required: true, message: '상세내역을 입력해주세요' }]}\r\n      >\r\n        <Input.TextArea\r\n          name=\"description\"\r\n          prefix={<ProfileOutlined />}\r\n          size={'large'}\r\n          placeholder={'상세사항을 입력해주세요'}\r\n          maxLength={200}\r\n          onChange={onChangeDecription}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item name=\"category\" label=\"카테고리\">\r\n        <Select onChange={onChangeCategory} defaultValue={product.Category.id}>\r\n          {categories.map((category, index) => (\r\n            <Select.Option key={index} value={category.id}>\r\n              {category.name}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item>\r\n      <Card title={`image`}>\r\n        <ImgCrop rotate aspect={4 / 3} name={'image'}>\r\n          <Upload\r\n            action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n            listType=\"picture-card\"\r\n            fileList={fileList}\r\n            onChange={onImagesChange}\r\n            onPreview={onPreview}\r\n          >\r\n            {fileList.length < 5 && '+ Upload'}\r\n          </Upload>\r\n        </ImgCrop>\r\n        {fileError && <div style={{ color: 'red' }}>파일을 업로드 해주세요</div>}\r\n      </Card>\r\n      <Button type=\"primary\" htmlType=\"submit\" style={{ width: `100%` }}>\r\n        제출\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default EditProduct;\r\n"]},"metadata":{},"sourceType":"module"}