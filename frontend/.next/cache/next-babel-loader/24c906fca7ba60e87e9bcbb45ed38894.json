{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\hoyuen\\\\Documents\\\\project\\\\project1\\\\frontend\\\\components\\\\Generalui\\\\Terms.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useState, useMemo } from 'react';\nimport { List, Modal, Col, Row } from 'antd';\nimport { CheckCircleFilled, CheckCircleOutlined } from '@ant-design/icons';\nimport { useChecked } from './CustomHooks';\n\nvar Terms = function Terms(_ref) {\n  _s();\n\n  var setTerms = _ref.setTerms;\n  var CheckCircleStyle = useMemo(function () {\n    return {\n      color: '#40A9FF',\n      marginRight: '3%'\n    };\n  }, []);\n  console.log(setTerms);\n  var terms = [{\n    title: '개인정보동의',\n    content: '개인정보를 동의해주세요'\n  }, {\n    title: '3자정보동의',\n    content: '3자 정보동의를 해주세요'\n  }];\n\n  var _useState = useState(false),\n      allTerms = _useState[0],\n      setAllTerms = _useState[1];\n\n  var _useChecked = useChecked(false),\n      _useChecked2 = _slicedToArray(_useChecked, 2),\n      individualInformationModal = _useChecked2[0],\n      setIndividualInformationModal = _useChecked2[1];\n\n  var _useChecked3 = useChecked(false),\n      _useChecked4 = _slicedToArray(_useChecked3, 2),\n      thirdPartyInformationModal = _useChecked4[0],\n      setThirdPartyInformationModal = _useChecked4[1];\n\n  var setModals = [setIndividualInformationModal, setThirdPartyInformationModal];\n  var modals = [individualInformationModal, thirdPartyInformationModal];\n  var toggleAllTerms = useCallback(function () {\n    setAllTerms(function (prev) {\n      return !prev;\n    });\n\n    if (!allTerms) {\n      setTerms.map(function (term) {\n        term[2](true);\n      });\n    } else {\n      setTerms.map(function (term) {\n        term[2](false);\n      });\n    }\n  }, [allTerms]);\n  return __jsx(React.Fragment, null, __jsx(List, {\n    bordered: true,\n    header: __jsx(React.Fragment, null, allTerms ? __jsx(React.Fragment, null, __jsx(CheckCircleFilled, {\n      style: CheckCircleStyle,\n      onClick: toggleAllTerms,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }), \"\\uC804\\uCCB4 \\uB3D9\\uC758\\uD558\\uAE30\") : __jsx(React.Fragment, null, __jsx(CheckCircleOutlined, {\n      style: CheckCircleStyle,\n      onClick: toggleAllTerms,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }), \"\\uC804\\uCCB4 \\uB3D9\\uC758\\uD558\\uAE30\")),\n    itemLayout: 'horizontal',\n    dataSource: terms,\n    renderItem: function renderItem(term, index) {\n      return __jsx(List.Item, {\n        key: index,\n        actions: [__jsx(\"div\", {\n          onClick: setModals[index],\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 46\n          }\n        }, \"\\uC790\\uC138\\uD788\\uBCF4\\uAE30\")],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }\n      }, __jsx(List.Item.Meta, {\n        title: __jsx(React.Fragment, null, __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }\n        }, setTerms[index][0] ? __jsx(CheckCircleFilled, {\n          style: CheckCircleStyle,\n          onClick: setTerms[index][1],\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }\n        }) : __jsx(CheckCircleOutlined, {\n          style: CheckCircleStyle,\n          onClick: setTerms[index][1],\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }\n        })), term.title),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }\n      }), __jsx(Modal, {\n        title: term.title,\n        visible: modals[index],\n        onOk: setModals[index],\n        onCancel: setModals[index],\n        zIndex: 100,\n        style: {\n          overflowY: 'auto'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }\n      }, term.content));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(Terms, \"FEywYbFGEWRcS7XfMyWOzXsS/ds=\", false, function () {\n  return [useChecked, useChecked];\n});\n\n_c = Terms;\nexport default Terms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Terms\");","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/components/Generalui/Terms.js"],"names":["React","useCallback","useState","useMemo","List","Modal","Col","Row","CheckCircleFilled","CheckCircleOutlined","useChecked","Terms","setTerms","CheckCircleStyle","color","marginRight","console","log","terms","title","content","allTerms","setAllTerms","individualInformationModal","setIndividualInformationModal","thirdPartyInformationModal","setThirdPartyInformationModal","setModals","modals","toggleAllTerms","prev","map","term","index","overflowY"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useMemo } from 'react';\r\nimport { List, Modal, Col, Row } from 'antd';\r\nimport { CheckCircleFilled, CheckCircleOutlined } from '@ant-design/icons';\r\n\r\nimport { useChecked } from './CustomHooks';\r\nconst Terms = ({ setTerms }) => {\r\n  const CheckCircleStyle = useMemo(() => {\r\n    return { color: '#40A9FF', marginRight: '3%' };\r\n  }, []);\r\n\r\n  console.log(setTerms);\r\n\r\n  const terms = [\r\n    { title: '개인정보동의', content: '개인정보를 동의해주세요' },\r\n    { title: '3자정보동의', content: '3자 정보동의를 해주세요' },\r\n  ];\r\n  const [allTerms, setAllTerms] = useState(false);\r\n  const [individualInformationModal, setIndividualInformationModal] = useChecked(false);\r\n  const [thirdPartyInformationModal, setThirdPartyInformationModal] = useChecked(false);\r\n\r\n  const setModals = [setIndividualInformationModal, setThirdPartyInformationModal];\r\n\r\n  const modals = [individualInformationModal, thirdPartyInformationModal];\r\n\r\n  const toggleAllTerms = useCallback(() => {\r\n    setAllTerms((prev) => !prev);\r\n    if (!allTerms) {\r\n      setTerms.map((term) => {\r\n        term[2](true);\r\n      });\r\n    } else {\r\n      setTerms.map((term) => {\r\n        term[2](false);\r\n      });\r\n    }\r\n  }, [allTerms]);\r\n\r\n  return (\r\n    <>\r\n      <List\r\n        bordered={true}\r\n        header={\r\n          <>\r\n            {allTerms ? (\r\n              <>\r\n                <CheckCircleFilled style={CheckCircleStyle} onClick={toggleAllTerms} />\r\n                전체 동의하기\r\n              </>\r\n            ) : (\r\n              <>\r\n                <CheckCircleOutlined style={CheckCircleStyle} onClick={toggleAllTerms} />\r\n                전체 동의하기\r\n              </>\r\n            )}\r\n          </>\r\n        }\r\n        itemLayout={'horizontal'}\r\n        dataSource={terms}\r\n        renderItem={(term, index) => {\r\n          return (\r\n            <List.Item key={index} actions={[<div onClick={setModals[index]}>자세히보기</div>]}>\r\n              <List.Item.Meta\r\n                title={\r\n                  <>\r\n                    <Avatar>\r\n                      {setTerms[index][0] ? (\r\n                        <CheckCircleFilled style={CheckCircleStyle} onClick={setTerms[index][1]} />\r\n                      ) : (\r\n                        <CheckCircleOutlined\r\n                          style={CheckCircleStyle}\r\n                          onClick={setTerms[index][1]}\r\n                        />\r\n                      )}\r\n                    </Avatar>\r\n                    {term.title}\r\n                  </>\r\n                }\r\n              />\r\n              <Modal\r\n                title={term.title}\r\n                visible={modals[index]}\r\n                onOk={setModals[index]}\r\n                onCancel={setModals[index]}\r\n                zIndex={100}\r\n                style={{ overflowY: 'auto' }}\r\n              >\r\n                {term.content}\r\n              </Modal>\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Terms;\r\n"]},"metadata":{},"sourceType":"module"}