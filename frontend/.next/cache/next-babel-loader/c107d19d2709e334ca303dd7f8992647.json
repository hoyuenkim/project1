{"ast":null,"code":"import { createStore, compose, applyMiddleware } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport rootReducer from '../reducers';\n\nconst {\n  persistStore\n} = require('redux-persist');\n\nimport expireIn from 'redux-persist-transform-expire-in';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware];\n  const enhencer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n\n  const rootStore = reducer => createStore(reducer, {}, enhencer);\n\n  const isServer = true;\n\n  if (isServer) {\n    const store = rootStore(rootReducer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    console.log(`store: ${store}`);\n    return store;\n  } else {\n    const {\n      persistReducer\n    } = require('redux-persist');\n\n    const storage = require('redux-persist/lib/storage').default;\n\n    const expiredBy = 60 * 60 * 1000;\n    const expirationKey = 'expirationKey';\n    const persistConfig = {\n      key: 'nextjs',\n      whitelist: ['user'],\n      storage,\n      transforms: [expireIn(expiredBy, expirationKey, {})]\n    };\n    console.log('-----------------------------------------------------------------------');\n    console.log(`store: ${store}`);\n    console.log('-----------------------------------------------------------------------');\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\n    const store = rootStore(persistedReducer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    store.__persistor = persistStore(store);\n    return store;\n  }\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/store/configureStore.js"],"names":["createStore","compose","applyMiddleware","createWrapper","composeWithDevTools","createSagaMiddleware","rootSaga","rootReducer","persistStore","require","expireIn","configureStore","sagaMiddleware","middlewares","enhencer","rootStore","reducer","isServer","store","sagaTask","run","console","log","persistReducer","storage","default","expiredBy","expirationKey","persistConfig","key","whitelist","transforms","persistedReducer","__persistor","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAmBC,OAAO,CAAC,eAAD,CAAhC;;AACA,OAAOC,QAAP,MAAqB,mCAArB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AAEA,QAAMQ,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,QAAME,QAAQ,GACZ,QACIb,OAAO,CAACC,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CADX,GAEIT,mBAAmB,CAACF,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CAHzB;;AAIA,QAAME,SAAS,GAAIC,OAAD,IAAahB,WAAW,CAACgB,OAAD,EAAU,EAAV,EAAcF,QAAd,CAA1C;;AAEA,QAAMG,QAAQ,OAAd;;AACA,MAAIA,QAAJ,EAAc;AACZ,UAAMC,KAAK,GAAGH,SAAS,CAACR,WAAD,CAAvB;AACAW,IAAAA,KAAK,CAACC,QAAN,GAAiBP,cAAc,CAACQ,GAAf,CAAmBd,QAAnB,CAAjB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAa,UAASJ,KAAM,EAA5B;AACA,WAAOA,KAAP;AACD,GALD,MAKO;AACL,UAAM;AAAEK,MAAAA;AAAF,QAAqBd,OAAO,CAAC,eAAD,CAAlC;;AACA,UAAMe,OAAO,GAAGf,OAAO,CAAC,2BAAD,CAAP,CAAqCgB,OAArD;;AAEA,UAAMC,SAAS,GAAG,KAAK,EAAL,GAAU,IAA5B;AACA,UAAMC,aAAa,GAAG,eAAtB;AAEA,UAAMC,aAAa,GAAG;AACpBC,MAAAA,GAAG,EAAE,QADe;AAEpBC,MAAAA,SAAS,EAAE,CAAC,MAAD,CAFS;AAGpBN,MAAAA,OAHoB;AAIpBO,MAAAA,UAAU,EAAE,CAACrB,QAAQ,CAACgB,SAAD,EAAYC,aAAZ,EAA2B,EAA3B,CAAT;AAJQ,KAAtB;AAMAN,IAAAA,OAAO,CAACC,GAAR,CAAY,yEAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAa,UAASJ,KAAM,EAA5B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,yEAAZ;AACA,UAAMU,gBAAgB,GAAGT,cAAc,CAACK,aAAD,EAAgBrB,WAAhB,CAAvC;AACA,UAAMW,KAAK,GAAGH,SAAS,CAACiB,gBAAD,CAAvB;AACAd,IAAAA,KAAK,CAACC,QAAN,GAAiBP,cAAc,CAACQ,GAAf,CAAmBd,QAAnB,CAAjB;AACAY,IAAAA,KAAK,CAACe,WAAN,GAAoBzB,YAAY,CAACU,KAAD,CAAhC;AACA,WAAOA,KAAP;AACD;AACF,CAtCD;;AAwCA,MAAMgB,OAAO,GAAG/B,aAAa,CAACQ,cAAD,EAAiB;AAAEwB,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { createStore, compose, applyMiddleware } from 'redux';\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\nimport rootReducer from '../reducers';\r\nconst { persistStore } = require('redux-persist');\r\nimport expireIn from 'redux-persist-transform-expire-in';\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const middlewares = [sagaMiddleware];\r\n  const enhencer =\r\n    process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  const rootStore = (reducer) => createStore(reducer, {}, enhencer);\r\n\r\n  const isServer = typeof window === 'undefined';\r\n  if (isServer) {\r\n    const store = rootStore(rootReducer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    console.log(`store: ${store}`);\r\n    return store;\r\n  } else {\r\n    const { persistReducer } = require('redux-persist');\r\n    const storage = require('redux-persist/lib/storage').default;\r\n\r\n    const expiredBy = 60 * 60 * 1000;\r\n    const expirationKey = 'expirationKey';\r\n\r\n    const persistConfig = {\r\n      key: 'nextjs',\r\n      whitelist: ['user'],\r\n      storage,\r\n      transforms: [expireIn(expiredBy, expirationKey, {})],\r\n    };\r\n    console.log('-----------------------------------------------------------------------');\r\n    console.log(`store: ${store}`);\r\n    console.log('-----------------------------------------------------------------------');\r\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n    const store = rootStore(persistedReducer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    store.__persistor = persistStore(store);\r\n    return store;\r\n  }\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV !== 'production' });\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}