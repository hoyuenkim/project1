{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadProducts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadProducts),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addProduct),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddProduct),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(productsSaga);\n\nimport axios from \"axios\";\nimport { all, put, fork, call, takeLatest } from \"redux-saga/effects\";\nimport { LOAD_PRODUCTS_REQUEST, LOAD_PRODUCTS_SUCCESS, LOAD_PRODUCTS_FAILURE, ADD_PRODUCT_REQUEST, ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE } from \"../reducers/shop\";\n\nfunction loadProductApi(data) {\n  // return axios.get(`/shop/${data.shopId}/${data.tableId}`);\n  return axios.get(\"/menu\");\n}\n\nfunction loadProducts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadProducts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadProductApi);\n\n        case 3:\n          result = _context.sent;\n          console.log(result);\n          _context.next = 7;\n          return put({\n            type: LOAD_PRODUCTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 14;\n          return put({\n            type: LOAD_PRODUCTS_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchLoadProducts() {\n  return _regeneratorRuntime.wrap(function watchLoadProducts$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_PRODUCTS_REQUEST, loadProducts);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addProductApi(data) {\n  console.log(data);\n  return axios.post(\"/products/add\", data, {\n    withCredentials: true\n  });\n}\n\nfunction addProduct(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addProduct$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          console.log(action.formData);\n          _context3.next = 4;\n          return call(addProductApi, action.formData);\n\n        case 4:\n          result = _context3.sent;\n          _context3.next = 7;\n          return put({\n            type: ADD_PRODUCT_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: ADD_PRODUCT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction watchAddProduct() {\n  return _regeneratorRuntime.wrap(function watchAddProduct$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_PRODUCT_REQUEST, addProduct);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function productsSaga() {\n  return _regeneratorRuntime.wrap(function productsSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLoadProducts), fork(watchAddProduct)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/sagas/shop.js"],"names":["loadProducts","watchLoadProducts","addProduct","watchAddProduct","productsSaga","axios","all","put","fork","call","takeLatest","LOAD_PRODUCTS_REQUEST","LOAD_PRODUCTS_SUCCESS","LOAD_PRODUCTS_FAILURE","ADD_PRODUCT_REQUEST","ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAILURE","loadProductApi","data","get","action","result","console","log","type","error","addProductApi","post","withCredentials","formData"],"mappings":";;oDAgBUA,Y;qDAiBAC,iB;qDAWAC,U;qDAWAC,e;qDAIeC,Y;;AA3DzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,qBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,kBAPP;;AASA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC5B;AACA,SAAOb,KAAK,CAACc,GAAN,CAAU,OAAV,CAAP;AACD;;AAED,SAAUnB,YAAV,CAAuBoB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMX,IAAI,CAACQ,cAAD,CAAV;;AAFnB;AAEUI,UAAAA,MAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAHJ;AAII,iBAAMd,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEZ,qBADE;AAERM,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASII,UAAAA,OAAO,CAACC,GAAR;AATJ;AAUI,iBAAMhB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEX,qBADE;AAERY,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUxB,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,UAAU,CAACC,qBAAD,EAAwBX,YAAxB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAS0B,aAAT,CAAuBR,IAAvB,EAA6B;AAC3BI,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,SAAOb,KAAK,CAACsB,IAAN,CAAW,eAAX,EAA4BT,IAA5B,EAAkC;AACvCU,IAAAA,eAAe,EAAE;AADsB,GAAlC,CAAP;AAGD;;AAED,SAAU1B,UAAV,CAAqBkB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIE,UAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACS,QAAnB;AAFJ;AAGmB,iBAAMpB,IAAI,CAACiB,aAAD,EAAgBN,MAAM,CAACS,QAAvB,CAAV;;AAHnB;AAGUR,UAAAA,MAHV;AAAA;AAII,iBAAMd,GAAG,CAAC;AAAEiB,YAAAA,IAAI,EAAET,mBAAR;AAA6BG,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAA1C,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMII,UAAAA,OAAO,CAACC,GAAR;AANJ;AAOI,iBAAMhB,GAAG,CAAC;AAAEiB,YAAAA,IAAI,EAAER,mBAAR;AAA6BS,YAAAA,KAAK;AAAlC,WAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWA,SAAUtB,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,UAAU,CAACI,mBAAD,EAAsBZ,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAME,GAAG,CAAC,CAACE,IAAI,CAACP,iBAAD,CAAL,EAA0BO,IAAI,CAACL,eAAD,CAA9B,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\r\nimport { all, put, fork, call, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  LOAD_PRODUCTS_REQUEST,\r\n  LOAD_PRODUCTS_SUCCESS,\r\n  LOAD_PRODUCTS_FAILURE,\r\n  ADD_PRODUCT_REQUEST,\r\n  ADD_PRODUCT_SUCCESS,\r\n  ADD_PRODUCT_FAILURE,\r\n} from \"../reducers/shop\";\r\n\r\nfunction loadProductApi(data) {\r\n  // return axios.get(`/shop/${data.shopId}/${data.tableId}`);\r\n  return axios.get(\"/menu\");\r\n}\r\n\r\nfunction* loadProducts(action) {\r\n  try {\r\n    const result = yield call(loadProductApi);\r\n    console.log(result);\r\n    yield put({\r\n      type: LOAD_PRODUCTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOAD_PRODUCTS_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadProducts() {\r\n  yield takeLatest(LOAD_PRODUCTS_REQUEST, loadProducts);\r\n}\r\n\r\nfunction addProductApi(data) {\r\n  console.log(data);\r\n  return axios.post(\"/products/add\", data, {\r\n    withCredentials: true,\r\n  });\r\n}\r\n\r\nfunction* addProduct(action) {\r\n  try {\r\n    console.log(action.formData);\r\n    const result = yield call(addProductApi, action.formData);\r\n    yield put({ type: ADD_PRODUCT_SUCCESS, data: result.data });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({ type: ADD_PRODUCT_FAILURE, error: e });\r\n  }\r\n}\r\n\r\nfunction* watchAddProduct() {\r\n  yield takeLatest(ADD_PRODUCT_REQUEST, addProduct);\r\n}\r\n\r\nexport default function* productsSaga() {\r\n  yield all([fork(watchLoadProducts), fork(watchAddProduct)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}