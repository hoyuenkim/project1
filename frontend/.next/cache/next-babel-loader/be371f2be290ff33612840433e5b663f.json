{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\hoyuen\\\\Documents\\\\project\\\\project1\\\\frontend\\\\components\\\\Forms\\\\ChangePassword.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button, Card } from 'antd';\nimport { useInput } from '../Generalui/CustomHooks';\nimport { useCallback } from 'react';\nimport axios from 'axios';\nimport { PASSWORD_CHANGE_REQUEST } from '../../reducers/user';\n\nvar ChangePassword = function ChangePassword(_ref) {\n  _s();\n\n  var setToggleChangePassword = _ref.setToggleChangePassword;\n  var dispatch = useDispatch();\n\n  var _useInput = useInput(),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      presentPassword = _useInput2[0],\n      onChangePresentPassword = _useInput2[1],\n      setPresentPassword = _useInput2[2];\n\n  var _useInput3 = useInput(),\n      _useInput4 = _slicedToArray(_useInput3, 3),\n      password = _useInput4[0],\n      onChangePassword = _useInput4[1],\n      setPassword = _useInput4[2];\n\n  var _useInput5 = useInput(),\n      _useInput6 = _slicedToArray(_useInput5, 3),\n      passwordCheck = _useInput6[0],\n      onChangePasswordCheck = _useInput6[1],\n      setChangePasswordCheck = _useInput6[2];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      session = _useSelector.session,\n      isLoggedIn = _useSelector.isLoggedIn;\n\n  var onFinish = useCallback(function () {\n    dispatch({\n      type: PASSWORD_CHANGE_REQUEST,\n      data: {\n        id: session.id,\n        password: password\n      }\n    });\n    setToggleChangePassword(function (prev) {\n      return !prev;\n    });\n    setPresentPassword(null);\n    setPassword(null);\n    setChangePasswordCheck(null);\n  }, [password, passwordCheck]);\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    style: {\n      verticalAlign: 'middle'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(Form, {\n    onFinish: onFinish,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"presentPassword\",\n    validateTrigger: \"onBlur\",\n    rules: [{\n      required: true,\n      message: '기존 비밀번호를 입력해주세요'\n    }, function () {\n      return {\n        validator: function validator(rule, value) {\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var regex, result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    regex = new RegExp(/^[A-Za-z0-9]{6,12}$/);\n\n                    if (!(value && value.match(regex))) {\n                      _context.next = 12;\n                      break;\n                    }\n\n                    _context.next = 4;\n                    return axios.post('/user/confirm/password', {\n                      id: session.id,\n                      password: value\n                    });\n\n                  case 4:\n                    result = _context.sent;\n\n                    if (result.data) {\n                      _context.next = 9;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", Promise.reject('기존 비밀번호가 일치하지 않습니다.'));\n\n                  case 9:\n                    return _context.abrupt(\"return\", Promise.resolve());\n\n                  case 10:\n                    _context.next = 13;\n                    break;\n\n                  case 12:\n                    return _context.abrupt(\"return\", Promise.reject('형식에 맞지 않는 비밀번호입니다'));\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }))();\n        }\n      };\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, __jsx(Input.Password, {\n    size: \"large\",\n    prefix: \"* \\uAE30\\uC874 \\uD328\\uC2A4\\uC6CC\\uB4DC\",\n    value: presentPassword,\n    onChange: onChangePresentPassword,\n    placeholder: \"\\uAE30\\uC874 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: '비밀번호를 확인해주세요'\n    }, {\n      pattern: /^[A-Za-z0-9]{6,12}$/,\n      message: '비밀번호가 형식에 맞지 않습니다'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, __jsx(Input.Password, {\n    prefix: \"* \\uBE44\\uBC00\\uBC88\\uD638\",\n    size: \"large\",\n    value: password,\n    onChange: onChangePassword,\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"passwordCheck\",\n    dependencies: ['password'],\n    rules: [{\n      required: true,\n      message: '비밀번호를 확인해 주세요'\n    }, function (_ref2) {\n      var getFieldValue = _ref2.getFieldValue;\n      return {\n        validator: function validator(rule, value) {\n          if (!value || getFieldValue('password') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject('비밀번호가 일치하지 않습니다.');\n        }\n      };\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(Input.Password, {\n    prefix: \"* \\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n    size: \"large\",\n    value: passwordCheck,\n    onChange: onChangePasswordCheck,\n    placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  })), __jsx(Button, {\n    type: 'primary',\n    htmlType: 'submit',\n    style: {\n      width: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"))));\n};\n\n_s(ChangePassword, \"QkVmmXGZwsGOI/pCl3C2GF6jwls=\", false, function () {\n  return [useDispatch, useInput, useInput, useInput, useSelector];\n});\n\n_c = ChangePassword;\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/components/Forms/ChangePassword.js"],"names":["useDispatch","useSelector","Form","Input","Button","Card","useInput","useCallback","axios","PASSWORD_CHANGE_REQUEST","ChangePassword","setToggleChangePassword","dispatch","presentPassword","onChangePresentPassword","setPresentPassword","password","onChangePassword","setPassword","passwordCheck","onChangePasswordCheck","setChangePasswordCheck","state","user","session","isLoggedIn","onFinish","type","data","id","prev","verticalAlign","required","message","validator","rule","value","regex","RegExp","match","post","result","Promise","reject","resolve","pattern","getFieldValue","width"],"mappings":"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","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Input, Button, Card } from 'antd';\r\nimport { useInput } from '../Generalui/CustomHooks';\r\nimport { useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { PASSWORD_CHANGE_REQUEST } from '../../reducers/user';\r\n\r\nconst ChangePassword = ({ setToggleChangePassword }) => {\r\n  const dispatch = useDispatch();\r\n  const [presentPassword, onChangePresentPassword, setPresentPassword] = useInput();\r\n  const [password, onChangePassword, setPassword] = useInput();\r\n  const [passwordCheck, onChangePasswordCheck, setChangePasswordCheck] = useInput();\r\n\r\n  const { session, isLoggedIn } = useSelector((state) => state.user);\r\n\r\n  const onFinish = useCallback(() => {\r\n    dispatch({\r\n      type: PASSWORD_CHANGE_REQUEST,\r\n      data: {\r\n        id: session.id,\r\n        password,\r\n      },\r\n    });\r\n    setToggleChangePassword((prev) => !prev);\r\n    setPresentPassword(null);\r\n    setPassword(null);\r\n    setChangePasswordCheck(null);\r\n  }, [password, passwordCheck]);\r\n\r\n  return (\r\n    <>\r\n      <Card style={{ verticalAlign: 'middle' }}>\r\n        <Form onFinish={onFinish}>\r\n          <Form.Item\r\n            name=\"presentPassword\"\r\n            validateTrigger=\"onBlur\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '기존 비밀번호를 입력해주세요',\r\n              },\r\n              () => ({\r\n                async validator(rule, value) {\r\n                  const regex = new RegExp(/^[A-Za-z0-9]{6,12}$/);\r\n                  if (value && value.match(regex)) {\r\n                    const result = await axios.post('/user/confirm/password', {\r\n                      id: session.id,\r\n                      password: value,\r\n                    });\r\n                    if (!result.data) {\r\n                      // console.log(result);\r\n                      return Promise.reject('기존 비밀번호가 일치하지 않습니다.');\r\n                    } else {\r\n                      return Promise.resolve();\r\n                    }\r\n                  } else {\r\n                    return Promise.reject('형식에 맞지 않는 비밀번호입니다');\r\n                  }\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input.Password\r\n              size={`large`}\r\n              prefix={`* 기존 패스워드`}\r\n              value={presentPassword}\r\n              onChange={onChangePresentPassword}\r\n              placeholder=\"기존 비밀번호를 입력해주세요\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '비밀번호를 확인해주세요',\r\n              },\r\n              {\r\n                pattern: /^[A-Za-z0-9]{6,12}$/,\r\n                message: '비밀번호가 형식에 맞지 않습니다',\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password\r\n              prefix={`* 비밀번호`}\r\n              size={`large`}\r\n              value={password}\r\n              onChange={onChangePassword}\r\n              placeholder=\"비밀번호를 입력해주세요\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"passwordCheck\"\r\n            dependencies={['password']}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '비밀번호를 확인해 주세요',\r\n              },\r\n              ({ getFieldValue }) => ({\r\n                validator(rule, value) {\r\n                  if (!value || getFieldValue('password') === value) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  return Promise.reject('비밀번호가 일치하지 않습니다.');\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input.Password\r\n              prefix={`* 비밀번호 확인`}\r\n              size={`large`}\r\n              value={passwordCheck}\r\n              onChange={onChangePasswordCheck}\r\n              placeholder=\"다시 비밀번호를 입력해주세요\"\r\n            />\r\n          </Form.Item>\r\n          <Button type={'primary'} htmlType={'submit'} style={{ width: '100%' }}>\r\n            비밀번호 변경\r\n          </Button>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChangePassword;\r\n"]},"metadata":{},"sourceType":"module"}