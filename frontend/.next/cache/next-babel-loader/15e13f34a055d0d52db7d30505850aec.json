{"ast":null,"code":"import produce from \"immer\";\nconst initialState = {\n  lists: [],\n  originalLists: []\n};\nexport const LOAD_LIST_REQUEST = \"LOAD_LIST_REQUEST\";\nexport const LOAD_LIST_SUCCESS = \"LOAD_LIST_SUCCESS\";\nexport const LOAD_LIST_FAILURE = \"LOAD_LIST_FAILURE\";\nexport const PLUS_QUANTITY_SUCCESS = \"PLUS_QUANTITY_SUCCESS\";\nexport const MINUS_QUANTITY_SUCCESS = \"MINUS_QUANTITY_SUCCESS\";\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_LIST_REQUEST:\n        break;\n\n      case LOAD_LIST_SUCCESS:\n        draft.lists = action.data.products;\n        draft.originalLists = action.data.products;\n        break;\n\n      case LOAD_LIST_FAILURE:\n        break;\n\n      case PLUS_QUANTITY_SUCCESS:\n        {\n          const index = state.lists.findIndex(product => product.id === action.data.id);\n          const product = state.lists[index]; // let product = state.lists[action.data.id];\n\n          console.log(product);\n          let quantity = product.quantity;\n          let stock = product.stock;\n          product.quantity = quantity < stock ? quantity += 1 : product.quantity;\n        } // let quantity = product.quantity;\n        // quantity < product.stock ? (quantity += 1) : product.quantity;\n        // const lists = [...state.lists];\n        // lists[index] = { ...product, quantity };\n\n        break;\n\n      case MINUS_QUANTITY_SUCCESS:\n        {\n          let quantity = state.lists[action.data.id].quantity; // let quantity = draft.lists[action.data.id].quantity;\n          //   let stock = draft.lists[action.data.id].stock;\n\n          quantity = quantity > 1 ? quantity -= 1 : 1; //   quantity < stock ? (quantity += 1) : product.quantity;\n          // const index = state.lists.findIndex((product) => product.id === action.data.id);\n          // const product = state.lists[index];\n          // let quantity = product.quantity;\n          // const lists = [...state.lists];\n          // lists[index] = { ...product, quantity };\n          // return {\n          //   ...state,\n          //   lists,\n          // };\n        }\n        break;\n\n      default:\n        state;\n        break;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/reducers/stock.js"],"names":["produce","initialState","lists","originalLists","LOAD_LIST_REQUEST","LOAD_LIST_SUCCESS","LOAD_LIST_FAILURE","PLUS_QUANTITY_SUCCESS","MINUS_QUANTITY_SUCCESS","state","action","draft","type","data","products","index","findIndex","product","id","console","log","quantity","stock"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB;AAKA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AAEP,gBAAe,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAC/C,SAAOV,OAAO,CAACS,KAAD,EAASE,KAAD,IAAW;AAC/B,YAAQD,MAAM,CAACE,IAAf;AACE,WAAKR,iBAAL;AACE;;AACF,WAAKC,iBAAL;AACEM,QAAAA,KAAK,CAACT,KAAN,GAAcQ,MAAM,CAACG,IAAP,CAAYC,QAA1B;AACAH,QAAAA,KAAK,CAACR,aAAN,GAAsBO,MAAM,CAACG,IAAP,CAAYC,QAAlC;AACA;;AACF,WAAKR,iBAAL;AACE;;AAEF,WAAKC,qBAAL;AACE;AACE,gBAAMQ,KAAK,GAAGN,KAAK,CAACP,KAAN,CAAYc,SAAZ,CAAuBC,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeR,MAAM,CAACG,IAAP,CAAYK,EAA9D,CAAd;AACA,gBAAMD,OAAO,GAAGR,KAAK,CAACP,KAAN,CAAYa,KAAZ,CAAhB,CAFF,CAGE;;AACAI,UAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACA,cAAII,QAAQ,GAAGJ,OAAO,CAACI,QAAvB;AACA,cAAIC,KAAK,GAAGL,OAAO,CAACK,KAApB;AACAL,UAAAA,OAAO,CAACI,QAAR,GAAmBA,QAAQ,GAAGC,KAAX,GAAoBD,QAAQ,IAAI,CAAhC,GAAqCJ,OAAO,CAACI,QAAhE;AACD,SATH,CAUE;AACA;AACA;AACA;;AAEA;;AAEF,WAAKb,sBAAL;AACE;AACE,cAAIa,QAAQ,GAAGZ,KAAK,CAACP,KAAN,CAAYQ,MAAM,CAACG,IAAP,CAAYK,EAAxB,EAA4BG,QAA3C,CADF,CAEE;AACA;;AACAA,UAAAA,QAAQ,GAAGA,QAAQ,GAAG,CAAX,GAAgBA,QAAQ,IAAI,CAA5B,GAAiC,CAA5C,CAJF,CAME;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACD;AACD;;AAEF;AACEZ,QAAAA,KAAK;AACL;AAlDJ;AAoDD,GArDa,CAAd;AAsDD,CAvDD","sourcesContent":["import produce from \"immer\";\r\n\r\nconst initialState = {\r\n  lists: [],\r\n  originalLists: [],\r\n};\r\n\r\nexport const LOAD_LIST_REQUEST = \"LOAD_LIST_REQUEST\";\r\nexport const LOAD_LIST_SUCCESS = \"LOAD_LIST_SUCCESS\";\r\nexport const LOAD_LIST_FAILURE = \"LOAD_LIST_FAILURE\";\r\n\r\nexport const PLUS_QUANTITY_SUCCESS = \"PLUS_QUANTITY_SUCCESS\";\r\n\r\nexport const MINUS_QUANTITY_SUCCESS = \"MINUS_QUANTITY_SUCCESS\";\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_LIST_REQUEST:\r\n        break;\r\n      case LOAD_LIST_SUCCESS:\r\n        draft.lists = action.data.products;\r\n        draft.originalLists = action.data.products;\r\n        break;\r\n      case LOAD_LIST_FAILURE:\r\n        break;\r\n\r\n      case PLUS_QUANTITY_SUCCESS:\r\n        {\r\n          const index = state.lists.findIndex((product) => product.id === action.data.id);\r\n          const product = state.lists[index];\r\n          // let product = state.lists[action.data.id];\r\n          console.log(product);\r\n          let quantity = product.quantity;\r\n          let stock = product.stock;\r\n          product.quantity = quantity < stock ? (quantity += 1) : product.quantity;\r\n        }\r\n        // let quantity = product.quantity;\r\n        // quantity < product.stock ? (quantity += 1) : product.quantity;\r\n        // const lists = [...state.lists];\r\n        // lists[index] = { ...product, quantity };\r\n\r\n        break;\r\n\r\n      case MINUS_QUANTITY_SUCCESS:\r\n        {\r\n          let quantity = state.lists[action.data.id].quantity;\r\n          // let quantity = draft.lists[action.data.id].quantity;\r\n          //   let stock = draft.lists[action.data.id].stock;\r\n          quantity = quantity > 1 ? (quantity -= 1) : 1;\r\n\r\n          //   quantity < stock ? (quantity += 1) : product.quantity;\r\n          // const index = state.lists.findIndex((product) => product.id === action.data.id);\r\n          // const product = state.lists[index];\r\n          // let quantity = product.quantity;\r\n\r\n          // const lists = [...state.lists];\r\n          // lists[index] = { ...product, quantity };\r\n          // return {\r\n          //   ...state,\r\n          //   lists,\r\n          // };\r\n        }\r\n        break;\r\n\r\n      default:\r\n        state;\r\n        break;\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}