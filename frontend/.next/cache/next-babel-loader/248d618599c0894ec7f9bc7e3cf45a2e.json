{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Form, Input } from \"antd\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar EmailForm = function EmailForm(_ref) {\n  var onChangeEmail = _ref.onChangeEmail;\n  return /*#__PURE__*/_jsx(Form.Item, {\n    name: \"email\",\n    validateTrigger: \"onBlur\",\n    rules: [{\n      required: true,\n      message: \"이메일를 입력해 주세요!\"\n    }, function () {\n      return {\n        validator: function validator(rule, value) {\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var regex, result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    regex = new RegExp(/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i);\n\n                    if (!(value && value.match(regex))) {\n                      _context.next = 12;\n                      break;\n                    }\n\n                    _context.next = 4;\n                    return axios.post(\"/user/confirm/email\", {\n                      email: value\n                    });\n\n                  case 4:\n                    result = _context.sent;\n\n                    if (!result.data) {\n                      _context.next = 9;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", Promise.reject(\"이미 존재하는 이메일입니다\"));\n\n                  case 9:\n                    return _context.abrupt(\"return\", Promise.resolve());\n\n                  case 10:\n                    _context.next = 13;\n                    break;\n\n                  case 12:\n                    return _context.abrupt(\"return\", Promise.reject(\"형식에 맞지 않는 이메일입니다\"));\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }))();\n        }\n      };\n    }],\n    children: /*#__PURE__*/_jsx(Input, {\n      size: \"large\",\n      prefix: \"* Email\",\n      onChange: onChangeEmail,\n      placeholder: \"Email\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n    })\n  });\n};\n\n_c = EmailForm;\nexport default EmailForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailForm\");","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/components/Forms/EmailForm.js"],"names":["Form","Input","EmailForm","onChangeEmail","required","message","validator","rule","value","regex","RegExp","match","axios","post","email","result","data","Promise","reject","resolve"],"mappings":";;AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,MAA5B;;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAuB;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AACvC,sBACE,KAAC,IAAD,CAAM,IAAN;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,eAAe,EAAC,QAFlB;AAGE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,QAAQ,EAAE,IADZ;AAEEC,MAAAA,OAAO,EAAE;AAFX,KADK,EAKL;AAAA,aAAO;AACCC,QAAAA,SADD,qBACWC,IADX,EACiBC,KADjB,EACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,oBAAAA,KADqB,GACb,IAAIC,MAAJ,CACZ,kFADY,CADa;;AAAA,0BAIvBF,KAAK,IAAIA,KAAK,CAACG,KAAN,CAAYF,KAAZ,CAJc;AAAA;AAAA;AAAA;;AAAA;AAAA,2BAKJG,KAAK,CAACC,IAAN,CAAW,qBAAX,EAAkC;AACrDC,sBAAAA,KAAK,EAAEN;AAD8C,qBAAlC,CALI;;AAAA;AAKnBO,oBAAAA,MALmB;;AAAA,yBAQrBA,MAAM,CAACC,IARc;AAAA;AAAA;AAAA;;AAAA,qDAShBC,OAAO,CAACC,MAAR,CAAe,gBAAf,CATgB;;AAAA;AAAA,qDAWhBD,OAAO,CAACE,OAAR,EAXgB;;AAAA;AAAA;AAAA;;AAAA;AAAA,qDAclBF,OAAO,CAACC,MAAR,CAAe,kBAAf,CAdkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgB5B;AAjBI,OAAP;AAAA,KALK,CAHT;AAAA,2BA6BE,KAAC,KAAD;AACE,MAAA,IAAI,SADN;AAEE,MAAA,MAAM,WAFR;AAGE,MAAA,QAAQ,EAAEf,aAHZ;AAIE,MAAA,WAAW,EAAC;AAJd;AA7BF,IADF;AAsCD,CAvCD;;KAAMD,S;AAyCN,eAAeA,SAAf","sourcesContent":["import { Form, Input } from \"antd\";\r\n\r\nconst EmailForm = ({ onChangeEmail }) => {\r\n  return (\r\n    <Form.Item\r\n      name=\"email\"\r\n      validateTrigger=\"onBlur\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: \"이메일를 입력해 주세요!\",\r\n        },\r\n        () => ({\r\n          async validator(rule, value) {\r\n            const regex = new RegExp(\r\n              /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i,\r\n            );\r\n            if (value && value.match(regex)) {\r\n              const result = await axios.post(\"/user/confirm/email\", {\r\n                email: value,\r\n              });\r\n              if (result.data) {\r\n                return Promise.reject(\"이미 존재하는 이메일입니다\");\r\n              } else {\r\n                return Promise.resolve();\r\n              }\r\n            } else {\r\n              return Promise.reject(\"형식에 맞지 않는 이메일입니다\");\r\n            }\r\n          },\r\n        }),\r\n      ]}\r\n    >\r\n      <Input\r\n        size={`large`}\r\n        prefix={`* Email`}\r\n        onChange={onChangeEmail}\r\n        placeholder=\"Email을 입력해주세요\"\r\n      />\r\n    </Form.Item>\r\n  );\r\n};\r\n\r\nexport default EmailForm;\r\n"]},"metadata":{},"sourceType":"module"}