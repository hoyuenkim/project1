{"ast":null,"code":"import produce from \"immer\";\nconst initialState = {\n  stocks: [],\n  originalStocks: []\n};\nexport const LOAD_LIST_REQUEST = \"LOAD_LIST_REQUEST\";\nexport const LOAD_LIST_SUCCESS = \"LOAD_LIST_SUCCESS\";\nexport const LOAD_LIST_FAILURE = \"LOAD_LIST_FAILURE\";\nexport const ADD_STOCK_REQUEST = \"ADD_STOCK_REQUEST\";\nexport const ADD_STOCK_SUCCESS = \"ADD_STOCK_SUCCESS\";\nexport const ADD_STOCK_FAILURE = \"ADD_STOCK_FAILURE\";\nexport const SOLD_STOCK_SUCCESS = \"SOLD_STOCK_SUCCESS\";\nexport const SOLD_STOCK_FAILURE = \"SOLD_STOCK_FAILRUE\";\nexport const UPDATE_STOCK_SUCCESS = \"UPDATE_STOCK_SUCCESS\";\nexport const UPDATE_STOCK_FAILURE = \"UPDATE_STOCK_FAILURE\";\nexport const PLUS_QUANTITY_SUCCESS = \"PLUS_QUANTITY_SUCCESS\";\nexport const MINUS_QUANTITY_SUCCESS = \"MINUS_QUANTITY_SUCCESS\";\nexport const INITIATE_STOCK_QUANTITY_SUCCESS = \"INITIATE_STOCK_QUANTITY_SUCCESS\";\nexport const SEARCH_STOCK_PRODUCT_SUCCESS = \"SEARCH_STOCK_PRODUCT_SUCCESS\";\nexport const SELECT_STOCK_CATEGORY_SUCCESS = \"SELECT_STOCK_CATEGORY_SUCCESS\";\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_LIST_REQUEST:\n        break;\n\n      case LOAD_LIST_SUCCESS:\n        draft.stocks = action.data.stocks;\n        draft.originalStocks = action.data.stocks;\n        break;\n\n      case LOAD_LIST_FAILURE:\n        break;\n\n      case PLUS_QUANTITY_SUCCESS:\n        {\n          const product = draft.stocks.find(stock => stock.id === action.data.id);\n          let quantity = product.quantity;\n          const stock = product.stock;\n          quantity = quantity < stock ? quantity += 1 : product.quantity;\n          product.quantity = quantity;\n        }\n        break;\n\n      case MINUS_QUANTITY_SUCCESS:\n        {\n          const product = draft.stocks.find(stock => stock.id === action.data.id);\n          let quantity = product.quantity;\n          quantity = quantity > 1 ? quantity -= 1 : 1;\n          product.quantity = quantity;\n        }\n        break;\n\n      case INITIATE_STOCK_QUANTITY_SUCCESS:\n        {\n          const product = draft.stocks.find(stock => stock.id === action.data.id);\n          product.quantity = 1;\n        }\n        break;\n\n      case SEARCH_STOCK_PRODUCT_SUCCESS:\n        {\n          const products = draft.originalStocks.filter(stock => stock.Product.title.includes(action.data.text));\n          draft.stocks = products;\n        }\n        break;\n\n      case SELECT_STOCK_CATEGORY_SUCCESS:\n        {\n          const products = draft.originalStocks.filter(stock => stock.Category.id === action.data.id);\n          draft.stocks = products;\n        }\n        break;\n\n      case ADD_STOCK_SUCCESS:\n        {\n          const product = draft.stocks.find(stock => stock.id === action.data.id);\n          const originalProducts = draft.originalStocks.find(stock => stock.id === action.data.id);\n\n          if (product) {\n            product.stock = action.data.stock;\n            originalProducts.stock = action.data.stock;\n            break;\n          } else {\n            draft.stocks = [...state.stocks, action.data];\n            draft.originalStocks = [...state.originalStocks, action.data];\n            break;\n          }\n        }\n\n      case ADD_STOCK_FAILURE:\n        {\n          draft.addStockError = action.error;\n        }\n\n      case SOLD_STOCK_SUCCESS:\n        {\n          if (action.data.stock === 0) {\n            draft.stocks = draft.stocks.filter(stock => stock.id !== action.data.id);\n            draft.originalStocks = draft.originalStocks.filter(stock => stock.id !== action.data.id);\n          } else {\n            const product = draft.stocks.find(stock => stock.id === action.data.id);\n            const originalProducts = draft.originalStocks.find(stock => stock.id === action.data.id);\n            product.stock = action.data.stock;\n            originalProducts.stock = action.data.stock;\n          }\n        }\n        break;\n\n      case UPDATE_STOCK_SUCCESS:\n        {\n          if (action.data.stock === 0) {\n            draft.stocks = draft.stocks.filter(stock => stock.id !== action.data.id);\n            draft.originalStocks = draft.originalStocks.filter(stock => stock.id !== action.data.id);\n          } else {\n            const product = draft.stocks.find(stock => stock.id === action.data.id);\n            const originalProducts = draft.originalStocks.find(stock => stock.id === action.data.id);\n            product.stock = action.data.stock;\n            product.discount = action.data.discount;\n            originalProducts.stock = action.data.stock;\n            originalProducts.discount = action.data.discount;\n          }\n        }\n\n      default:\n        state;\n        break;\n    }\n  });\n});","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/Dev/project1/frontend/reducers/stock.js"],"names":["produce","initialState","stocks","originalStocks","LOAD_LIST_REQUEST","LOAD_LIST_SUCCESS","LOAD_LIST_FAILURE","ADD_STOCK_REQUEST","ADD_STOCK_SUCCESS","ADD_STOCK_FAILURE","SOLD_STOCK_SUCCESS","SOLD_STOCK_FAILURE","UPDATE_STOCK_SUCCESS","UPDATE_STOCK_FAILURE","PLUS_QUANTITY_SUCCESS","MINUS_QUANTITY_SUCCESS","INITIATE_STOCK_QUANTITY_SUCCESS","SEARCH_STOCK_PRODUCT_SUCCESS","SELECT_STOCK_CATEGORY_SUCCESS","state","action","draft","type","data","product","find","stock","id","quantity","products","filter","Product","title","includes","text","Category","originalProducts","addStockError","error","discount"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\n\r\nconst initialState = {\r\n  stocks: [],\r\n  originalStocks: [],\r\n};\r\n\r\nexport const LOAD_LIST_REQUEST = \"LOAD_LIST_REQUEST\";\r\nexport const LOAD_LIST_SUCCESS = \"LOAD_LIST_SUCCESS\";\r\nexport const LOAD_LIST_FAILURE = \"LOAD_LIST_FAILURE\";\r\n\r\nexport const ADD_STOCK_REQUEST = \"ADD_STOCK_REQUEST\";\r\nexport const ADD_STOCK_SUCCESS = \"ADD_STOCK_SUCCESS\";\r\nexport const ADD_STOCK_FAILURE = \"ADD_STOCK_FAILURE\";\r\n\r\nexport const SOLD_STOCK_SUCCESS = \"SOLD_STOCK_SUCCESS\";\r\nexport const SOLD_STOCK_FAILURE = \"SOLD_STOCK_FAILRUE\";\r\n\r\nexport const UPDATE_STOCK_SUCCESS = \"UPDATE_STOCK_SUCCESS\";\r\nexport const UPDATE_STOCK_FAILURE = \"UPDATE_STOCK_FAILURE\";\r\n\r\nexport const PLUS_QUANTITY_SUCCESS = \"PLUS_QUANTITY_SUCCESS\";\r\n\r\nexport const MINUS_QUANTITY_SUCCESS = \"MINUS_QUANTITY_SUCCESS\";\r\n\r\nexport const INITIATE_STOCK_QUANTITY_SUCCESS = \"INITIATE_STOCK_QUANTITY_SUCCESS\";\r\n\r\nexport const SEARCH_STOCK_PRODUCT_SUCCESS = \"SEARCH_STOCK_PRODUCT_SUCCESS\";\r\n\r\nexport const SELECT_STOCK_CATEGORY_SUCCESS = \"SELECT_STOCK_CATEGORY_SUCCESS\";\r\n\r\nexport default (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_LIST_REQUEST:\r\n        break;\r\n      case LOAD_LIST_SUCCESS:\r\n        draft.stocks = action.data.stocks;\r\n        draft.originalStocks = action.data.stocks;\r\n        break;\r\n      case LOAD_LIST_FAILURE:\r\n        break;\r\n\r\n      case PLUS_QUANTITY_SUCCESS:\r\n        {\r\n          const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n          let quantity = product.quantity;\r\n          const stock = product.stock;\r\n          quantity = quantity < stock ? (quantity += 1) : product.quantity;\r\n          product.quantity = quantity;\r\n        }\r\n        break;\r\n\r\n      case MINUS_QUANTITY_SUCCESS:\r\n        {\r\n          const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n          let quantity = product.quantity;\r\n          quantity = quantity > 1 ? (quantity -= 1) : 1;\r\n          product.quantity = quantity;\r\n        }\r\n        break;\r\n\r\n      case INITIATE_STOCK_QUANTITY_SUCCESS:\r\n        {\r\n          const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n          product.quantity = 1;\r\n        }\r\n        break;\r\n\r\n      case SEARCH_STOCK_PRODUCT_SUCCESS:\r\n        {\r\n          const products = draft.originalStocks.filter((stock) =>\r\n            stock.Product.title.includes(action.data.text),\r\n          );\r\n          draft.stocks = products;\r\n        }\r\n        break;\r\n\r\n      case SELECT_STOCK_CATEGORY_SUCCESS:\r\n        {\r\n          const products = draft.originalStocks.filter(\r\n            (stock) => stock.Category.id === action.data.id,\r\n          );\r\n          draft.stocks = products;\r\n        }\r\n        break;\r\n\r\n      case ADD_STOCK_SUCCESS: {\r\n        const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n        const originalProducts = draft.originalStocks.find((stock) => stock.id === action.data.id);\r\n        if (product) {\r\n          product.stock = action.data.stock;\r\n          originalProducts.stock = action.data.stock;\r\n          break;\r\n        } else {\r\n          draft.stocks = [...state.stocks, action.data];\r\n          draft.originalStocks = [...state.originalStocks, action.data];\r\n          break;\r\n        }\r\n      }\r\n\r\n      case ADD_STOCK_FAILURE: {\r\n        draft.addStockError = action.error;\r\n      }\r\n\r\n      case SOLD_STOCK_SUCCESS:\r\n        {\r\n          if (action.data.stock === 0) {\r\n            draft.stocks = draft.stocks.filter((stock) => stock.id !== action.data.id);\r\n            draft.originalStocks = draft.originalStocks.filter(\r\n              (stock) => stock.id !== action.data.id,\r\n            );\r\n          } else {\r\n            const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n            const originalProducts = draft.originalStocks.find(\r\n              (stock) => stock.id === action.data.id,\r\n            );\r\n            product.stock = action.data.stock;\r\n            originalProducts.stock = action.data.stock;\r\n          }\r\n        }\r\n        break;\r\n\r\n      case UPDATE_STOCK_SUCCESS: {\r\n        if (action.data.stock === 0) {\r\n          draft.stocks = draft.stocks.filter((stock) => stock.id !== action.data.id);\r\n          draft.originalStocks = draft.originalStocks.filter(\r\n            (stock) => stock.id !== action.data.id,\r\n          );\r\n        } else {\r\n          const product = draft.stocks.find((stock) => stock.id === action.data.id);\r\n          const originalProducts = draft.originalStocks.find(\r\n            (stock) => stock.id === action.data.id,\r\n          );\r\n          product.stock = action.data.stock;\r\n          product.discount = action.data.discount;\r\n          originalProducts.stock = action.data.stock;\r\n          originalProducts.discount = action.data.discount;\r\n        }\r\n      }\r\n\r\n      default:\r\n        state;\r\n        break;\r\n    }\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}