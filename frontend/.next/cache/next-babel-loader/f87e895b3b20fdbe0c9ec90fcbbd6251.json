{"ast":null,"code":"import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, PASSWORD_CHANGE_REQUEST, PASSWORD_CHANGE_SUCCESS, PASSWORD_CHANGE_FAILURE } from '../reducers/user';\n\nfunction loginApi(loginData) {\n  return axios.post('/user/login', loginData);\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginApi, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogin() {\n  console.log('Try logging in');\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpApi(signUpData) {\n  return axios.post('/user/signup', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpApi, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction loadUserApi() {\n  // 서버에 요청을 보내는 부분\n  return axios.get('/user', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    console.log('load user request');\n    const result = yield call(loadUserApi);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction changePasswordApi({\n  id,\n  password\n}) {\n  return axios.post('/user/password/change', {\n    id,\n    password\n  });\n}\n\nfunction* passwordChange(action) {\n  try {\n    const result = yield call(changePasswordApi, action.data);\n    yield put({\n      type: PASSWORD_CHANGE_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: PASSWORD_CHANGE_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchPasswordChange() {\n  yield takeLatest(PASSWORD_CHANGE_REQUEST, passwordChange);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLoadUser), fork(watchSignUp), fork(watchPasswordChange)]);\n}","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/sagas/user.js"],"names":["fork","takeEvery","all","put","call","takeLatest","axios","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","PASSWORD_CHANGE_REQUEST","PASSWORD_CHANGE_SUCCESS","PASSWORD_CHANGE_FAILURE","loginApi","loginData","post","login","action","result","data","type","e","console","log","error","watchLogin","signUpApi","signUpData","signUp","watchSignUp","loadUserApi","get","withCredentials","loadUser","watchLoadUser","changePasswordApi","id","password","passwordChange","watchPasswordChange","userSaga"],"mappings":"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","sourcesContent":["import { fork, takeEvery, all, put, call, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAILURE,\r\n  LOAD_USER_REQUEST,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  PASSWORD_CHANGE_REQUEST,\r\n  PASSWORD_CHANGE_SUCCESS,\r\n  PASSWORD_CHANGE_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction loginApi(loginData) {\r\n  return axios.post('/user/login', loginData);\r\n}\r\n\r\nfunction* login(action) {\r\n  try {\r\n    const result = yield call(loginApi, action.data);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  console.log('Try logging in');\r\n  yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction signUpApi(signUpData) {\r\n  return axios.post('/user/signup', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpApi, action.data);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction loadUserApi() {\r\n  // 서버에 요청을 보내는 부분\r\n\r\n  return axios.get('/user', { withCredentials: true });\r\n}\r\n\r\nfunction* loadUser() {\r\n  try {\r\n    console.log('load user request');\r\n    const result = yield call(loadUserApi);\r\n    yield put({\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.log(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction changePasswordApi({ id, password }) {\r\n  return axios.post('/user/password/change', { id, password });\r\n}\r\n\r\nfunction* passwordChange(action) {\r\n  try {\r\n    const result = yield call(changePasswordApi, action.data);\r\n    yield put({\r\n      type: PASSWORD_CHANGE_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: PASSWORD_CHANGE_FAILURE,\r\n      error: e,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchPasswordChange() {\r\n  yield takeLatest(PASSWORD_CHANGE_REQUEST, passwordChange);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchLoadUser), fork(watchSignUp), fork(watchPasswordChange)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}