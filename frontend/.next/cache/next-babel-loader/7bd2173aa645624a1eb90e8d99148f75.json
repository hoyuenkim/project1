{"ast":null,"code":"import { createStore, compose, applyMiddleware } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport rootReducer from '../reducers';\n\nvar _require = require('redux-persist'),\n    persistStore = _require.persistStore;\n\nimport storage from 'redux-persist/lib/storage/session';\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhencer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n\n  var rootStore = function rootStore(reducer) {\n    return createStore(reducer, {}, enhencer);\n  };\n\n  var isServer = false;\n\n  if (isServer) {\n    var store = rootStore(rootReducer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    console.log(\"store: \".concat(store));\n    return store;\n  } else {\n    var _require2 = require('redux-persist'),\n        persistReducer = _require2.persistReducer;\n\n    var expiredBy = 60 * 60 * 1000;\n    var expirationKey = 'expirationKey';\n    var persistConfig = {\n      key: 'nextjs',\n      whitelist: ['user', 'menu'],\n      storage: storage,\n      transforms: []\n    };\n    console.log(\"store: \".concat(_store));\n    var persistedReducer = persistReducer(persistConfig, rootReducer);\n\n    var _store = rootStore(persistedReducer);\n\n    _store.sagaTask = sagaMiddleware.run(rootSaga);\n    _store.__persistor = persistStore(_store);\n    return _store;\n  }\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/store/configureStore.js"],"names":["createStore","compose","applyMiddleware","createWrapper","composeWithDevTools","createSagaMiddleware","rootSaga","rootReducer","require","persistStore","storage","configureStore","sagaMiddleware","middlewares","enhencer","rootStore","reducer","isServer","store","sagaTask","run","console","log","persistReducer","expiredBy","expirationKey","persistConfig","key","whitelist","transforms","persistedReducer","__persistor","wrapper","debug"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;eACyBC,OAAO,CAAC,eAAD,C;IAAxBC,Y,YAAAA,Y;;AACR,OAAOC,OAAP,MAAoB,mCAApB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,cAAc,GAAGP,oBAAoB,EAA3C;AAEA,MAAMQ,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GACZ,QACIb,OAAO,CAACC,eAAe,MAAf,SAAmBW,WAAnB,CAAD,CADX,GAEIT,mBAAmB,CAACF,eAAe,MAAf,SAAmBW,WAAnB,CAAD,CAHzB;;AAIA,MAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD;AAAA,WAAahB,WAAW,CAACgB,OAAD,EAAU,EAAV,EAAcF,QAAd,CAAxB;AAAA,GAAlB;;AAEA,MAAMG,QAAQ,QAAd;;AACA,MAAIA,QAAJ,EAAc;AACZ,QAAMC,KAAK,GAAGH,SAAS,CAACR,WAAD,CAAvB;AACAW,IAAAA,KAAK,CAACC,QAAN,GAAiBP,cAAc,CAACQ,GAAf,CAAmBd,QAAnB,CAAjB;AACAe,IAAAA,OAAO,CAACC,GAAR,kBAAsBJ,KAAtB;AACA,WAAOA,KAAP;AACD,GALD,MAKO;AAAA,oBACsBV,OAAO,CAAC,eAAD,CAD7B;AAAA,QACGe,cADH,aACGA,cADH;;AAGL,QAAMC,SAAS,GAAG,KAAK,EAAL,GAAU,IAA5B;AACA,QAAMC,aAAa,GAAG,eAAtB;AAEA,QAAMC,aAAa,GAAG;AACpBC,MAAAA,GAAG,EAAE,QADe;AAEpBC,MAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,MAAT,CAFS;AAGpBlB,MAAAA,OAAO,EAAPA,OAHoB;AAIpBmB,MAAAA,UAAU,EAAE;AAJQ,KAAtB;AAMAR,IAAAA,OAAO,CAACC,GAAR,kBAAsBJ,MAAtB;AACA,QAAMY,gBAAgB,GAAGP,cAAc,CAACG,aAAD,EAAgBnB,WAAhB,CAAvC;;AACA,QAAMW,MAAK,GAAGH,SAAS,CAACe,gBAAD,CAAvB;;AACAZ,IAAAA,MAAK,CAACC,QAAN,GAAiBP,cAAc,CAACQ,GAAf,CAAmBd,QAAnB,CAAjB;AACAY,IAAAA,MAAK,CAACa,WAAN,GAAoBtB,YAAY,CAACS,MAAD,CAAhC;AACA,WAAOA,MAAP;AACD;AACF,CAnCD;;AAqCA,IAAMc,OAAO,GAAG7B,aAAa,CAACQ,cAAD,EAAiB;AAAEsB,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { createStore, compose, applyMiddleware } from 'redux';\r\nimport { createWrapper } from 'next-redux-wrapper';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas';\r\nimport rootReducer from '../reducers';\r\nconst { persistStore } = require('redux-persist');\r\nimport storage from 'redux-persist/lib/storage/session';\r\n\r\nconst configureStore = () => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const middlewares = [sagaMiddleware];\r\n  const enhencer =\r\n    process.env.NODE_ENV === 'production'\r\n      ? compose(applyMiddleware(...middlewares))\r\n      : composeWithDevTools(applyMiddleware(...middlewares));\r\n  const rootStore = (reducer) => createStore(reducer, {}, enhencer);\r\n\r\n  const isServer = typeof window === 'undefined';\r\n  if (isServer) {\r\n    const store = rootStore(rootReducer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    console.log(`store: ${store}`);\r\n    return store;\r\n  } else {\r\n    const { persistReducer } = require('redux-persist');\r\n\r\n    const expiredBy = 60 * 60 * 1000;\r\n    const expirationKey = 'expirationKey';\r\n\r\n    const persistConfig = {\r\n      key: 'nextjs',\r\n      whitelist: ['user', 'menu'],\r\n      storage,\r\n      transforms: [],\r\n    };\r\n    console.log(`store: ${store}`);\r\n    const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n    const store = rootStore(persistedReducer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    store.__persistor = persistStore(store);\r\n    return store;\r\n  }\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV !== 'production' });\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}