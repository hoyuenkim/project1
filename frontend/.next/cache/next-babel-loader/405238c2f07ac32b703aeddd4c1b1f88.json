{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Button, Form, Input, Descriptions, Checkbox, Card, Space, Switch } from \"antd\";\nimport { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useInput } from \"../../components/Generalui/CustomHooks\";\nimport { SIGN_UP_REQUEST, BIZCODE_CONFIRM_REQUEST, EMAIL_CONFIRM_REQUEST } from \"../../reducers/user\";\nimport { withRouter } from \"next/router\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3065\";\n\nvar Signup = function Signup() {\n  _s();\n\n  var _useInput = useInput(),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      email = _useInput2[0],\n      onChangeEmail = _useInput2[1];\n\n  var _useInput3 = useInput(),\n      _useInput4 = _slicedToArray(_useInput3, 2),\n      password = _useInput4[0],\n      onChangePassword = _useInput4[1];\n\n  var _useInput5 = useInput(),\n      _useInput6 = _slicedToArray(_useInput5, 2),\n      passwordCheck = _useInput6[0],\n      onChangePasswordCheck = _useInput6[1];\n\n  var _useInput7 = useInput(),\n      _useInput8 = _slicedToArray(_useInput7, 2),\n      name = _useInput8[0],\n      onChangeName = _useInput8[1];\n\n  var _useState = useState(),\n      bizcode = _useState[0],\n      setBizcode = _useState[1];\n\n  var _useState2 = useState(),\n      address = _useState2[0],\n      setAddress = _useState2[1];\n\n  var _useInput9 = useInput(),\n      _useInput10 = _slicedToArray(_useInput9, 2),\n      addressDetail = _useInput10[0],\n      onChangeAddressDetail = _useInput10[1];\n\n  var _useState3 = useState(false),\n      termToggle = _useState3[0],\n      setTermToggle = _useState3[1];\n\n  var _useState4 = useState(false),\n      termError = _useState4[0],\n      setTermError = _useState4[1];\n\n  var _useState5 = useState(false),\n      divisionToggle = _useState5[0],\n      setDivisionToggle = _useState5[1];\n\n  var _useState6 = useState(false),\n      addressToggle = _useState6[0],\n      setAddressToggle = _useState6[1];\n\n  var _useState7 = useState(\"100vh\"),\n      formHeight = _useState7[0],\n      setFormHeight = _useState7[1];\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      bizcodeConfirm = _useSelector.bizcodeConfirm,\n      emailConfirm = _useSelector.emailConfirm;\n\n  var onClickTermToggle = function onClickTermToggle() {\n    return setTermToggle(!termToggle);\n  };\n\n  var handleComplete = function handleComplete(data) {\n    var fullAddress = data.address;\n    var extraAddress = \"\";\n\n    if (data.addressType === \"R\") {\n      if (data.bname !== \"\") {\n        extraAddress += data.bname;\n      }\n\n      if (data.buildingName !== \"\") {\n        extraAddress += extraAddress !== \"\" ? \", \".concat(data.buildingName) : data.buildingName;\n      }\n\n      fullAddress += extraAddress !== \"\" ? \" (\".concat(extraAddress, \")\") : \"\";\n    }\n\n    console.log(fullAddress); // e.g. '서울 성동구 왕십리로2길 20 (성수동1가)'\n\n    setAddress(fullAddress);\n    setAddressToggle(false);\n  };\n\n  var onFinish = function onFinish() {\n    var data = {};\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        username: email,\n        password: password,\n        name: name,\n        bizcode: bizcode,\n        address: address,\n        addressDetail: addressDetail,\n        divisionToggle: divisionToggle\n      }\n    });\n  };\n\n  var onChangeDivisionToggle = function onChangeDivisionToggle() {\n    setFormHeight(formHeight ? undefined : \"100vh\");\n    setDivisionToggle(!divisionToggle);\n  };\n\n  var onChangeBizcode = function onChangeBizcode(e) {\n    setBizcode(e.target.value);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    title: __jsx(Space, {\n      direction: \"horizental\",\n      align: \"baseline\",\n      size: \"large\"\n    }, divisionToggle ? __jsx(\"h1\", null, \"\\uAC00\\uB9F9\\uC810\") : __jsx(\"h1\", null, \"\\uC77C\\uBC18\\uD68C\\uC6D0\"), __jsx(Switch, {\n      onClick: onChangeDivisionToggle,\n      checkedChildren: \"\\uAC00\\uB9F9\\uC810\",\n      unCheckedChildren: \"\\uC77C\\uBC18\\uD68C\\uC6D0\",\n      size: \"middle\"\n    }))\n  }, __jsx(Form, {\n    onFinish: onFinish,\n    encType: \"multipart/form-data\"\n  }, __jsx(Space, {\n    direction: \"vertical\",\n    size: \"large\",\n    style: {\n      width: \"100%\",\n      height: formHeight\n    }\n  }, !termToggle && __jsx(Descriptions, {\n    bordered: true,\n    column: 24,\n    layout: \"vertical\",\n    size: \"large\"\n  }, __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uAC1C\\uC778(\\uC2E0\\uC6A9)\\uC815\\uBCF4\\uC218\\uC9D1/\\uC774\\uC6A9\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uACE0\\uC720\\uC2DD\\uBCC4\\uC815\\uBCF4\\uC758 \\uCC98\\uB9AC\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uD1B5\\uC2E0\\uC0AC \\uC774\\uC6A9\\uC57D\\uAD00\"), __jsx(Descriptions.Item, {\n    label: \"\\uD544\\uC218\"\n  }, \"\\uC11C\\uBE44\\uC2A4 \\uC774\\uC6A9\\uC57D\\uAD00\")), __jsx(\"div\", {\n    style: {\n      textAlign: \"right\"\n    }\n  }, __jsx(Checkbox, {\n    onChange: onClickTermToggle\n  }, \"\\uC804\\uCCB4\\uB3D9\\uC758\")), __jsx(Form.Item, {\n    name: \"email\",\n    validateTrigger: \"onBlur\",\n    rules: [{\n      required: true,\n      message: \"이메일를 입력해 주세요!\"\n    }, function () {\n      return {\n        validator: function validator(rule, value) {\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var regex, result;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    regex = new RegExp(/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i);\n\n                    if (!(value && value.match(regex))) {\n                      _context.next = 14;\n                      break;\n                    }\n\n                    _context.next = 4;\n                    return axios.post(\"http://localhost:3065/user/confirm/email\", {\n                      email: value\n                    });\n\n                  case 4:\n                    result = _context.sent;\n                    console.log(result.data);\n\n                    if (!result.data) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    console.log(\"existing email\");\n                    return _context.abrupt(\"return\", Promise.reject(\"이미 존재하는 이메일입니다\"));\n\n                  case 11:\n                    return _context.abrupt(\"return\", Promise.resolve());\n\n                  case 12:\n                    _context.next = 15;\n                    break;\n\n                  case 14:\n                    return _context.abrupt(\"return\", Promise.reject(\"형식에 맞지 않는 이메일입니다\"));\n\n                  case 15:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }))();\n        }\n      };\n    }]\n  }, __jsx(Input, {\n    size: \"large\",\n    prefix: \"* Email\",\n    value: email,\n    onChange: onChangeEmail,\n    placeholder: \"Email\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: \"비밀번호를 확인해주세요\"\n    }, {\n      pattern: /^[A-Za-z0-9]{6,12}$/,\n      message: \"비밀번호가 형식에 맞지 않습니다\"\n    }]\n  }, __jsx(Input.Password, {\n    prefix: \"* \\uBE44\\uBC00\\uBC88\\uD638\",\n    size: \"large\",\n    value: password,\n    onChange: onChangePassword,\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"passwordCheck\",\n    dependencies: [\"password\"],\n    rules: [{\n      required: true,\n      message: \"비밀번호를 확인해 주세요\"\n    }, function (_ref) {\n      var getFieldValue = _ref.getFieldValue;\n      return {\n        validator: function validator(rule, value) {\n          if (!value || getFieldValue(\"password\") === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\n        }\n      };\n    }]\n  }, __jsx(Input.Password, {\n    prefix: \"* \\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n    size: \"large\",\n    value: passwordCheck,\n    onChange: onChangePasswordCheck,\n    placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n  })), __jsx(Form.Item, {\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: \"이름을 입력해주세요\"\n    }]\n  }, __jsx(Input, {\n    prefix: divisionToggle ? \"* 가게명\" : \"* 이름\",\n    size: \"large\",\n    onChange: onChangeName,\n    value: name\n  })), divisionToggle && __jsx(React.Fragment, null, __jsx(Form.Item, {\n    name: \"bizcode\",\n    validateTrigger: \"onBlur\",\n    rules: [{\n      required: true,\n      message: \"사업자 등록번호를 입력해주세요\"\n    }, function () {\n      return {\n        validator: function validator(rule, value) {\n          if (value && value.match(/\\d{1}/g) || !value.length === 10) {\n            return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\n          } else {\n            var checkBizID = function checkBizID(bizID) {\n              var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);\n              var tmpBizID,\n                  i,\n                  chkSum = 0,\n                  c2,\n                  remander;\n              bizID = bizID.replace(/-/gi, \"\");\n\n              for (i = 0; i <= 7; i++) {\n                chkSum += checkID[i] * bizID.charAt(i);\n              }\n\n              c2 = \"0\" + checkID[8] * bizID.charAt(8);\n              c2 = c2.substring(c2.length - 2, c2.length);\n              chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));\n              remander = (10 - chkSum % 10) % 10;\n              if (Math.floor(bizID.charAt(9)) == remander) return true;\n              return false;\n            };\n\n            if (checkBizID(value)) {\n              dispatch({\n                type: BIZCODE_CONFIRM_REQUEST,\n                bizcode: value\n              });\n\n              if (!bizcodeConfirm) {\n                return Promise.resolve();\n              } else {\n                return Promise.reject(\"이미 존재하는 사업자 등록번호입니다\");\n              }\n            } else {\n              return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\n            }\n          }\n        }\n      };\n    }]\n  }, __jsx(Input, {\n    prefix: \"* 사업자등록번호\",\n    size: \"large\",\n    name: \"bizcode\",\n    value: bizcode,\n    onChange: onChangeBizcode\n  })), addressToggle ? __jsx(Card, null, __jsx(DaumPostcode, {\n    onComplete: handleComplete,\n    autoClose: true,\n    height: \"10\"\n  })) : __jsx(Form.Item, {\n    name: \"address\",\n    initialValue: address,\n    rules: [{\n      required: true,\n      message: \"주소를 입력해주세요\"\n    }]\n  }, __jsx(Input, {\n    prefix: \"* \\uC8FC\\uC18C\",\n    name: \"address\",\n    readOnly: true,\n    onClick: function onClick() {\n      return setAddressToggle(true);\n    },\n    size: \"large\"\n  })), __jsx(Form.Item, null, __jsx(Input, {\n    prefix: \"* \\uC0C1\\uC138\\uC8FC\\uC18C\",\n    name: \"addressDetail\",\n    onChange: onChangeAddressDetail,\n    size: \"large\"\n  }))), __jsx(Form.Item, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    style: {\n      width: \"100%\"\n    }\n  }, \"\\uC81C\\uCD9C\"))))));\n};\n\n_s(Signup, \"r6COAQQEMHN7mvXZ0jDzbJG5EkI=\", false, function () {\n  return [useInput, useInput, useInput, useInput, useInput, useDispatch, useSelector];\n});\n\n_c = Signup;\nexport default _c2 = withRouter(Signup);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Signup\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/pages/user/signup.js"],"names":["Button","Form","Input","Descriptions","Checkbox","Card","Space","Switch","useState","useCallback","useDispatch","useSelector","useInput","SIGN_UP_REQUEST","BIZCODE_CONFIRM_REQUEST","EMAIL_CONFIRM_REQUEST","withRouter","DaumPostcode","axios","defaults","baseURL","Signup","email","onChangeEmail","password","onChangePassword","passwordCheck","onChangePasswordCheck","name","onChangeName","bizcode","setBizcode","address","setAddress","addressDetail","onChangeAddressDetail","termToggle","setTermToggle","termError","setTermError","divisionToggle","setDivisionToggle","addressToggle","setAddressToggle","formHeight","setFormHeight","dispatch","state","user","bizcodeConfirm","emailConfirm","onClickTermToggle","handleComplete","data","fullAddress","extraAddress","addressType","bname","buildingName","console","log","onFinish","type","username","onChangeDivisionToggle","undefined","onChangeBizcode","e","target","value","width","height","textAlign","required","message","validator","rule","regex","RegExp","match","post","result","Promise","reject","resolve","pattern","getFieldValue","length","checkBizID","bizID","checkID","Array","tmpBizID","i","chkSum","c2","remander","replace","charAt","substring","Math","floor"],"mappings":"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","sourcesContent":["import { Button, Form, Input, Descriptions, Checkbox, Card, Space, Switch } from \"antd\";\r\nimport { useState, useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useInput } from \"../../components/Generalui/CustomHooks\";\r\nimport {\r\n  SIGN_UP_REQUEST,\r\n  BIZCODE_CONFIRM_REQUEST,\r\n  EMAIL_CONFIRM_REQUEST,\r\n} from \"../../reducers/user\";\r\nimport { withRouter } from \"next/router\";\r\nimport DaumPostcode from \"react-daum-postcode\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3065\";\r\n\r\nconst Signup = () => {\r\n  const [email, onChangeEmail] = useInput();\r\n  const [password, onChangePassword] = useInput();\r\n  const [passwordCheck, onChangePasswordCheck] = useInput();\r\n  const [name, onChangeName] = useInput();\r\n  const [bizcode, setBizcode] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [addressDetail, onChangeAddressDetail] = useInput();\r\n  const [termToggle, setTermToggle] = useState(false);\r\n  const [termError, setTermError] = useState(false);\r\n  const [divisionToggle, setDivisionToggle] = useState(false);\r\n  const [addressToggle, setAddressToggle] = useState(false);\r\n  const [formHeight, setFormHeight] = useState(\"100vh\");\r\n  const dispatch = useDispatch();\r\n\r\n  const { bizcodeConfirm, emailConfirm } = useSelector((state) => state.user);\r\n\r\n  const onClickTermToggle = () => {\r\n    return setTermToggle(!termToggle);\r\n  };\r\n\r\n  const handleComplete = (data) => {\r\n    let fullAddress = data.address;\r\n    let extraAddress = \"\";\r\n\r\n    if (data.addressType === \"R\") {\r\n      if (data.bname !== \"\") {\r\n        extraAddress += data.bname;\r\n      }\r\n      if (data.buildingName !== \"\") {\r\n        extraAddress += extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n      }\r\n      fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n    }\r\n\r\n    console.log(fullAddress); // e.g. '서울 성동구 왕십리로2길 20 (성수동1가)'\r\n    setAddress(fullAddress);\r\n    setAddressToggle(false);\r\n  };\r\n\r\n  const onFinish = () => {\r\n    const data = {};\r\n    dispatch({\r\n      type: SIGN_UP_REQUEST,\r\n      data: {\r\n        username: email,\r\n        password,\r\n        name,\r\n        bizcode,\r\n        address,\r\n        addressDetail,\r\n        divisionToggle,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onChangeDivisionToggle = () => {\r\n    setFormHeight(formHeight ? undefined : \"100vh\");\r\n    setDivisionToggle(!divisionToggle);\r\n  };\r\n\r\n  const onChangeBizcode = (e) => {\r\n    setBizcode(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title={\r\n          <Space direction=\"horizental\" align={`baseline`} size={`large`}>\r\n            {divisionToggle ? <h1>가맹점</h1> : <h1>일반회원</h1>}\r\n            <Switch\r\n              onClick={onChangeDivisionToggle}\r\n              checkedChildren={`가맹점`}\r\n              unCheckedChildren={`일반회원`}\r\n              size={\"middle\"}\r\n            />\r\n          </Space>\r\n        }\r\n      >\r\n        <Form onFinish={onFinish} encType={\"multipart/form-data\"}>\r\n          <Space direction=\"vertical\" size={\"large\"} style={{ width: \"100%\", height: formHeight }}>\r\n            {!termToggle && (\r\n              <Descriptions bordered column={24} layout={`vertical`} size={`large`}>\r\n                <Descriptions.Item label=\"필수\">개인(신용)정보수집/이용</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">고유식별정보의 처리</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">통신사 이용약관</Descriptions.Item>\r\n                <Descriptions.Item label=\"필수\">서비스 이용약관</Descriptions.Item>\r\n              </Descriptions>\r\n            )}\r\n            <div style={{ textAlign: \"right\" }}>\r\n              <Checkbox onChange={onClickTermToggle}>전체동의</Checkbox>\r\n            </div>\r\n\r\n            <Form.Item\r\n              name=\"email\"\r\n              validateTrigger=\"onBlur\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"이메일를 입력해 주세요!\",\r\n                },\r\n                () => ({\r\n                  async validator(rule, value) {\r\n                    const regex = new RegExp(\r\n                      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i\r\n                    );\r\n                    if (value && value.match(regex)) {\r\n                      const result = await axios.post(\"http://localhost:3065/user/confirm/email\", {\r\n                        email: value,\r\n                      });\r\n                      console.log(result.data);\r\n                      if (result.data) {\r\n                        console.log(`existing email`);\r\n                        return Promise.reject(\"이미 존재하는 이메일입니다\");\r\n                      } else {\r\n                        return Promise.resolve();\r\n                      }\r\n                    } else {\r\n                      return Promise.reject(\"형식에 맞지 않는 이메일입니다\");\r\n                    }\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input\r\n                size={`large`}\r\n                prefix={`* Email`}\r\n                value={email}\r\n                onChange={onChangeEmail}\r\n                placeholder=\"Email을 입력해주세요\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"비밀번호를 확인해주세요\",\r\n                },\r\n                {\r\n                  pattern: /^[A-Za-z0-9]{6,12}$/,\r\n                  message: \"비밀번호가 형식에 맞지 않습니다\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input.Password\r\n                prefix={`* 비밀번호`}\r\n                size={`large`}\r\n                value={password}\r\n                onChange={onChangePassword}\r\n                placeholder=\"비밀번호를 입력해주세요\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"passwordCheck\"\r\n              dependencies={[\"password\"]}\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"비밀번호를 확인해 주세요\",\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(rule, value) {\r\n                    if (!value || getFieldValue(\"password\") === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password\r\n                prefix={`* 비밀번호 확인`}\r\n                size={`large`}\r\n                value={passwordCheck}\r\n                onChange={onChangePasswordCheck}\r\n                placeholder=\"다시 비밀번호를 입력해주세요\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item name=\"name\" rules={[{ required: true, message: \"이름을 입력해주세요\" }]}>\r\n              <Input\r\n                prefix={divisionToggle ? \"* 가게명\" : \"* 이름\"}\r\n                size={`large`}\r\n                onChange={onChangeName}\r\n                value={name}\r\n              />\r\n            </Form.Item>\r\n            {divisionToggle && (\r\n              <>\r\n                <Form.Item\r\n                  name=\"bizcode\"\r\n                  validateTrigger=\"onBlur\"\r\n                  rules={[\r\n                    { required: true, message: \"사업자 등록번호를 입력해주세요\" },\r\n                    () => ({\r\n                      validator(rule, value) {\r\n                        if ((value && value.match(/\\d{1}/g)) || !value.length === 10) {\r\n                          return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\r\n                        } else {\r\n                          function checkBizID(bizID) {\r\n                            var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);\r\n                            var tmpBizID,\r\n                              i,\r\n                              chkSum = 0,\r\n                              c2,\r\n                              remander;\r\n                            bizID = bizID.replace(/-/gi, \"\");\r\n\r\n                            for (i = 0; i <= 7; i++) chkSum += checkID[i] * bizID.charAt(i);\r\n                            c2 = \"0\" + checkID[8] * bizID.charAt(8);\r\n                            c2 = c2.substring(c2.length - 2, c2.length);\r\n                            chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));\r\n                            remander = (10 - (chkSum % 10)) % 10;\r\n\r\n                            if (Math.floor(bizID.charAt(9)) == remander) return true;\r\n                            return false;\r\n                          }\r\n                          if (checkBizID(value)) {\r\n                            dispatch({\r\n                              type: BIZCODE_CONFIRM_REQUEST,\r\n                              bizcode: value,\r\n                            });\r\n                            if (!bizcodeConfirm) {\r\n                              return Promise.resolve();\r\n                            } else {\r\n                              return Promise.reject(\"이미 존재하는 사업자 등록번호입니다\");\r\n                            }\r\n                          } else {\r\n                            return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\r\n                          }\r\n                        }\r\n                      },\r\n                    }),\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    prefix={\"* 사업자등록번호\"}\r\n                    size={`large`}\r\n                    name={\"bizcode\"}\r\n                    value={bizcode}\r\n                    onChange={onChangeBizcode}\r\n                  />\r\n                </Form.Item>\r\n                {addressToggle ? (\r\n                  <Card>\r\n                    <DaumPostcode onComplete={handleComplete} autoClose={true} height={\"10\"} />\r\n                  </Card>\r\n                ) : (\r\n                  <Form.Item\r\n                    name=\"address\"\r\n                    initialValue={address}\r\n                    rules={[{ required: true, message: \"주소를 입력해주세요\" }]}\r\n                  >\r\n                    <Input\r\n                      prefix=\"* 주소\"\r\n                      name={\"address\"}\r\n                      readOnly\r\n                      onClick={() => setAddressToggle(true)}\r\n                      size={\"large\"}\r\n                    />\r\n                  </Form.Item>\r\n                )}\r\n                <Form.Item>\r\n                  <Input\r\n                    prefix=\"* 상세주소\"\r\n                    name={\"addressDetail\"}\r\n                    onChange={onChangeAddressDetail}\r\n                    size={\"large\"}\r\n                  />\r\n                </Form.Item>\r\n              </>\r\n            )}\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" style={{ width: `100%` }}>\r\n                제출\r\n              </Button>\r\n            </Form.Item>\r\n          </Space>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(Signup);\r\n"]},"metadata":{},"sourceType":"module"}