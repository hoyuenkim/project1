{"ast":null,"code":"import { Button, Form, Input, Card, Space, Switch } from \"antd\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useInput, useChecked } from \"../../components/Generalui/CustomHooks\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport Terms from \"../../components/Generalui/Terms\";\nimport axios from \"axios\";\nimport { SIGN_UP_REQUEST } from \"../../reducers/user\";\nimport Router from \"next/router\";\nimport { PAGE_CHANGE_SUCCESS } from \"../../reducers/admin\";\nimport KakaoAddress from \"../../components/Generalui/KakaoAddress\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\naxios.defaults.baseURL = `${process.env.BACKEND_IP}`;\n\nconst Signup = () => {\n  const [email, onChangeEmail] = useInput();\n  const [password, onChangePassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck] = useInput();\n  const [name, onChangeName] = useInput();\n  const [shopName, onChangeShopName] = useInput();\n  const {\n    0: bizcode,\n    1: setBizcode\n  } = useState();\n  const {\n    0: address,\n    1: setAddress\n  } = useState();\n  const [addressDetail, onChangeAddressDetail] = useInput();\n  const {\n    0: termToggle,\n    1: setTermToggle\n  } = useState(false);\n  const {\n    0: termError,\n    1: setTermError\n  } = useState(false);\n  const {\n    0: divisionToggle,\n    1: setDivisionToggle\n  } = useState(false); // const [addressToggle, setAddressToggle] = useState(false);\n\n  const {\n    0: coordinates,\n    1: setCoordinates\n  } = useState([]);\n  const [personalInformationTerm, togglePersonalInformationTerm, setPersonalInformationTerm] = useChecked(false);\n  const [thirdPartyIngormationTerm, toggleThirdPartyInformationTerm, setThirdPartyInformationTerm] = useChecked(false);\n  const [locationTerm, toggleLocationTerm, setLocationTerm] = useChecked(false);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({\n      type: PAGE_CHANGE_SUCCESS,\n      data: \"signup\"\n    });\n  });\n\n  const onClickTermToggle = () => {\n    return setTermToggle(!termToggle);\n  }; // const handleComplete = (data) => {\n  //   let fullAddress = data.address;\n  //   let extraAddress = \"\";\n  //   if (data.addressType === \"R\") {\n  //     if (data.bname !== \"\") {\n  //       extraAddress += data.bname;\n  //     }\n  //     if (data.buildingName !== \"\") {\n  //       extraAddress += extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\n  //     }\n  //     fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\n  //   }\n  //   setAddress(fullAddress);\n  //   axios\n  //     .get(`https://dapi.kakao.com/v2/local/search/address.json?query=${fullAddress}`, {\n  //       headers: {\n  //         Authorization: `KakaoAK ${process.env.KAKAO_APIKEY}`,\n  //       },\n  //     })\n  //     .then((res) => {\n  //       const location = res.data.documents[0];\n  //       console.log(location.address);\n  //       setCoordinates([Number(location.address.x), Number(location.address.y)]);\n  //     });\n  //   setAddressToggle(false);\n  // };\n\n\n  const onFinish = () => {\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        username: email,\n        password,\n        name,\n        bizcode,\n        address,\n        addressDetail,\n        coordinates,\n        shopName,\n        division: divisionToggle\n      }\n    });\n    Router.push(`/user/certificate/${email}`);\n  };\n\n  const onChangeDivisionToggle = () => {\n    setDivisionToggle(!divisionToggle);\n  };\n\n  const onChangeBizcode = e => {\n    setBizcode(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Card, {\n      title: /*#__PURE__*/_jsxs(Space, {\n        direction: \"horizental\",\n        align: `baseline`,\n        size: `large`,\n        children: [divisionToggle ? /*#__PURE__*/_jsx(\"h1\", {\n          children: \"\\uAC00\\uB9F9\\uC810\"\n        }) : /*#__PURE__*/_jsx(\"h1\", {\n          children: \"\\uC77C\\uBC18\\uD68C\\uC6D0\"\n        }), /*#__PURE__*/_jsx(Switch, {\n          onClick: onChangeDivisionToggle,\n          checkedChildren: `가맹점`,\n          unCheckedChildren: `일반회원`,\n          size: \"middle\"\n        })]\n      }),\n      children: /*#__PURE__*/_jsx(Form, {\n        onFinish: onFinish,\n        encType: \"multipart/form-data\",\n        children: /*#__PURE__*/_jsxs(Space, {\n          direction: \"vertical\",\n          size: \"large\",\n          style: {\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsx(Terms, {\n            setTerms: [[personalInformationTerm, togglePersonalInformationTerm, setPersonalInformationTerm], [thirdPartyIngormationTerm, toggleThirdPartyInformationTerm, setThirdPartyInformationTerm]]\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            name: \"email\",\n            validateTrigger: \"onBlur\",\n            rules: [{\n              required: true,\n              message: \"이메일를 입력해 주세요!\"\n            }, () => ({\n              async validator(rule, value) {\n                const regex = new RegExp(/^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i);\n\n                if (value && value.match(regex)) {\n                  const result = await axios.post(\"/user/confirm/email\", {\n                    email: value\n                  });\n\n                  if (result.data) {\n                    return Promise.reject(\"이미 존재하는 이메일입니다\");\n                  } else {\n                    return Promise.resolve();\n                  }\n                } else {\n                  return Promise.reject(\"형식에 맞지 않는 이메일입니다\");\n                }\n              }\n\n            })],\n            children: /*#__PURE__*/_jsx(Input, {\n              size: `large`,\n              prefix: `* Email`,\n              value: email,\n              onChange: onChangeEmail,\n              placeholder: \"Email\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            name: \"password\",\n            rules: [{\n              required: true,\n              message: \"비밀번호를 확인해주세요\"\n            }, {\n              pattern: /^[A-Za-z0-9]{6,12}$/,\n              message: \"비밀번호가 형식에 맞지 않습니다\"\n            }],\n            children: /*#__PURE__*/_jsx(Input.Password, {\n              prefix: `* 비밀번호`,\n              size: `large`,\n              value: password,\n              onChange: onChangePassword,\n              placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            name: \"passwordCheck\",\n            dependencies: [\"password\"],\n            rules: [{\n              required: true,\n              message: \"비밀번호를 확인해 주세요\"\n            }, ({\n              getFieldValue\n            }) => ({\n              validator(rule, value) {\n                if (!value || getFieldValue(\"password\") === value) {\n                  return Promise.resolve();\n                }\n\n                return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\n              }\n\n            })],\n            children: /*#__PURE__*/_jsx(Input.Password, {\n              prefix: `* 비밀번호 확인`,\n              size: `large`,\n              value: passwordCheck,\n              onChange: onChangePasswordCheck,\n              placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\"\n            })\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            name: \"name\",\n            rules: [{\n              required: true,\n              message: \"이름을 입력해주세요\"\n            }],\n            children: /*#__PURE__*/_jsx(Input, {\n              prefix: divisionToggle ? \"* 대표자명\" : \"* 이름\",\n              size: `large`,\n              onChange: onChangeName,\n              value: name\n            })\n          }), divisionToggle && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Form.Item, {\n              name: \"shopName\",\n              rules: [{\n                required: true,\n                message: \"점포명을 입력해주세요\"\n              }],\n              children: /*#__PURE__*/_jsx(Input, {\n                prefix: \"* 점포명\",\n                size: `large`,\n                onChange: onChangeShopName,\n                value: shopName\n              })\n            }), /*#__PURE__*/_jsx(Form.Item, {\n              name: \"bizcode\",\n              validateTrigger: \"onBlur\",\n              rules: [{\n                required: true,\n                message: \"사업자 등록번호를 입력해주세요\"\n              }, () => ({\n                async validator(rule, value) {\n                  if (!value || !value.match(/\\d{1}/g) || !value.length === 10) {\n                    return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\n                  } else {\n                    function checkBizID(bizID) {\n                      var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);\n                      var tmpBizID,\n                          i,\n                          chkSum = 0,\n                          c2,\n                          remander;\n                      bizID = bizID.replace(/-/gi, \"\");\n\n                      for (i = 0; i <= 7; i++) chkSum += checkID[i] * bizID.charAt(i);\n\n                      c2 = \"0\" + checkID[8] * bizID.charAt(8);\n                      c2 = c2.substring(c2.length - 2, c2.length);\n                      chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));\n                      remander = (10 - chkSum % 10) % 10;\n                      if (Math.floor(bizID.charAt(9)) == remander) return true;\n                      return false;\n                    }\n\n                    if (checkBizID(value)) {\n                      const result = await axios.post(\"/user/confirm/bizcode\", {\n                        bizcode: value\n                      });\n\n                      if (!result.data) {\n                        return Promise.resolve();\n                      } else {\n                        return Promise.reject(\"이미 존재하는 사업자 등록번호입니다\");\n                      }\n                    } else {\n                      return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\n                    }\n                  }\n                }\n\n              })],\n              children: /*#__PURE__*/_jsx(Input, {\n                prefix: \"* 사업자등록번호\",\n                size: `large`,\n                name: \"bizcode\",\n                value: bizcode,\n                onChange: onChangeBizcode\n              })\n            })]\n          }), /*#__PURE__*/_jsx(KakaoAddress, {\n            address: address,\n            addressDetail: addressDetail,\n            setAddress: setAddress,\n            onChangeAddressDetail: onChangeAddressDetail\n          }), /*#__PURE__*/_jsx(Form.Item, {\n            children: /*#__PURE__*/_jsx(Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              style: {\n                width: `100%`\n              },\n              children: \"\\uC81C\\uCD9C\"\n            })\n          })]\n        })\n      })\n    })\n  });\n};\n\nexport default Signup;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/dev/project1/frontend/pages/user/signup.js"],"names":["Button","Form","Input","Card","Space","Switch","useState","useEffect","useDispatch","useInput","useChecked","DaumPostcode","Terms","axios","SIGN_UP_REQUEST","Router","PAGE_CHANGE_SUCCESS","KakaoAddress","defaults","baseURL","process","env","BACKEND_IP","Signup","email","onChangeEmail","password","onChangePassword","passwordCheck","onChangePasswordCheck","name","onChangeName","shopName","onChangeShopName","bizcode","setBizcode","address","setAddress","addressDetail","onChangeAddressDetail","termToggle","setTermToggle","termError","setTermError","divisionToggle","setDivisionToggle","coordinates","setCoordinates","personalInformationTerm","togglePersonalInformationTerm","setPersonalInformationTerm","thirdPartyIngormationTerm","toggleThirdPartyInformationTerm","setThirdPartyInformationTerm","locationTerm","toggleLocationTerm","setLocationTerm","dispatch","type","data","onClickTermToggle","onFinish","username","division","push","onChangeDivisionToggle","onChangeBizcode","e","target","value","width","required","message","validator","rule","regex","RegExp","match","result","post","Promise","reject","resolve","pattern","getFieldValue","length","checkBizID","bizID","checkID","Array","tmpBizID","i","chkSum","c2","remander","replace","charAt","substring","Math","floor"],"mappings":"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","sourcesContent":["import { Button, Form, Input, Card, Space, Switch } from \"antd\";\nimport { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useInput, useChecked } from \"../../components/Generalui/CustomHooks\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport Terms from \"../../components/Generalui/Terms\";\nimport axios from \"axios\";\nimport { SIGN_UP_REQUEST } from \"../../reducers/user\";\nimport Router from \"next/router\";\nimport { PAGE_CHANGE_SUCCESS } from \"../../reducers/admin\";\nimport KakaoAddress from \"../../components/Generalui/KakaoAddress\";\n\naxios.defaults.baseURL = `${process.env.BACKEND_IP}`;\nconst Signup = () => {\n  const [email, onChangeEmail] = useInput();\n  const [password, onChangePassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck] = useInput();\n  const [name, onChangeName] = useInput();\n  const [shopName, onChangeShopName] = useInput();\n  const [bizcode, setBizcode] = useState();\n  const [address, setAddress] = useState();\n  const [addressDetail, onChangeAddressDetail] = useInput();\n  const [termToggle, setTermToggle] = useState(false);\n  const [termError, setTermError] = useState(false);\n  const [divisionToggle, setDivisionToggle] = useState(false);\n  // const [addressToggle, setAddressToggle] = useState(false);\n  const [coordinates, setCoordinates] = useState([]);\n  const [personalInformationTerm, togglePersonalInformationTerm, setPersonalInformationTerm] =\n    useChecked(false);\n  const [thirdPartyIngormationTerm, toggleThirdPartyInformationTerm, setThirdPartyInformationTerm] =\n    useChecked(false);\n\n  const [locationTerm, toggleLocationTerm, setLocationTerm] = useChecked(false);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch({ type: PAGE_CHANGE_SUCCESS, data: \"signup\" });\n  });\n\n  const onClickTermToggle = () => {\n    return setTermToggle(!termToggle);\n  };\n\n  // const handleComplete = (data) => {\n  //   let fullAddress = data.address;\n  //   let extraAddress = \"\";\n\n  //   if (data.addressType === \"R\") {\n  //     if (data.bname !== \"\") {\n  //       extraAddress += data.bname;\n  //     }\n  //     if (data.buildingName !== \"\") {\n  //       extraAddress += extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\n  //     }\n  //     fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\n  //   }\n\n  //   setAddress(fullAddress);\n\n  //   axios\n  //     .get(`https://dapi.kakao.com/v2/local/search/address.json?query=${fullAddress}`, {\n  //       headers: {\n  //         Authorization: `KakaoAK ${process.env.KAKAO_APIKEY}`,\n  //       },\n  //     })\n  //     .then((res) => {\n  //       const location = res.data.documents[0];\n  //       console.log(location.address);\n  //       setCoordinates([Number(location.address.x), Number(location.address.y)]);\n  //     });\n\n  //   setAddressToggle(false);\n  // };\n\n  const onFinish = () => {\n    dispatch({\n      type: SIGN_UP_REQUEST,\n      data: {\n        username: email,\n        password,\n        name,\n        bizcode,\n        address,\n        addressDetail,\n        coordinates,\n        shopName,\n        division: divisionToggle,\n      },\n    });\n    Router.push(`/user/certificate/${email}`);\n  };\n\n  const onChangeDivisionToggle = () => {\n    setDivisionToggle(!divisionToggle);\n  };\n\n  const onChangeBizcode = (e) => {\n    setBizcode(e.target.value);\n  };\n\n  return (\n    <>\n      <Card\n        title={\n          <Space direction=\"horizental\" align={`baseline`} size={`large`}>\n            {divisionToggle ? <h1>가맹점</h1> : <h1>일반회원</h1>}\n            <Switch\n              onClick={onChangeDivisionToggle}\n              checkedChildren={`가맹점`}\n              unCheckedChildren={`일반회원`}\n              size={\"middle\"}\n            />\n          </Space>\n        }\n      >\n        <Form onFinish={onFinish} encType={\"multipart/form-data\"}>\n          <Space direction=\"vertical\" size={\"large\"} style={{ width: \"100%\" }}>\n            <Terms\n              setTerms={[\n                [\n                  personalInformationTerm,\n                  togglePersonalInformationTerm,\n                  setPersonalInformationTerm,\n                ],\n                [\n                  thirdPartyIngormationTerm,\n                  toggleThirdPartyInformationTerm,\n                  setThirdPartyInformationTerm,\n                ],\n              ]}\n            />\n\n            <Form.Item\n              name=\"email\"\n              validateTrigger=\"onBlur\"\n              rules={[\n                {\n                  required: true,\n                  message: \"이메일를 입력해 주세요!\",\n                },\n                () => ({\n                  async validator(rule, value) {\n                    const regex = new RegExp(\n                      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i,\n                    );\n                    if (value && value.match(regex)) {\n                      const result = await axios.post(\"/user/confirm/email\", {\n                        email: value,\n                      });\n                      if (result.data) {\n                        return Promise.reject(\"이미 존재하는 이메일입니다\");\n                      } else {\n                        return Promise.resolve();\n                      }\n                    } else {\n                      return Promise.reject(\"형식에 맞지 않는 이메일입니다\");\n                    }\n                  },\n                }),\n              ]}\n            >\n              <Input\n                size={`large`}\n                prefix={`* Email`}\n                value={email}\n                onChange={onChangeEmail}\n                placeholder=\"Email을 입력해주세요\"\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"password\"\n              rules={[\n                {\n                  required: true,\n                  message: \"비밀번호를 확인해주세요\",\n                },\n                {\n                  pattern: /^[A-Za-z0-9]{6,12}$/,\n                  message: \"비밀번호가 형식에 맞지 않습니다\",\n                },\n              ]}\n            >\n              <Input.Password\n                prefix={`* 비밀번호`}\n                size={`large`}\n                value={password}\n                onChange={onChangePassword}\n                placeholder=\"비밀번호를 입력해주세요\"\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"passwordCheck\"\n              dependencies={[\"password\"]}\n              rules={[\n                {\n                  required: true,\n                  message: \"비밀번호를 확인해 주세요\",\n                },\n                ({ getFieldValue }) => ({\n                  validator(rule, value) {\n                    if (!value || getFieldValue(\"password\") === value) {\n                      return Promise.resolve();\n                    }\n                    return Promise.reject(\"비밀번호가 일치하지 않습니다.\");\n                  },\n                }),\n              ]}\n            >\n              <Input.Password\n                prefix={`* 비밀번호 확인`}\n                size={`large`}\n                value={passwordCheck}\n                onChange={onChangePasswordCheck}\n                placeholder=\"다시 비밀번호를 입력해주세요\"\n              />\n            </Form.Item>\n            <Form.Item name=\"name\" rules={[{ required: true, message: \"이름을 입력해주세요\" }]}>\n              <Input\n                prefix={divisionToggle ? \"* 대표자명\" : \"* 이름\"}\n                size={`large`}\n                onChange={onChangeName}\n                value={name}\n              />\n            </Form.Item>\n            {divisionToggle && (\n              <>\n                <Form.Item\n                  name={\"shopName\"}\n                  rules={[{ required: true, message: \"점포명을 입력해주세요\" }]}\n                >\n                  <Input\n                    prefix={\"* 점포명\"}\n                    size={`large`}\n                    onChange={onChangeShopName}\n                    value={shopName}\n                  />\n                </Form.Item>\n                <Form.Item\n                  name=\"bizcode\"\n                  validateTrigger=\"onBlur\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"사업자 등록번호를 입력해주세요\",\n                    },\n                    () => ({\n                      async validator(rule, value) {\n                        if (!value || !value.match(/\\d{1}/g) || !value.length === 10) {\n                          return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\n                        } else {\n                          function checkBizID(bizID) {\n                            var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);\n                            var tmpBizID,\n                              i,\n                              chkSum = 0,\n                              c2,\n                              remander;\n                            bizID = bizID.replace(/-/gi, \"\");\n\n                            for (i = 0; i <= 7; i++) chkSum += checkID[i] * bizID.charAt(i);\n                            c2 = \"0\" + checkID[8] * bizID.charAt(8);\n                            c2 = c2.substring(c2.length - 2, c2.length);\n                            chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));\n                            remander = (10 - (chkSum % 10)) % 10;\n\n                            if (Math.floor(bizID.charAt(9)) == remander) return true;\n                            return false;\n                          }\n                          if (checkBizID(value)) {\n                            const result = await axios.post(\"/user/confirm/bizcode\", {\n                              bizcode: value,\n                            });\n                            if (!result.data) {\n                              return Promise.resolve();\n                            } else {\n                              return Promise.reject(\"이미 존재하는 사업자 등록번호입니다\");\n                            }\n                          } else {\n                            return Promise.reject(\"형식에 맞지 않은 사업자 등록번호입니다\");\n                          }\n                        }\n                      },\n                    }),\n                  ]}\n                >\n                  <Input\n                    prefix={\"* 사업자등록번호\"}\n                    size={`large`}\n                    name={\"bizcode\"}\n                    value={bizcode}\n                    onChange={onChangeBizcode}\n                  />\n                </Form.Item>\n              </>\n            )}\n\n            <KakaoAddress\n              address={address}\n              addressDetail={addressDetail}\n              setAddress={setAddress}\n              onChangeAddressDetail={onChangeAddressDetail}\n            />\n            {/* {addressToggle ? (\n              <Card>\n                <DaumPostcode onComplete={handleComplete} autoClose={true} height={\"10\"} />\n              </Card>\n            ) : (\n              <Form.Item\n                name=\"address\"\n                initialValue={address}\n                rules={[{ required: true, message: \"주소를 입력해주세요\" }]}\n              >\n                <Input\n                  prefix=\"* 주소\"\n                  name={\"address\"}\n                  readOnly\n                  onClick={() => setAddressToggle(true)}\n                  size={\"large\"}\n                />\n              </Form.Item>\n            )}\n            <Form.Item>\n              <Input\n                prefix=\"* 상세주소\"\n                name={\"addressDetail\"}\n                onChange={onChangeAddressDetail}\n                size={\"large\"}\n              />\n            </Form.Item> */}\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" style={{ width: `100%` }}>\n                제출\n              </Button>\n            </Form.Item>\n          </Space>\n        </Form>\n      </Card>\n    </>\n  );\n};\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}