{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hoyuen\\\\Documents\\\\project\\\\project1\\\\frontend\\\\components\\\\Forms\\\\ChangePassword.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button, Card } from 'antd';\nimport { useInput } from './Ge/CustomHooks';\nimport { useCallback } from 'react';\nimport axios from 'axios';\nimport { PASSWORD_CHANGE_REQUEST } from '../../reducers/user';\n\nconst ChangePassword = ({\n  setToggleChangePassword\n}) => {\n  const dispatch = useDispatch();\n  const [presentPassword, onChangePresentPassword, setPresentPassword] = useInput();\n  const [password, onChangePassword, setPassword] = useInput();\n  const [passwordCheck, onChangePasswordCheck, setChangePasswordCheck] = useInput();\n  const {\n    session,\n    isLoggedIn\n  } = useSelector(state => state.user);\n  const onFinish = useCallback(() => {\n    dispatch({\n      type: PASSWORD_CHANGE_REQUEST,\n      data: {\n        id: session.id,\n        password\n      }\n    });\n    setToggleChangePassword(prev => !prev);\n    setPresentPassword(null);\n    setPassword(null);\n    setChangePasswordCheck(null);\n  }, [password, passwordCheck]);\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    style: {\n      verticalAlign: 'middle'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(Form, {\n    onFinish: onFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    name: \"presentPassword\",\n    validateTrigger: \"onBlur\",\n    rules: [{\n      required: true,\n      message: '기존 비밀번호를 입력해주세요'\n    }, () => ({\n      async validator(rule, value) {\n        const regex = new RegExp(/^[A-Za-z0-9]{6,12}$/);\n\n        if (value && value.match(regex)) {\n          const result = await axios.post('/user/confirm/password', {\n            id: session.id,\n            password: value\n          });\n\n          if (!result.data) {\n            // console.log(result);\n            return Promise.reject('기존 비밀번호가 일치하지 않습니다.');\n          } else {\n            return Promise.resolve();\n          }\n        } else {\n          return Promise.reject('형식에 맞지 않는 비밀번호입니다');\n        }\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, __jsx(Input.Password, {\n    size: `large`,\n    prefix: `* 기존 패스워드`,\n    value: presentPassword,\n    onChange: onChangePresentPassword,\n    placeholder: \"\\uAE30\\uC874 \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: '비밀번호를 확인해주세요'\n    }, {\n      pattern: /^[A-Za-z0-9]{6,12}$/,\n      message: '비밀번호가 형식에 맞지 않습니다'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, __jsx(Input.Password, {\n    prefix: `* 비밀번호`,\n    size: `large`,\n    value: password,\n    onChange: onChangePassword,\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  })), __jsx(Form.Item, {\n    name: \"passwordCheck\",\n    dependencies: ['password'],\n    rules: [{\n      required: true,\n      message: '비밀번호를 확인해 주세요'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject('비밀번호가 일치하지 않습니다.');\n      }\n\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(Input.Password, {\n    prefix: `* 비밀번호 확인`,\n    size: `large`,\n    value: passwordCheck,\n    onChange: onChangePasswordCheck,\n    placeholder: \"\\uB2E4\\uC2DC \\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  })), __jsx(Button, {\n    type: 'primary',\n    htmlType: 'submit',\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"\\uBE44\\uBC00\\uBC88\\uD638 \\uBCC0\\uACBD\"))));\n};\n\nexport default ChangePassword;","map":{"version":3,"sources":["C:/Users/hoyuen/Documents/project/project1/frontend/components/Forms/ChangePassword.js"],"names":["useDispatch","useSelector","Form","Input","Button","Card","useInput","useCallback","axios","PASSWORD_CHANGE_REQUEST","ChangePassword","setToggleChangePassword","dispatch","presentPassword","onChangePresentPassword","setPresentPassword","password","onChangePassword","setPassword","passwordCheck","onChangePasswordCheck","setChangePasswordCheck","session","isLoggedIn","state","user","onFinish","type","data","id","prev","verticalAlign","required","message","validator","rule","value","regex","RegExp","match","result","post","Promise","reject","resolve","pattern","getFieldValue","width"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,IAA9B,QAA0C,MAA1C;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,QAAwC,qBAAxC;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiC;AACtD,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM,CAACa,eAAD,EAAkBC,uBAAlB,EAA2CC,kBAA3C,IAAiET,QAAQ,EAA/E;AACA,QAAM,CAACU,QAAD,EAAWC,gBAAX,EAA6BC,WAA7B,IAA4CZ,QAAQ,EAA1D;AACA,QAAM,CAACa,aAAD,EAAgBC,qBAAhB,EAAuCC,sBAAvC,IAAiEf,QAAQ,EAA/E;AAEA,QAAM;AAAEgB,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA0BtB,WAAW,CAAEuB,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA3C;AAEA,QAAMC,QAAQ,GAAGnB,WAAW,CAAC,MAAM;AACjCK,IAAAA,QAAQ,CAAC;AACPe,MAAAA,IAAI,EAAElB,uBADC;AAEPmB,MAAAA,IAAI,EAAE;AACJC,QAAAA,EAAE,EAAEP,OAAO,CAACO,EADR;AAEJb,QAAAA;AAFI;AAFC,KAAD,CAAR;AAOAL,IAAAA,uBAAuB,CAAEmB,IAAD,IAAU,CAACA,IAAZ,CAAvB;AACAf,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAG,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAG,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACD,GAZ2B,EAYzB,CAACL,QAAD,EAAWG,aAAX,CAZyB,CAA5B;AAcA,SACE,4BACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEY,MAAAA,aAAa,EAAE;AAAjB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEL,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,eAAe,EAAC,QAFlB;AAGE,IAAA,KAAK,EAAE,CACL;AACEM,MAAAA,QAAQ,EAAE,IADZ;AAEEC,MAAAA,OAAO,EAAE;AAFX,KADK,EAKL,OAAO;AACL,YAAMC,SAAN,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC3B,cAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAW,qBAAX,CAAd;;AACA,YAAIF,KAAK,IAAIA,KAAK,CAACG,KAAN,CAAYF,KAAZ,CAAb,EAAiC;AAC/B,gBAAMG,MAAM,GAAG,MAAMhC,KAAK,CAACiC,IAAN,CAAW,wBAAX,EAAqC;AACxDZ,YAAAA,EAAE,EAAEP,OAAO,CAACO,EAD4C;AAExDb,YAAAA,QAAQ,EAAEoB;AAF8C,WAArC,CAArB;;AAIA,cAAI,CAACI,MAAM,CAACZ,IAAZ,EAAkB;AAChB;AACA,mBAAOc,OAAO,CAACC,MAAR,CAAe,qBAAf,CAAP;AACD,WAHD,MAGO;AACL,mBAAOD,OAAO,CAACE,OAAR,EAAP;AACD;AACF,SAXD,MAWO;AACL,iBAAOF,OAAO,CAACC,MAAR,CAAe,mBAAf,CAAP;AACD;AACF;;AAjBI,KAAP,CALK,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA6BE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,IAAI,EAAG,OADT;AAEE,IAAA,MAAM,EAAG,WAFX;AAGE,IAAA,KAAK,EAAE9B,eAHT;AAIE,IAAA,QAAQ,EAAEC,uBAJZ;AAKE,IAAA,WAAW,EAAC,kFALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7BF,CADF,EAsCE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,KAAK,EAAE,CACL;AACEkB,MAAAA,QAAQ,EAAE,IADZ;AAEEC,MAAAA,OAAO,EAAE;AAFX,KADK,EAKL;AACEY,MAAAA,OAAO,EAAE,qBADX;AAEEZ,MAAAA,OAAO,EAAE;AAFX,KALK,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAaE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,MAAM,EAAG,QADX;AAEE,IAAA,IAAI,EAAG,OAFT;AAGE,IAAA,KAAK,EAAEjB,QAHT;AAIE,IAAA,QAAQ,EAAEC,gBAJZ;AAKE,IAAA,WAAW,EAAC,qEALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CAtCF,EA2DE,MAAC,IAAD,CAAM,IAAN;AACE,IAAA,IAAI,EAAC,eADP;AAEE,IAAA,YAAY,EAAE,CAAC,UAAD,CAFhB;AAGE,IAAA,KAAK,EAAE,CACL;AACEe,MAAAA,QAAQ,EAAE,IADZ;AAEEC,MAAAA,OAAO,EAAE;AAFX,KADK,EAKL,CAAC;AAAEa,MAAAA;AAAF,KAAD,MAAwB;AACtBZ,MAAAA,SAAS,CAACC,IAAD,EAAOC,KAAP,EAAc;AACrB,YAAI,CAACA,KAAD,IAAUU,aAAa,CAAC,UAAD,CAAb,KAA8BV,KAA5C,EAAmD;AACjD,iBAAOM,OAAO,CAACE,OAAR,EAAP;AACD;;AACD,eAAOF,OAAO,CAACC,MAAR,CAAe,kBAAf,CAAP;AACD;;AANqB,KAAxB,CALK,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,MAAM,EAAG,WADX;AAEE,IAAA,IAAI,EAAG,OAFT;AAGE,IAAA,KAAK,EAAExB,aAHT;AAIE,IAAA,QAAQ,EAAEC,qBAJZ;AAKE,IAAA,WAAW,EAAC,kFALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,CA3DF,EAqFE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,SAAd;AAAyB,IAAA,QAAQ,EAAE,QAAnC;AAA6C,IAAA,KAAK,EAAE;AAAE2B,MAAAA,KAAK,EAAE;AAAT,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CArFF,CADF,CADF,CADF;AA+FD,CArHD;;AAuHA,eAAerC,cAAf","sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Input, Button, Card } from 'antd';\r\nimport { useInput } from './Ge/CustomHooks';\r\nimport { useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { PASSWORD_CHANGE_REQUEST } from '../../reducers/user';\r\n\r\nconst ChangePassword = ({ setToggleChangePassword }) => {\r\n  const dispatch = useDispatch();\r\n  const [presentPassword, onChangePresentPassword, setPresentPassword] = useInput();\r\n  const [password, onChangePassword, setPassword] = useInput();\r\n  const [passwordCheck, onChangePasswordCheck, setChangePasswordCheck] = useInput();\r\n\r\n  const { session, isLoggedIn } = useSelector((state) => state.user);\r\n\r\n  const onFinish = useCallback(() => {\r\n    dispatch({\r\n      type: PASSWORD_CHANGE_REQUEST,\r\n      data: {\r\n        id: session.id,\r\n        password,\r\n      },\r\n    });\r\n    setToggleChangePassword((prev) => !prev);\r\n    setPresentPassword(null);\r\n    setPassword(null);\r\n    setChangePasswordCheck(null);\r\n  }, [password, passwordCheck]);\r\n\r\n  return (\r\n    <>\r\n      <Card style={{ verticalAlign: 'middle' }}>\r\n        <Form onFinish={onFinish}>\r\n          <Form.Item\r\n            name=\"presentPassword\"\r\n            validateTrigger=\"onBlur\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '기존 비밀번호를 입력해주세요',\r\n              },\r\n              () => ({\r\n                async validator(rule, value) {\r\n                  const regex = new RegExp(/^[A-Za-z0-9]{6,12}$/);\r\n                  if (value && value.match(regex)) {\r\n                    const result = await axios.post('/user/confirm/password', {\r\n                      id: session.id,\r\n                      password: value,\r\n                    });\r\n                    if (!result.data) {\r\n                      // console.log(result);\r\n                      return Promise.reject('기존 비밀번호가 일치하지 않습니다.');\r\n                    } else {\r\n                      return Promise.resolve();\r\n                    }\r\n                  } else {\r\n                    return Promise.reject('형식에 맞지 않는 비밀번호입니다');\r\n                  }\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input.Password\r\n              size={`large`}\r\n              prefix={`* 기존 패스워드`}\r\n              value={presentPassword}\r\n              onChange={onChangePresentPassword}\r\n              placeholder=\"기존 비밀번호를 입력해주세요\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"password\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '비밀번호를 확인해주세요',\r\n              },\r\n              {\r\n                pattern: /^[A-Za-z0-9]{6,12}$/,\r\n                message: '비밀번호가 형식에 맞지 않습니다',\r\n              },\r\n            ]}\r\n          >\r\n            <Input.Password\r\n              prefix={`* 비밀번호`}\r\n              size={`large`}\r\n              value={password}\r\n              onChange={onChangePassword}\r\n              placeholder=\"비밀번호를 입력해주세요\"\r\n            />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"passwordCheck\"\r\n            dependencies={['password']}\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: '비밀번호를 확인해 주세요',\r\n              },\r\n              ({ getFieldValue }) => ({\r\n                validator(rule, value) {\r\n                  if (!value || getFieldValue('password') === value) {\r\n                    return Promise.resolve();\r\n                  }\r\n                  return Promise.reject('비밀번호가 일치하지 않습니다.');\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input.Password\r\n              prefix={`* 비밀번호 확인`}\r\n              size={`large`}\r\n              value={passwordCheck}\r\n              onChange={onChangePasswordCheck}\r\n              placeholder=\"다시 비밀번호를 입력해주세요\"\r\n            />\r\n          </Form.Item>\r\n          <Button type={'primary'} htmlType={'submit'} style={{ width: '100%' }}>\r\n            비밀번호 변경\r\n          </Button>\r\n        </Form>\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChangePassword;\r\n"]},"metadata":{},"sourceType":"module"}